// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/common/UserData.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Snapshots)
pub struct Snapshots {
    // message fields
    // @@protoc_insertion_point(field:Snapshots.face256)
    pub face256: ::std::string::String,
    // @@protoc_insertion_point(field:Snapshots.body)
    pub body: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Snapshots.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Snapshots {
    fn default() -> &'a Snapshots {
        <Snapshots as ::protobuf::Message>::default_instance()
    }
}

impl Snapshots {
    pub fn new() -> Snapshots {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "face256",
            |m: &Snapshots| { &m.face256 },
            |m: &mut Snapshots| { &mut m.face256 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &Snapshots| { &m.body },
            |m: &mut Snapshots| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Snapshots>(
            "Snapshots",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Snapshots {
    const NAME: &'static str = "Snapshots";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.face256 = is.read_string()?;
                },
                18 => {
                    self.body = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.face256.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.face256);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.face256.is_empty() {
            os.write_string(1, &self.face256)?;
        }
        if !self.body.is_empty() {
            os.write_string(2, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Snapshots {
        Snapshots::new()
    }

    fn clear(&mut self) {
        self.face256.clear();
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Snapshots {
        static instance: Snapshots = Snapshots {
            face256: ::std::string::String::new(),
            body: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Snapshots {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Snapshots").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Snapshots {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Snapshots {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AvatarForUserData)
pub struct AvatarForUserData {
    // message fields
    // @@protoc_insertion_point(field:AvatarForUserData.body_shape)
    pub body_shape: ::std::string::String,
    // @@protoc_insertion_point(field:AvatarForUserData.skin_color)
    pub skin_color: ::std::string::String,
    // @@protoc_insertion_point(field:AvatarForUserData.hair_color)
    pub hair_color: ::std::string::String,
    // @@protoc_insertion_point(field:AvatarForUserData.eye_color)
    pub eye_color: ::std::string::String,
    // @@protoc_insertion_point(field:AvatarForUserData.wearables)
    pub wearables: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:AvatarForUserData.snapshots)
    pub snapshots: ::protobuf::MessageField<Snapshots>,
    // special fields
    // @@protoc_insertion_point(special_field:AvatarForUserData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AvatarForUserData {
    fn default() -> &'a AvatarForUserData {
        <AvatarForUserData as ::protobuf::Message>::default_instance()
    }
}

impl AvatarForUserData {
    pub fn new() -> AvatarForUserData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body_shape",
            |m: &AvatarForUserData| { &m.body_shape },
            |m: &mut AvatarForUserData| { &mut m.body_shape },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "skin_color",
            |m: &AvatarForUserData| { &m.skin_color },
            |m: &mut AvatarForUserData| { &mut m.skin_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hair_color",
            |m: &AvatarForUserData| { &m.hair_color },
            |m: &mut AvatarForUserData| { &mut m.hair_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "eye_color",
            |m: &AvatarForUserData| { &m.eye_color },
            |m: &mut AvatarForUserData| { &mut m.eye_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wearables",
            |m: &AvatarForUserData| { &m.wearables },
            |m: &mut AvatarForUserData| { &mut m.wearables },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Snapshots>(
            "snapshots",
            |m: &AvatarForUserData| { &m.snapshots },
            |m: &mut AvatarForUserData| { &mut m.snapshots },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AvatarForUserData>(
            "AvatarForUserData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AvatarForUserData {
    const NAME: &'static str = "AvatarForUserData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.body_shape = is.read_string()?;
                },
                18 => {
                    self.skin_color = is.read_string()?;
                },
                26 => {
                    self.hair_color = is.read_string()?;
                },
                34 => {
                    self.eye_color = is.read_string()?;
                },
                42 => {
                    self.wearables.push(is.read_string()?);
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.snapshots)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.body_shape.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.body_shape);
        }
        if !self.skin_color.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.skin_color);
        }
        if !self.hair_color.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hair_color);
        }
        if !self.eye_color.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.eye_color);
        }
        for value in &self.wearables {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(v) = self.snapshots.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.body_shape.is_empty() {
            os.write_string(1, &self.body_shape)?;
        }
        if !self.skin_color.is_empty() {
            os.write_string(2, &self.skin_color)?;
        }
        if !self.hair_color.is_empty() {
            os.write_string(3, &self.hair_color)?;
        }
        if !self.eye_color.is_empty() {
            os.write_string(4, &self.eye_color)?;
        }
        for v in &self.wearables {
            os.write_string(5, &v)?;
        };
        if let Some(v) = self.snapshots.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AvatarForUserData {
        AvatarForUserData::new()
    }

    fn clear(&mut self) {
        self.body_shape.clear();
        self.skin_color.clear();
        self.hair_color.clear();
        self.eye_color.clear();
        self.wearables.clear();
        self.snapshots.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AvatarForUserData {
        static instance: AvatarForUserData = AvatarForUserData {
            body_shape: ::std::string::String::new(),
            skin_color: ::std::string::String::new(),
            hair_color: ::std::string::String::new(),
            eye_color: ::std::string::String::new(),
            wearables: ::std::vec::Vec::new(),
            snapshots: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AvatarForUserData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AvatarForUserData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AvatarForUserData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AvatarForUserData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:UserData)
pub struct UserData {
    // message fields
    // @@protoc_insertion_point(field:UserData.display_name)
    pub display_name: ::std::string::String,
    // @@protoc_insertion_point(field:UserData.public_key)
    pub public_key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:UserData.has_connected_web3)
    pub has_connected_web3: bool,
    // @@protoc_insertion_point(field:UserData.user_id)
    pub user_id: ::std::string::String,
    // @@protoc_insertion_point(field:UserData.version)
    pub version: i32,
    // @@protoc_insertion_point(field:UserData.avatar)
    pub avatar: ::protobuf::MessageField<AvatarForUserData>,
    // special fields
    // @@protoc_insertion_point(special_field:UserData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UserData {
    fn default() -> &'a UserData {
        <UserData as ::protobuf::Message>::default_instance()
    }
}

impl UserData {
    pub fn new() -> UserData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &UserData| { &m.display_name },
            |m: &mut UserData| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "public_key",
            |m: &UserData| { &m.public_key },
            |m: &mut UserData| { &mut m.public_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_connected_web3",
            |m: &UserData| { &m.has_connected_web3 },
            |m: &mut UserData| { &mut m.has_connected_web3 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &UserData| { &m.user_id },
            |m: &mut UserData| { &mut m.user_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &UserData| { &m.version },
            |m: &mut UserData| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, AvatarForUserData>(
            "avatar",
            |m: &UserData| { &m.avatar },
            |m: &mut UserData| { &mut m.avatar },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UserData>(
            "UserData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UserData {
    const NAME: &'static str = "UserData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.display_name = is.read_string()?;
                },
                18 => {
                    self.public_key = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.has_connected_web3 = is.read_bool()?;
                },
                34 => {
                    self.user_id = is.read_string()?;
                },
                40 => {
                    self.version = is.read_int32()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.avatar)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.display_name);
        }
        if let Some(v) = self.public_key.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if self.has_connected_web3 != false {
            my_size += 1 + 1;
        }
        if !self.user_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.user_id);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.version);
        }
        if let Some(v) = self.avatar.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.display_name.is_empty() {
            os.write_string(1, &self.display_name)?;
        }
        if let Some(v) = self.public_key.as_ref() {
            os.write_string(2, v)?;
        }
        if self.has_connected_web3 != false {
            os.write_bool(3, self.has_connected_web3)?;
        }
        if !self.user_id.is_empty() {
            os.write_string(4, &self.user_id)?;
        }
        if self.version != 0 {
            os.write_int32(5, self.version)?;
        }
        if let Some(v) = self.avatar.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UserData {
        UserData::new()
    }

    fn clear(&mut self) {
        self.display_name.clear();
        self.public_key = ::std::option::Option::None;
        self.has_connected_web3 = false;
        self.user_id.clear();
        self.version = 0;
        self.avatar.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UserData {
        static instance: UserData = UserData {
            display_name: ::std::string::String::new(),
            public_key: ::std::option::Option::None,
            has_connected_web3: false,
            user_id: ::std::string::String::new(),
            version: 0,
            avatar: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UserData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UserData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UserData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UserData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!kernel/apis/common/UserData.proto\"9\n\tSnapshots\x12\x18\n\x07face25\
    6\x18\x01\x20\x01(\tR\x07face256\x12\x12\n\x04body\x18\x02\x20\x01(\tR\
    \x04body\"\xd5\x01\n\x11AvatarForUserData\x12\x1d\n\nbody_shape\x18\x01\
    \x20\x01(\tR\tbodyShape\x12\x1d\n\nskin_color\x18\x02\x20\x01(\tR\tskinC\
    olor\x12\x1d\n\nhair_color\x18\x03\x20\x01(\tR\thairColor\x12\x1b\n\teye\
    _color\x18\x04\x20\x01(\tR\x08eyeColor\x12\x1c\n\twearables\x18\x05\x20\
    \x03(\tR\twearables\x12(\n\tsnapshots\x18\x06\x20\x01(\x0b2\n.SnapshotsR\
    \tsnapshots\"\xed\x01\n\x08UserData\x12!\n\x0cdisplay_name\x18\x01\x20\
    \x01(\tR\x0bdisplayName\x12\"\n\npublic_key\x18\x02\x20\x01(\tH\0R\tpubl\
    icKey\x88\x01\x01\x12,\n\x12has_connected_web3\x18\x03\x20\x01(\x08R\x10\
    hasConnectedWeb3\x12\x17\n\x07user_id\x18\x04\x20\x01(\tR\x06userId\x12\
    \x18\n\x07version\x18\x05\x20\x01(\x05R\x07version\x12*\n\x06avatar\x18\
    \x06\x20\x01(\x0b2\x12.AvatarForUserDataR\x06avatarB\r\n\x0b_public_keyJ\
    \xf8\x06\n\x06\x12\x04\0\0\x17\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\
    \x02\x04\0\x12\x04\x02\0\x05\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x11\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x04\x17\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\x0b\x12\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x03\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x04\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\x04\n\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x04\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x04\x12\x13\n\n\n\x02\x04\x01\x12\x04\x07\0\x0e\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x07\x08\x19\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x08\
    \x04\x1a\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x08\x0b\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x08\x18\x19\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\t\x04\x1a\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03\t\x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\t\x18\x19\n\x0b\n\
    \x04\x04\x01\x02\x02\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\x01\x02\x02\x05\
    \x12\x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\n\x0b\x15\n\x0c\
    \n\x05\x04\x01\x02\x02\x03\x12\x03\n\x18\x19\n\x0b\n\x04\x04\x01\x02\x03\
    \x12\x03\x0b\x04\x19\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x0b\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0b\x0b\x14\n\x0c\n\x05\x04\x01\
    \x02\x03\x03\x12\x03\x0b\x17\x18\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x0c\
    \x04\"\n\x0c\n\x05\x04\x01\x02\x04\x04\x12\x03\x0c\x04\x0c\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x03\x0c\r\x13\n\x0c\n\x05\x04\x01\x02\x04\x01\
    \x12\x03\x0c\x14\x1d\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x0c\x20!\n\
    \x0b\n\x04\x04\x01\x02\x05\x12\x03\r\x04\x1c\n\x0c\n\x05\x04\x01\x02\x05\
    \x06\x12\x03\r\x04\r\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\r\x0e\x17\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\r\x1a\x1b\n\n\n\x02\x04\x02\x12\
    \x04\x10\0\x17\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\x10\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x11\x04\x1c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x11\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\x0b\x17\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x11\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x12\x04#\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x12\x04\x0c\n\x0c\
    \n\x05\x04\x02\x02\x01\x05\x12\x03\x12\r\x13\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x12\x14\x1e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12!\"\
    \n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x13\x04\x20\n\x0c\n\x05\x04\x02\x02\
    \x02\x05\x12\x03\x13\x04\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x13\
    \t\x1b\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x13\x1e\x1f\n\x0b\n\x04\
    \x04\x02\x02\x03\x12\x03\x14\x04\x17\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\
    \x03\x14\x04\n\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x14\x0b\x12\n\x0c\
    \n\x05\x04\x02\x02\x03\x03\x12\x03\x14\x15\x16\n\x0b\n\x04\x04\x02\x02\
    \x04\x12\x03\x15\x04\x16\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x15\x04\
    \t\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x15\n\x11\n\x0c\n\x05\x04\x02\
    \x02\x04\x03\x12\x03\x15\x14\x15\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x16\
    \x04!\n\x0c\n\x05\x04\x02\x02\x05\x06\x12\x03\x16\x04\x15\n\x0c\n\x05\
    \x04\x02\x02\x05\x01\x12\x03\x16\x16\x1c\n\x0c\n\x05\x04\x02\x02\x05\x03\
    \x12\x03\x16\x1f\x20b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Snapshots::generated_message_descriptor_data());
            messages.push(AvatarForUserData::generated_message_descriptor_data());
            messages.push(UserData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
