// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/SceneStateStorageController.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SerializedSceneState)
pub struct SerializedSceneState {
    // message fields
    // @@protoc_insertion_point(field:SerializedSceneState.entities)
    pub entities: ::std::vec::Vec<SerializedEntity>,
    // special fields
    // @@protoc_insertion_point(special_field:SerializedSceneState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedSceneState {
    fn default() -> &'a SerializedSceneState {
        <SerializedSceneState as ::protobuf::Message>::default_instance()
    }
}

impl SerializedSceneState {
    pub fn new() -> SerializedSceneState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "entities",
            |m: &SerializedSceneState| { &m.entities },
            |m: &mut SerializedSceneState| { &mut m.entities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedSceneState>(
            "SerializedSceneState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedSceneState {
    const NAME: &'static str = "SerializedSceneState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.entities.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.entities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedSceneState {
        SerializedSceneState::new()
    }

    fn clear(&mut self) {
        self.entities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedSceneState {
        static instance: SerializedSceneState = SerializedSceneState {
            entities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SerializedSceneState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedSceneState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedSceneState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedSceneState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SerializedComponent)
pub struct SerializedComponent {
    // message fields
    // @@protoc_insertion_point(field:SerializedComponent.type)
    pub type_: i32,
    // @@protoc_insertion_point(field:SerializedComponent.value_json)
    pub value_json: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SerializedComponent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedComponent {
    fn default() -> &'a SerializedComponent {
        <SerializedComponent as ::protobuf::Message>::default_instance()
    }
}

impl SerializedComponent {
    pub fn new() -> SerializedComponent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SerializedComponent| { &m.type_ },
            |m: &mut SerializedComponent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value_json",
            |m: &SerializedComponent| { &m.value_json },
            |m: &mut SerializedComponent| { &mut m.value_json },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedComponent>(
            "SerializedComponent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedComponent {
    const NAME: &'static str = "SerializedComponent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_int32()?;
                },
                18 => {
                    self.value_json = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.type_);
        }
        if !self.value_json.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != 0 {
            os.write_int32(1, self.type_)?;
        }
        if !self.value_json.is_empty() {
            os.write_string(2, &self.value_json)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedComponent {
        SerializedComponent::new()
    }

    fn clear(&mut self) {
        self.type_ = 0;
        self.value_json.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedComponent {
        static instance: SerializedComponent = SerializedComponent {
            type_: 0,
            value_json: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SerializedComponent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedComponent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedComponent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedComponent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SerializedEntity)
pub struct SerializedEntity {
    // message fields
    // @@protoc_insertion_point(field:SerializedEntity.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:SerializedEntity.components)
    pub components: ::std::vec::Vec<SerializedComponent>,
    // special fields
    // @@protoc_insertion_point(special_field:SerializedEntity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SerializedEntity {
    fn default() -> &'a SerializedEntity {
        <SerializedEntity as ::protobuf::Message>::default_instance()
    }
}

impl SerializedEntity {
    pub fn new() -> SerializedEntity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SerializedEntity| { &m.id },
            |m: &mut SerializedEntity| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "components",
            |m: &SerializedEntity| { &m.components },
            |m: &mut SerializedEntity| { &mut m.components },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SerializedEntity>(
            "SerializedEntity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SerializedEntity {
    const NAME: &'static str = "SerializedEntity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.components.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        for value in &self.components {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        for v in &self.components {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SerializedEntity {
        SerializedEntity::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.components.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SerializedEntity {
        static instance: SerializedEntity = SerializedEntity {
            id: ::std::string::String::new(),
            components: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SerializedEntity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SerializedEntity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SerializedEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SerializedEntity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetProjectManifestRequest)
pub struct GetProjectManifestRequest {
    // message fields
    // @@protoc_insertion_point(field:GetProjectManifestRequest.project_id)
    pub project_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetProjectManifestRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProjectManifestRequest {
    fn default() -> &'a GetProjectManifestRequest {
        <GetProjectManifestRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetProjectManifestRequest {
    pub fn new() -> GetProjectManifestRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_id",
            |m: &GetProjectManifestRequest| { &m.project_id },
            |m: &mut GetProjectManifestRequest| { &mut m.project_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProjectManifestRequest>(
            "GetProjectManifestRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProjectManifestRequest {
    const NAME: &'static str = "GetProjectManifestRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.project_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.project_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.project_id.is_empty() {
            os.write_string(1, &self.project_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProjectManifestRequest {
        GetProjectManifestRequest::new()
    }

    fn clear(&mut self) {
        self.project_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProjectManifestRequest {
        static instance: GetProjectManifestRequest = GetProjectManifestRequest {
            project_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProjectManifestRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProjectManifestRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProjectManifestRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProjectManifestRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetProjectManifestResponse)
pub struct GetProjectManifestResponse {
    // message fields
    // @@protoc_insertion_point(field:GetProjectManifestResponse.state)
    pub state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:GetProjectManifestResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProjectManifestResponse {
    fn default() -> &'a GetProjectManifestResponse {
        <GetProjectManifestResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetProjectManifestResponse {
    pub fn new() -> GetProjectManifestResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "state",
            |m: &GetProjectManifestResponse| { &m.state },
            |m: &mut GetProjectManifestResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProjectManifestResponse>(
            "GetProjectManifestResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProjectManifestResponse {
    const NAME: &'static str = "GetProjectManifestResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProjectManifestResponse {
        GetProjectManifestResponse::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProjectManifestResponse {
        static instance: GetProjectManifestResponse = GetProjectManifestResponse {
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProjectManifestResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProjectManifestResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProjectManifestResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProjectManifestResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetProjectManifestByCoordinatesRequest)
pub struct GetProjectManifestByCoordinatesRequest {
    // message fields
    // @@protoc_insertion_point(field:GetProjectManifestByCoordinatesRequest.land)
    pub land: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetProjectManifestByCoordinatesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProjectManifestByCoordinatesRequest {
    fn default() -> &'a GetProjectManifestByCoordinatesRequest {
        <GetProjectManifestByCoordinatesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetProjectManifestByCoordinatesRequest {
    pub fn new() -> GetProjectManifestByCoordinatesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "land",
            |m: &GetProjectManifestByCoordinatesRequest| { &m.land },
            |m: &mut GetProjectManifestByCoordinatesRequest| { &mut m.land },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProjectManifestByCoordinatesRequest>(
            "GetProjectManifestByCoordinatesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProjectManifestByCoordinatesRequest {
    const NAME: &'static str = "GetProjectManifestByCoordinatesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.land = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.land.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.land);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.land.is_empty() {
            os.write_string(1, &self.land)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProjectManifestByCoordinatesRequest {
        GetProjectManifestByCoordinatesRequest::new()
    }

    fn clear(&mut self) {
        self.land.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProjectManifestByCoordinatesRequest {
        static instance: GetProjectManifestByCoordinatesRequest = GetProjectManifestByCoordinatesRequest {
            land: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProjectManifestByCoordinatesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProjectManifestByCoordinatesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProjectManifestByCoordinatesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProjectManifestByCoordinatesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetProjectManifestByCoordinatesResponse)
pub struct GetProjectManifestByCoordinatesResponse {
    // message fields
    // @@protoc_insertion_point(field:GetProjectManifestByCoordinatesResponse.state)
    pub state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:GetProjectManifestByCoordinatesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetProjectManifestByCoordinatesResponse {
    fn default() -> &'a GetProjectManifestByCoordinatesResponse {
        <GetProjectManifestByCoordinatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetProjectManifestByCoordinatesResponse {
    pub fn new() -> GetProjectManifestByCoordinatesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "state",
            |m: &GetProjectManifestByCoordinatesResponse| { &m.state },
            |m: &mut GetProjectManifestByCoordinatesResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetProjectManifestByCoordinatesResponse>(
            "GetProjectManifestByCoordinatesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetProjectManifestByCoordinatesResponse {
    const NAME: &'static str = "GetProjectManifestByCoordinatesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetProjectManifestByCoordinatesResponse {
        GetProjectManifestByCoordinatesResponse::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetProjectManifestByCoordinatesResponse {
        static instance: GetProjectManifestByCoordinatesResponse = GetProjectManifestByCoordinatesResponse {
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetProjectManifestByCoordinatesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetProjectManifestByCoordinatesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetProjectManifestByCoordinatesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetProjectManifestByCoordinatesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CreateProjectWithCoordsRequest)
pub struct CreateProjectWithCoordsRequest {
    // message fields
    // @@protoc_insertion_point(field:CreateProjectWithCoordsRequest.coordinates)
    pub coordinates: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:CreateProjectWithCoordsRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateProjectWithCoordsRequest {
    fn default() -> &'a CreateProjectWithCoordsRequest {
        <CreateProjectWithCoordsRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectWithCoordsRequest {
    pub fn new() -> CreateProjectWithCoordsRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "coordinates",
            |m: &CreateProjectWithCoordsRequest| { &m.coordinates },
            |m: &mut CreateProjectWithCoordsRequest| { &mut m.coordinates },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateProjectWithCoordsRequest>(
            "CreateProjectWithCoordsRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateProjectWithCoordsRequest {
    const NAME: &'static str = "CreateProjectWithCoordsRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.coordinates = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.coordinates.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.coordinates);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.coordinates.is_empty() {
            os.write_string(1, &self.coordinates)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateProjectWithCoordsRequest {
        CreateProjectWithCoordsRequest::new()
    }

    fn clear(&mut self) {
        self.coordinates.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateProjectWithCoordsRequest {
        static instance: CreateProjectWithCoordsRequest = CreateProjectWithCoordsRequest {
            coordinates: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateProjectWithCoordsRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateProjectWithCoordsRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateProjectWithCoordsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectWithCoordsRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CreateProjectWithCoordsResponse)
pub struct CreateProjectWithCoordsResponse {
    // message fields
    // @@protoc_insertion_point(field:CreateProjectWithCoordsResponse.ok)
    pub ok: bool,
    // special fields
    // @@protoc_insertion_point(special_field:CreateProjectWithCoordsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateProjectWithCoordsResponse {
    fn default() -> &'a CreateProjectWithCoordsResponse {
        <CreateProjectWithCoordsResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectWithCoordsResponse {
    pub fn new() -> CreateProjectWithCoordsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &CreateProjectWithCoordsResponse| { &m.ok },
            |m: &mut CreateProjectWithCoordsResponse| { &mut m.ok },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateProjectWithCoordsResponse>(
            "CreateProjectWithCoordsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateProjectWithCoordsResponse {
    const NAME: &'static str = "CreateProjectWithCoordsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateProjectWithCoordsResponse {
        CreateProjectWithCoordsResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateProjectWithCoordsResponse {
        static instance: CreateProjectWithCoordsResponse = CreateProjectWithCoordsResponse {
            ok: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateProjectWithCoordsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateProjectWithCoordsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateProjectWithCoordsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectWithCoordsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SaveSceneStateRequest)
pub struct SaveSceneStateRequest {
    // message fields
    // @@protoc_insertion_point(field:SaveSceneStateRequest.serialized_scene_state)
    pub serialized_scene_state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:SaveSceneStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveSceneStateRequest {
    fn default() -> &'a SaveSceneStateRequest {
        <SaveSceneStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveSceneStateRequest {
    pub fn new() -> SaveSceneStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "serialized_scene_state",
            |m: &SaveSceneStateRequest| { &m.serialized_scene_state },
            |m: &mut SaveSceneStateRequest| { &mut m.serialized_scene_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveSceneStateRequest>(
            "SaveSceneStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveSceneStateRequest {
    const NAME: &'static str = "SaveSceneStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.serialized_scene_state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.serialized_scene_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.serialized_scene_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveSceneStateRequest {
        SaveSceneStateRequest::new()
    }

    fn clear(&mut self) {
        self.serialized_scene_state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveSceneStateRequest {
        static instance: SaveSceneStateRequest = SaveSceneStateRequest {
            serialized_scene_state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveSceneStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveSceneStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveSceneStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveSceneStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SaveSceneStateResponse)
pub struct SaveSceneStateResponse {
    // message fields
    // @@protoc_insertion_point(field:SaveSceneStateResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:SaveSceneStateResponse.error)
    pub error: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:SaveSceneStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveSceneStateResponse {
    fn default() -> &'a SaveSceneStateResponse {
        <SaveSceneStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveSceneStateResponse {
    pub fn new() -> SaveSceneStateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &SaveSceneStateResponse| { &m.ok },
            |m: &mut SaveSceneStateResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error",
            |m: &SaveSceneStateResponse| { &m.error },
            |m: &mut SaveSceneStateResponse| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveSceneStateResponse>(
            "SaveSceneStateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveSceneStateResponse {
    const NAME: &'static str = "SaveSceneStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                18 => {
                    self.error = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.error.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if let Some(v) = self.error.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveSceneStateResponse {
        SaveSceneStateResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.error = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveSceneStateResponse {
        static instance: SaveSceneStateResponse = SaveSceneStateResponse {
            ok: false,
            error: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveSceneStateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveSceneStateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveSceneStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveSceneStateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SaveProjectInfoRequest)
pub struct SaveProjectInfoRequest {
    // message fields
    // @@protoc_insertion_point(field:SaveProjectInfoRequest.scene_state)
    pub scene_state: ::protobuf::MessageField<SerializedSceneState>,
    // @@protoc_insertion_point(field:SaveProjectInfoRequest.project_name)
    pub project_name: ::std::string::String,
    // @@protoc_insertion_point(field:SaveProjectInfoRequest.project_description)
    pub project_description: ::std::string::String,
    // @@protoc_insertion_point(field:SaveProjectInfoRequest.project_screenshot)
    pub project_screenshot: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SaveProjectInfoRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveProjectInfoRequest {
    fn default() -> &'a SaveProjectInfoRequest {
        <SaveProjectInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl SaveProjectInfoRequest {
    pub fn new() -> SaveProjectInfoRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "scene_state",
            |m: &SaveProjectInfoRequest| { &m.scene_state },
            |m: &mut SaveProjectInfoRequest| { &mut m.scene_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_name",
            |m: &SaveProjectInfoRequest| { &m.project_name },
            |m: &mut SaveProjectInfoRequest| { &mut m.project_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_description",
            |m: &SaveProjectInfoRequest| { &m.project_description },
            |m: &mut SaveProjectInfoRequest| { &mut m.project_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "project_screenshot",
            |m: &SaveProjectInfoRequest| { &m.project_screenshot },
            |m: &mut SaveProjectInfoRequest| { &mut m.project_screenshot },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveProjectInfoRequest>(
            "SaveProjectInfoRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveProjectInfoRequest {
    const NAME: &'static str = "SaveProjectInfoRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scene_state)?;
                },
                18 => {
                    self.project_name = is.read_string()?;
                },
                26 => {
                    self.project_description = is.read_string()?;
                },
                34 => {
                    self.project_screenshot = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.scene_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.project_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project_name);
        }
        if !self.project_description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.project_description);
        }
        if !self.project_screenshot.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.project_screenshot);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.scene_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.project_name.is_empty() {
            os.write_string(2, &self.project_name)?;
        }
        if !self.project_description.is_empty() {
            os.write_string(3, &self.project_description)?;
        }
        if !self.project_screenshot.is_empty() {
            os.write_string(4, &self.project_screenshot)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveProjectInfoRequest {
        SaveProjectInfoRequest::new()
    }

    fn clear(&mut self) {
        self.scene_state.clear();
        self.project_name.clear();
        self.project_description.clear();
        self.project_screenshot.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveProjectInfoRequest {
        static instance: SaveProjectInfoRequest = SaveProjectInfoRequest {
            scene_state: ::protobuf::MessageField::none(),
            project_name: ::std::string::String::new(),
            project_description: ::std::string::String::new(),
            project_screenshot: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveProjectInfoRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveProjectInfoRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveProjectInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveProjectInfoRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SaveProjectInfoResponse)
pub struct SaveProjectInfoResponse {
    // message fields
    // @@protoc_insertion_point(field:SaveProjectInfoResponse.ok)
    pub ok: bool,
    // special fields
    // @@protoc_insertion_point(special_field:SaveProjectInfoResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SaveProjectInfoResponse {
    fn default() -> &'a SaveProjectInfoResponse {
        <SaveProjectInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl SaveProjectInfoResponse {
    pub fn new() -> SaveProjectInfoResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &SaveProjectInfoResponse| { &m.ok },
            |m: &mut SaveProjectInfoResponse| { &mut m.ok },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SaveProjectInfoResponse>(
            "SaveProjectInfoResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SaveProjectInfoResponse {
    const NAME: &'static str = "SaveProjectInfoResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SaveProjectInfoResponse {
        SaveProjectInfoResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SaveProjectInfoResponse {
        static instance: SaveProjectInfoResponse = SaveProjectInfoResponse {
            ok: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SaveProjectInfoResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SaveProjectInfoResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SaveProjectInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SaveProjectInfoResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PublishSceneStateRequest)
pub struct PublishSceneStateRequest {
    // message fields
    // @@protoc_insertion_point(field:PublishSceneStateRequest.scene_id)
    pub scene_id: ::std::string::String,
    // @@protoc_insertion_point(field:PublishSceneStateRequest.scene_name)
    pub scene_name: ::std::string::String,
    // @@protoc_insertion_point(field:PublishSceneStateRequest.scene_description)
    pub scene_description: ::std::string::String,
    // @@protoc_insertion_point(field:PublishSceneStateRequest.scene_screenshot)
    pub scene_screenshot: ::std::string::String,
    // @@protoc_insertion_point(field:PublishSceneStateRequest.scene_state)
    pub scene_state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:PublishSceneStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublishSceneStateRequest {
    fn default() -> &'a PublishSceneStateRequest {
        <PublishSceneStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl PublishSceneStateRequest {
    pub fn new() -> PublishSceneStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &PublishSceneStateRequest| { &m.scene_id },
            |m: &mut PublishSceneStateRequest| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_name",
            |m: &PublishSceneStateRequest| { &m.scene_name },
            |m: &mut PublishSceneStateRequest| { &mut m.scene_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_description",
            |m: &PublishSceneStateRequest| { &m.scene_description },
            |m: &mut PublishSceneStateRequest| { &mut m.scene_description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_screenshot",
            |m: &PublishSceneStateRequest| { &m.scene_screenshot },
            |m: &mut PublishSceneStateRequest| { &mut m.scene_screenshot },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "scene_state",
            |m: &PublishSceneStateRequest| { &m.scene_state },
            |m: &mut PublishSceneStateRequest| { &mut m.scene_state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublishSceneStateRequest>(
            "PublishSceneStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublishSceneStateRequest {
    const NAME: &'static str = "PublishSceneStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.scene_id = is.read_string()?;
                },
                18 => {
                    self.scene_name = is.read_string()?;
                },
                26 => {
                    self.scene_description = is.read_string()?;
                },
                34 => {
                    self.scene_screenshot = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.scene_state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.scene_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scene_id);
        }
        if !self.scene_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.scene_name);
        }
        if !self.scene_description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.scene_description);
        }
        if !self.scene_screenshot.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.scene_screenshot);
        }
        if let Some(v) = self.scene_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.scene_id.is_empty() {
            os.write_string(1, &self.scene_id)?;
        }
        if !self.scene_name.is_empty() {
            os.write_string(2, &self.scene_name)?;
        }
        if !self.scene_description.is_empty() {
            os.write_string(3, &self.scene_description)?;
        }
        if !self.scene_screenshot.is_empty() {
            os.write_string(4, &self.scene_screenshot)?;
        }
        if let Some(v) = self.scene_state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublishSceneStateRequest {
        PublishSceneStateRequest::new()
    }

    fn clear(&mut self) {
        self.scene_id.clear();
        self.scene_name.clear();
        self.scene_description.clear();
        self.scene_screenshot.clear();
        self.scene_state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublishSceneStateRequest {
        static instance: PublishSceneStateRequest = PublishSceneStateRequest {
            scene_id: ::std::string::String::new(),
            scene_name: ::std::string::String::new(),
            scene_description: ::std::string::String::new(),
            scene_screenshot: ::std::string::String::new(),
            scene_state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublishSceneStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublishSceneStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublishSceneStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishSceneStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PublishSceneStateResponse)
pub struct PublishSceneStateResponse {
    // message fields
    // @@protoc_insertion_point(field:PublishSceneStateResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:PublishSceneStateResponse.error)
    pub error: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:PublishSceneStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PublishSceneStateResponse {
    fn default() -> &'a PublishSceneStateResponse {
        <PublishSceneStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl PublishSceneStateResponse {
    pub fn new() -> PublishSceneStateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &PublishSceneStateResponse| { &m.ok },
            |m: &mut PublishSceneStateResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error",
            |m: &PublishSceneStateResponse| { &m.error },
            |m: &mut PublishSceneStateResponse| { &mut m.error },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PublishSceneStateResponse>(
            "PublishSceneStateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PublishSceneStateResponse {
    const NAME: &'static str = "PublishSceneStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                18 => {
                    self.error = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if let Some(v) = self.error.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if let Some(v) = self.error.as_ref() {
            os.write_string(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PublishSceneStateResponse {
        PublishSceneStateResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.error = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PublishSceneStateResponse {
        static instance: PublishSceneStateResponse = PublishSceneStateResponse {
            ok: false,
            error: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PublishSceneStateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PublishSceneStateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PublishSceneStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishSceneStateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetStoredStateRequest)
pub struct GetStoredStateRequest {
    // message fields
    // @@protoc_insertion_point(field:GetStoredStateRequest.scene_id)
    pub scene_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetStoredStateRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetStoredStateRequest {
    fn default() -> &'a GetStoredStateRequest {
        <GetStoredStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetStoredStateRequest {
    pub fn new() -> GetStoredStateRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &GetStoredStateRequest| { &m.scene_id },
            |m: &mut GetStoredStateRequest| { &mut m.scene_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetStoredStateRequest>(
            "GetStoredStateRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetStoredStateRequest {
    const NAME: &'static str = "GetStoredStateRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.scene_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.scene_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scene_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.scene_id.is_empty() {
            os.write_string(1, &self.scene_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetStoredStateRequest {
        GetStoredStateRequest::new()
    }

    fn clear(&mut self) {
        self.scene_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetStoredStateRequest {
        static instance: GetStoredStateRequest = GetStoredStateRequest {
            scene_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetStoredStateRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetStoredStateRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetStoredStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStoredStateRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetStoredStateResponse)
pub struct GetStoredStateResponse {
    // message fields
    // @@protoc_insertion_point(field:GetStoredStateResponse.state)
    pub state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:GetStoredStateResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetStoredStateResponse {
    fn default() -> &'a GetStoredStateResponse {
        <GetStoredStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetStoredStateResponse {
    pub fn new() -> GetStoredStateResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "state",
            |m: &GetStoredStateResponse| { &m.state },
            |m: &mut GetStoredStateResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetStoredStateResponse>(
            "GetStoredStateResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetStoredStateResponse {
    const NAME: &'static str = "GetStoredStateResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetStoredStateResponse {
        GetStoredStateResponse::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetStoredStateResponse {
        static instance: GetStoredStateResponse = GetStoredStateResponse {
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetStoredStateResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetStoredStateResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetStoredStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetStoredStateResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CreateProjectFromStateDefinitionRequest)
pub struct CreateProjectFromStateDefinitionRequest {
    // special fields
    // @@protoc_insertion_point(special_field:CreateProjectFromStateDefinitionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateProjectFromStateDefinitionRequest {
    fn default() -> &'a CreateProjectFromStateDefinitionRequest {
        <CreateProjectFromStateDefinitionRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectFromStateDefinitionRequest {
    pub fn new() -> CreateProjectFromStateDefinitionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateProjectFromStateDefinitionRequest>(
            "CreateProjectFromStateDefinitionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateProjectFromStateDefinitionRequest {
    const NAME: &'static str = "CreateProjectFromStateDefinitionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateProjectFromStateDefinitionRequest {
        CreateProjectFromStateDefinitionRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateProjectFromStateDefinitionRequest {
        static instance: CreateProjectFromStateDefinitionRequest = CreateProjectFromStateDefinitionRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateProjectFromStateDefinitionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateProjectFromStateDefinitionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateProjectFromStateDefinitionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectFromStateDefinitionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CreateProjectFromStateDefinitionResponse)
pub struct CreateProjectFromStateDefinitionResponse {
    // message fields
    // @@protoc_insertion_point(field:CreateProjectFromStateDefinitionResponse.state)
    pub state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:CreateProjectFromStateDefinitionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CreateProjectFromStateDefinitionResponse {
    fn default() -> &'a CreateProjectFromStateDefinitionResponse {
        <CreateProjectFromStateDefinitionResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateProjectFromStateDefinitionResponse {
    pub fn new() -> CreateProjectFromStateDefinitionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "state",
            |m: &CreateProjectFromStateDefinitionResponse| { &m.state },
            |m: &mut CreateProjectFromStateDefinitionResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CreateProjectFromStateDefinitionResponse>(
            "CreateProjectFromStateDefinitionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CreateProjectFromStateDefinitionResponse {
    const NAME: &'static str = "CreateProjectFromStateDefinitionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CreateProjectFromStateDefinitionResponse {
        CreateProjectFromStateDefinitionResponse::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CreateProjectFromStateDefinitionResponse {
        static instance: CreateProjectFromStateDefinitionResponse = CreateProjectFromStateDefinitionResponse {
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CreateProjectFromStateDefinitionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CreateProjectFromStateDefinitionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CreateProjectFromStateDefinitionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProjectFromStateDefinitionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SendAssetsToRendererRequest)
pub struct SendAssetsToRendererRequest {
    // message fields
    // @@protoc_insertion_point(field:SendAssetsToRendererRequest.state)
    pub state: ::protobuf::MessageField<SerializedSceneState>,
    // special fields
    // @@protoc_insertion_point(special_field:SendAssetsToRendererRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendAssetsToRendererRequest {
    fn default() -> &'a SendAssetsToRendererRequest {
        <SendAssetsToRendererRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendAssetsToRendererRequest {
    pub fn new() -> SendAssetsToRendererRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, SerializedSceneState>(
            "state",
            |m: &SendAssetsToRendererRequest| { &m.state },
            |m: &mut SendAssetsToRendererRequest| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendAssetsToRendererRequest>(
            "SendAssetsToRendererRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendAssetsToRendererRequest {
    const NAME: &'static str = "SendAssetsToRendererRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.state)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.state.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendAssetsToRendererRequest {
        SendAssetsToRendererRequest::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendAssetsToRendererRequest {
        static instance: SendAssetsToRendererRequest = SendAssetsToRendererRequest {
            state: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendAssetsToRendererRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendAssetsToRendererRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendAssetsToRendererRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendAssetsToRendererRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SendAssetsToRendererResponse)
pub struct SendAssetsToRendererResponse {
    // message fields
    // @@protoc_insertion_point(field:SendAssetsToRendererResponse.state)
    pub state: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SendAssetsToRendererResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendAssetsToRendererResponse {
    fn default() -> &'a SendAssetsToRendererResponse {
        <SendAssetsToRendererResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendAssetsToRendererResponse {
    pub fn new() -> SendAssetsToRendererResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &SendAssetsToRendererResponse| { &m.state },
            |m: &mut SendAssetsToRendererResponse| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendAssetsToRendererResponse>(
            "SendAssetsToRendererResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendAssetsToRendererResponse {
    const NAME: &'static str = "SendAssetsToRendererResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.state = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.state.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.state);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.state.is_empty() {
            os.write_string(1, &self.state)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendAssetsToRendererResponse {
        SendAssetsToRendererResponse::new()
    }

    fn clear(&mut self) {
        self.state.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendAssetsToRendererResponse {
        static instance: SendAssetsToRendererResponse = SendAssetsToRendererResponse {
            state: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendAssetsToRendererResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendAssetsToRendererResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendAssetsToRendererResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendAssetsToRendererResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-kernel/apis/SceneStateStorageController.proto\"E\n\x14SerializedScene\
    State\x12-\n\x08entities\x18\x01\x20\x03(\x0b2\x11.SerializedEntityR\x08\
    entities\"H\n\x13SerializedComponent\x12\x12\n\x04type\x18\x01\x20\x01(\
    \x05R\x04type\x12\x1d\n\nvalue_json\x18\x02\x20\x01(\tR\tvalueJson\"X\n\
    \x10SerializedEntity\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x124\n\nc\
    omponents\x18\x02\x20\x03(\x0b2\x14.SerializedComponentR\ncomponents\":\
    \n\x19GetProjectManifestRequest\x12\x1d\n\nproject_id\x18\x01\x20\x01(\t\
    R\tprojectId\"X\n\x1aGetProjectManifestResponse\x120\n\x05state\x18\x01\
    \x20\x01(\x0b2\x15.SerializedSceneStateH\0R\x05state\x88\x01\x01B\x08\n\
    \x06_state\"<\n&GetProjectManifestByCoordinatesRequest\x12\x12\n\x04land\
    \x18\x01\x20\x01(\tR\x04land\"e\n'GetProjectManifestByCoordinatesRespons\
    e\x120\n\x05state\x18\x01\x20\x01(\x0b2\x15.SerializedSceneStateH\0R\x05\
    state\x88\x01\x01B\x08\n\x06_state\"B\n\x1eCreateProjectWithCoordsReques\
    t\x12\x20\n\x0bcoordinates\x18\x01\x20\x01(\tR\x0bcoordinates\"1\n\x1fCr\
    eateProjectWithCoordsResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02o\
    k\"d\n\x15SaveSceneStateRequest\x12K\n\x16serialized_scene_state\x18\x01\
    \x20\x01(\x0b2\x15.SerializedSceneStateR\x14serializedSceneState\"M\n\
    \x16SaveSceneStateResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02ok\
    \x12\x19\n\x05error\x18\x02\x20\x01(\tH\0R\x05error\x88\x01\x01B\x08\n\
    \x06_error\"\xd3\x01\n\x16SaveProjectInfoRequest\x126\n\x0bscene_state\
    \x18\x01\x20\x01(\x0b2\x15.SerializedSceneStateR\nsceneState\x12!\n\x0cp\
    roject_name\x18\x02\x20\x01(\tR\x0bprojectName\x12/\n\x13project_descrip\
    tion\x18\x03\x20\x01(\tR\x12projectDescription\x12-\n\x12project_screens\
    hot\x18\x04\x20\x01(\tR\x11projectScreenshot\")\n\x17SaveProjectInfoResp\
    onse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02ok\"\xe4\x01\n\x18PublishS\
    ceneStateRequest\x12\x19\n\x08scene_id\x18\x01\x20\x01(\tR\x07sceneId\
    \x12\x1d\n\nscene_name\x18\x02\x20\x01(\tR\tsceneName\x12+\n\x11scene_de\
    scription\x18\x03\x20\x01(\tR\x10sceneDescription\x12)\n\x10scene_screen\
    shot\x18\x04\x20\x01(\tR\x0fsceneScreenshot\x126\n\x0bscene_state\x18\
    \x05\x20\x01(\x0b2\x15.SerializedSceneStateR\nsceneState\"P\n\x19Publish\
    SceneStateResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\x02ok\x12\x19\n\
    \x05error\x18\x02\x20\x01(\tH\0R\x05error\x88\x01\x01B\x08\n\x06_error\"\
    2\n\x15GetStoredStateRequest\x12\x19\n\x08scene_id\x18\x01\x20\x01(\tR\
    \x07sceneId\"T\n\x16GetStoredStateResponse\x120\n\x05state\x18\x01\x20\
    \x01(\x0b2\x15.SerializedSceneStateH\0R\x05state\x88\x01\x01B\x08\n\x06_\
    state\")\n'CreateProjectFromStateDefinitionRequest\"f\n(CreateProjectFro\
    mStateDefinitionResponse\x120\n\x05state\x18\x01\x20\x01(\x0b2\x15.Seria\
    lizedSceneStateH\0R\x05state\x88\x01\x01B\x08\n\x06_state\"J\n\x1bSendAs\
    setsToRendererRequest\x12+\n\x05state\x18\x01\x20\x01(\x0b2\x15.Serializ\
    edSceneStateR\x05state\"4\n\x1cSendAssetsToRendererResponse\x12\x14\n\
    \x05state\x18\x01\x20\x01(\tR\x05state2\xbf\x06\n\"SceneStateStorageCont\
    rollerService\x12O\n\x12GetProjectManifest\x12\x1a.GetProjectManifestReq\
    uest\x1a\x1b.GetProjectManifestResponse\"\0\x12v\n\x1fGetProjectManifest\
    ByCoordinates\x12'.GetProjectManifestByCoordinatesRequest\x1a(.GetProjec\
    tManifestByCoordinatesResponse\"\0\x12^\n\x17CreateProjectWithCoords\x12\
    \x1f.CreateProjectWithCoordsRequest\x1a\x20.CreateProjectWithCoordsRespo\
    nse\"\0\x12C\n\x0eSaveSceneState\x12\x16.SaveSceneStateRequest\x1a\x17.S\
    aveSceneStateResponse\"\0\x12F\n\x0fSaveProjectInfo\x12\x17.SaveProjectI\
    nfoRequest\x1a\x18.SaveProjectInfoResponse\"\0\x12L\n\x11PublishSceneSta\
    te\x12\x19.PublishSceneStateRequest\x1a\x1a.PublishSceneStateResponse\"\
    \0\x12C\n\x0eGetStoredState\x12\x16.GetStoredStateRequest\x1a\x17.GetSto\
    redStateResponse\"\0\x12y\n\x20CreateProjectFromStateDefinition\x12(.Cre\
    ateProjectFromStateDefinitionRequest\x1a).CreateProjectFromStateDefiniti\
    onResponse\"\0\x12U\n\x14SendAssetsToRenderer\x12\x1c.SendAssetsToRender\
    erRequest\x1a\x1d.SendAssetsToRendererResponse\"\0J\xe5\x16\n\x06\x12\
    \x04\0\0q\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x1d\n\x02\x04\0\x12\x04\
    \x04\0\x06\x012\x11\x20Auxiliary\x20types\n\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08\x1c\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x02)\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x05\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\x0b\
    \x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x1c$\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03\x05'(\n\n\n\x02\x04\x01\x12\x04\x08\0\x0b\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x08\x08\x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\x04\
    \x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\t\n\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x11\
    \x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\n\x04\x1a\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\n\
    \x0b\x15\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n\x18\x19\n\n\n\x02\x04\
    \x02\x12\x04\r\0\x10\x01\n\n\n\x03\x04\x02\x01\x12\x03\r\x08\x18\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x0e\x04\x12\n\x0c\n\x05\x04\x02\x02\0\x05\x12\
    \x03\x0e\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0e\x0b\r\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x03\x0e\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03\x0f\x040\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\x0f\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x0f\r\x20\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x0f!+\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x0f./\n/\
    \n\x02\x04\x03\x12\x04\x14\0\x16\x012#\x20RPC\x20Request\x20and\x20Respo\
    nse\x20Messages\n\n\n\n\x03\x04\x03\x01\x12\x03\x14\x08!\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x15\x04\x1a\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x15\
    \x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x15\x0b\x15\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x15\x18\x19\n\n\n\x02\x04\x04\x12\x04\x18\0\x1a\
    \x01\n\n\n\x03\x04\x04\x01\x12\x03\x18\x08\"\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03\x19\x04,\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03\x19\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x19\r!\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03\x19\"'\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x19*+\n\n\n\
    \x02\x04\x05\x12\x04\x1c\0\x1e\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1c\x08\
    .\n\x0b\n\x04\x04\x05\x02\0\x12\x03\x1d\x04\x14\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x1d\x0b\
    \x0f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x1d\x12\x13\n\n\n\x02\x04\x06\
    \x12\x04\x20\0#\x01\n\n\n\x03\x04\x06\x01\x12\x03\x20\x08/\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x03!\x04,\n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03!\x04\
    \x0c\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03!\r!\n\x0c\n\x05\x04\x06\x02\0\
    \x01\x12\x03!\"'\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03!*+\n\n\n\x02\x04\
    \x07\x12\x04%\0'\x01\n\n\n\x03\x04\x07\x01\x12\x03%\x08&\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x03&\x04\x1b\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03&\x04\n\
    \n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03&\x0b\x16\n\x0c\n\x05\x04\x07\x02\
    \0\x03\x12\x03&\x19\x1a\n\n\n\x02\x04\x08\x12\x04)\0+\x01\n\n\n\x03\x04\
    \x08\x01\x12\x03)\x08'\n\x0b\n\x04\x04\x08\x02\0\x12\x03*\x04\x10\n\x0c\
    \n\x05\x04\x08\x02\0\x05\x12\x03*\x04\x08\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03*\t\x0b\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03*\x0e\x0f\n\n\n\x02\
    \x04\t\x12\x04-\0/\x01\n\n\n\x03\x04\t\x01\x12\x03-\x08\x1d\n\x0b\n\x04\
    \x04\t\x02\0\x12\x03.\x044\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03.\x04\x18\
    \n\x0c\n\x05\x04\t\x02\0\x01\x12\x03.\x19/\n\x0c\n\x05\x04\t\x02\0\x03\
    \x12\x03.23\n\n\n\x02\x04\n\x12\x041\04\x01\n\n\n\x03\x04\n\x01\x12\x031\
    \x08\x1e\n\x0b\n\x04\x04\n\x02\0\x12\x032\x04\x10\n\x0c\n\x05\x04\n\x02\
    \0\x05\x12\x032\x04\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x032\t\x0b\n\x0c\
    \n\x05\x04\n\x02\0\x03\x12\x032\x0e\x0f\n\x0b\n\x04\x04\n\x02\x01\x12\
    \x033\x04\x1e\n\x0c\n\x05\x04\n\x02\x01\x04\x12\x033\x04\x0c\n\x0c\n\x05\
    \x04\n\x02\x01\x05\x12\x033\r\x13\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x033\
    \x14\x19\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x033\x1c\x1d\n\n\n\x02\x04\
    \x0b\x12\x046\0;\x01\n\n\n\x03\x04\x0b\x01\x12\x036\x08\x1e\n\x0b\n\x04\
    \x04\x0b\x02\0\x12\x037\x04)\n\x0c\n\x05\x04\x0b\x02\0\x06\x12\x037\x04\
    \x18\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x037\x19$\n\x0c\n\x05\x04\x0b\x02\
    \0\x03\x12\x037'(\n\x0b\n\x04\x04\x0b\x02\x01\x12\x038\x04\x1c\n\x0c\n\
    \x05\x04\x0b\x02\x01\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x0b\x02\x01\x01\
    \x12\x038\x0b\x17\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x038\x1a\x1b\n\x0b\
    \n\x04\x04\x0b\x02\x02\x12\x039\x04#\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\
    \x039\x04\n\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\x039\x0b\x1e\n\x0c\n\x05\
    \x04\x0b\x02\x02\x03\x12\x039!\"\n\x0b\n\x04\x04\x0b\x02\x03\x12\x03:\
    \x04\"\n\x0c\n\x05\x04\x0b\x02\x03\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\
    \x0b\x02\x03\x01\x12\x03:\x0b\x1d\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\
    \x03:\x20!\n\n\n\x02\x04\x0c\x12\x04=\0?\x01\n\n\n\x03\x04\x0c\x01\x12\
    \x03=\x08\x1f\n\x0b\n\x04\x04\x0c\x02\0\x12\x03>\x04\x10\n\x0c\n\x05\x04\
    \x0c\x02\0\x05\x12\x03>\x04\x08\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03>\t\
    \x0b\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03>\x0e\x0f\n\n\n\x02\x04\r\x12\
    \x04A\0G\x01\n\n\n\x03\x04\r\x01\x12\x03A\x08\x20\n\x0b\n\x04\x04\r\x02\
    \0\x12\x03B\x04\x18\n\x0c\n\x05\x04\r\x02\0\x05\x12\x03B\x04\n\n\x0c\n\
    \x05\x04\r\x02\0\x01\x12\x03B\x0b\x13\n\x0c\n\x05\x04\r\x02\0\x03\x12\
    \x03B\x16\x17\n\x0b\n\x04\x04\r\x02\x01\x12\x03C\x04\x1a\n\x0c\n\x05\x04\
    \r\x02\x01\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\r\x02\x01\x01\x12\x03C\x0b\
    \x15\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03C\x18\x19\n\x0b\n\x04\x04\r\
    \x02\x02\x12\x03D\x04!\n\x0c\n\x05\x04\r\x02\x02\x05\x12\x03D\x04\n\n\
    \x0c\n\x05\x04\r\x02\x02\x01\x12\x03D\x0b\x1c\n\x0c\n\x05\x04\r\x02\x02\
    \x03\x12\x03D\x1f\x20\n\x0b\n\x04\x04\r\x02\x03\x12\x03E\x04\x20\n\x0c\n\
    \x05\x04\r\x02\x03\x05\x12\x03E\x04\n\n\x0c\n\x05\x04\r\x02\x03\x01\x12\
    \x03E\x0b\x1b\n\x0c\n\x05\x04\r\x02\x03\x03\x12\x03E\x1e\x1f\n\x0b\n\x04\
    \x04\r\x02\x04\x12\x03F\x04)\n\x0c\n\x05\x04\r\x02\x04\x06\x12\x03F\x04\
    \x18\n\x0c\n\x05\x04\r\x02\x04\x01\x12\x03F\x19$\n\x0c\n\x05\x04\r\x02\
    \x04\x03\x12\x03F'(\n\n\n\x02\x04\x0e\x12\x04I\0L\x01\n\n\n\x03\x04\x0e\
    \x01\x12\x03I\x08!\n\x0b\n\x04\x04\x0e\x02\0\x12\x03J\x04\x10\n\x0c\n\
    \x05\x04\x0e\x02\0\x05\x12\x03J\x04\x08\n\x0c\n\x05\x04\x0e\x02\0\x01\
    \x12\x03J\t\x0b\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03J\x0e\x0f\n\x0b\n\
    \x04\x04\x0e\x02\x01\x12\x03K\x04\x1e\n\x0c\n\x05\x04\x0e\x02\x01\x04\
    \x12\x03K\x04\x0c\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\x03K\r\x13\n\x0c\n\
    \x05\x04\x0e\x02\x01\x01\x12\x03K\x14\x19\n\x0c\n\x05\x04\x0e\x02\x01\
    \x03\x12\x03K\x1c\x1d\n\n\n\x02\x04\x0f\x12\x04N\0P\x01\n\n\n\x03\x04\
    \x0f\x01\x12\x03N\x08\x1d\n\x0b\n\x04\x04\x0f\x02\0\x12\x03O\x04\x18\n\
    \x0c\n\x05\x04\x0f\x02\0\x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x0f\x02\0\
    \x01\x12\x03O\x0b\x13\n\x0c\n\x05\x04\x0f\x02\0\x03\x12\x03O\x16\x17\n\n\
    \n\x02\x04\x10\x12\x04R\0T\x01\n\n\n\x03\x04\x10\x01\x12\x03R\x08\x1e\n\
    \x0b\n\x04\x04\x10\x02\0\x12\x03S\x04,\n\x0c\n\x05\x04\x10\x02\0\x04\x12\
    \x03S\x04\x0c\n\x0c\n\x05\x04\x10\x02\0\x06\x12\x03S\r!\n\x0c\n\x05\x04\
    \x10\x02\0\x01\x12\x03S\"'\n\x0c\n\x05\x04\x10\x02\0\x03\x12\x03S*+\n\t\
    \n\x02\x04\x11\x12\x03W\02\n\n\n\x03\x04\x11\x01\x12\x03W\x08/\n\n\n\x02\
    \x04\x12\x12\x04Y\0[\x01\n\n\n\x03\x04\x12\x01\x12\x03Y\x080\n\x0b\n\x04\
    \x04\x12\x02\0\x12\x03Z\x04,\n\x0c\n\x05\x04\x12\x02\0\x04\x12\x03Z\x04\
    \x0c\n\x0c\n\x05\x04\x12\x02\0\x06\x12\x03Z\r!\n\x0c\n\x05\x04\x12\x02\0\
    \x01\x12\x03Z\"'\n\x0c\n\x05\x04\x12\x02\0\x03\x12\x03Z*+\n\n\n\x02\x04\
    \x13\x12\x04^\0`\x01\n\n\n\x03\x04\x13\x01\x12\x03^\x08#\n\x0b\n\x04\x04\
    \x13\x02\0\x12\x03_\x04#\n\x0c\n\x05\x04\x13\x02\0\x06\x12\x03_\x04\x18\
    \n\x0c\n\x05\x04\x13\x02\0\x01\x12\x03_\x19\x1e\n\x0c\n\x05\x04\x13\x02\
    \0\x03\x12\x03_!\"\n\n\n\x02\x04\x14\x12\x04b\0d\x01\n\n\n\x03\x04\x14\
    \x01\x12\x03b\x08$\n\x0b\n\x04\x04\x14\x02\0\x12\x03c\x04\x15\n\x0c\n\
    \x05\x04\x14\x02\0\x05\x12\x03c\x04\n\n\x0c\n\x05\x04\x14\x02\0\x01\x12\
    \x03c\x0b\x10\n\x0c\n\x05\x04\x14\x02\0\x03\x12\x03c\x13\x14\n\n\n\x02\
    \x06\0\x12\x04g\0q\x01\n\n\n\x03\x06\0\x01\x12\x03g\x08*\n\x0b\n\x04\x06\
    \0\x02\0\x12\x03h\x04]\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03h\x08\x1a\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03h\x1b4\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03h?Y\n\x0c\n\x04\x06\0\x02\x01\x12\x04i\x04\x84\x01\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03i\x08'\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03i(N\n\r\
    \n\x05\x06\0\x02\x01\x03\x12\x04iY\x80\x01\n\x0b\n\x04\x06\0\x02\x02\x12\
    \x03j\x04l\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03j\x08\x1f\n\x0c\n\x05\
    \x06\0\x02\x02\x02\x12\x03j\x20>\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03jI\
    h\n\x0b\n\x04\x06\0\x02\x03\x12\x03k\x04Q\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03k\x08\x16\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03k\x17,\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03k7M\n\x0b\n\x04\x06\0\x02\x04\x12\x03l\x04\
    T\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03l\x08\x17\n\x0c\n\x05\x06\0\x02\
    \x04\x02\x12\x03l\x18.\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03l9P\n\x0b\n\
    \x04\x06\0\x02\x05\x12\x03m\x04Z\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03m\
    \x08\x19\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03m\x1a2\n\x0c\n\x05\x06\0\
    \x02\x05\x03\x12\x03m=V\n\x0b\n\x04\x06\0\x02\x06\x12\x03n\x04Q\n\x0c\n\
    \x05\x06\0\x02\x06\x01\x12\x03n\x08\x16\n\x0c\n\x05\x06\0\x02\x06\x02\
    \x12\x03n\x17,\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03n7M\n\x0c\n\x04\x06\
    \0\x02\x07\x12\x04o\x04\x87\x01\n\x0c\n\x05\x06\0\x02\x07\x01\x12\x03o\
    \x08(\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03o)P\n\r\n\x05\x06\0\x02\x07\
    \x03\x12\x04o[\x83\x01\n\x0b\n\x04\x06\0\x02\x08\x12\x03p\x04c\n\x0c\n\
    \x05\x06\0\x02\x08\x01\x12\x03p\x08\x1c\n\x0c\n\x05\x06\0\x02\x08\x02\
    \x12\x03p\x1d8\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03pC_b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(21);
            messages.push(SerializedSceneState::generated_message_descriptor_data());
            messages.push(SerializedComponent::generated_message_descriptor_data());
            messages.push(SerializedEntity::generated_message_descriptor_data());
            messages.push(GetProjectManifestRequest::generated_message_descriptor_data());
            messages.push(GetProjectManifestResponse::generated_message_descriptor_data());
            messages.push(GetProjectManifestByCoordinatesRequest::generated_message_descriptor_data());
            messages.push(GetProjectManifestByCoordinatesResponse::generated_message_descriptor_data());
            messages.push(CreateProjectWithCoordsRequest::generated_message_descriptor_data());
            messages.push(CreateProjectWithCoordsResponse::generated_message_descriptor_data());
            messages.push(SaveSceneStateRequest::generated_message_descriptor_data());
            messages.push(SaveSceneStateResponse::generated_message_descriptor_data());
            messages.push(SaveProjectInfoRequest::generated_message_descriptor_data());
            messages.push(SaveProjectInfoResponse::generated_message_descriptor_data());
            messages.push(PublishSceneStateRequest::generated_message_descriptor_data());
            messages.push(PublishSceneStateResponse::generated_message_descriptor_data());
            messages.push(GetStoredStateRequest::generated_message_descriptor_data());
            messages.push(GetStoredStateResponse::generated_message_descriptor_data());
            messages.push(CreateProjectFromStateDefinitionRequest::generated_message_descriptor_data());
            messages.push(CreateProjectFromStateDefinitionResponse::generated_message_descriptor_data());
            messages.push(SendAssetsToRendererRequest::generated_message_descriptor_data());
            messages.push(SendAssetsToRendererResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
