// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/UserIdentity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserDataRequest)
pub struct GetUserDataRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetUserDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserDataRequest {
    fn default() -> &'a GetUserDataRequest {
        <GetUserDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUserDataRequest {
    pub fn new() -> GetUserDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserDataRequest>(
            "GetUserDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserDataRequest {
    const NAME: &'static str = "GetUserDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserDataRequest {
        GetUserDataRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserDataRequest {
        static instance: GetUserDataRequest = GetUserDataRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserDataResponse)
pub struct GetUserDataResponse {
    // message fields
    // @@protoc_insertion_point(field:GetUserDataResponse.data)
    pub data: ::protobuf::MessageField<super::UserData::UserData>,
    // special fields
    // @@protoc_insertion_point(special_field:GetUserDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserDataResponse {
    fn default() -> &'a GetUserDataResponse {
        <GetUserDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUserDataResponse {
    pub fn new() -> GetUserDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::UserData::UserData>(
            "data",
            |m: &GetUserDataResponse| { &m.data },
            |m: &mut GetUserDataResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserDataResponse>(
            "GetUserDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserDataResponse {
    const NAME: &'static str = "GetUserDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserDataResponse {
        GetUserDataResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserDataResponse {
        static instance: GetUserDataResponse = GetUserDataResponse {
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserPublicKeyRequest)
pub struct GetUserPublicKeyRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetUserPublicKeyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserPublicKeyRequest {
    fn default() -> &'a GetUserPublicKeyRequest {
        <GetUserPublicKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUserPublicKeyRequest {
    pub fn new() -> GetUserPublicKeyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserPublicKeyRequest>(
            "GetUserPublicKeyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserPublicKeyRequest {
    const NAME: &'static str = "GetUserPublicKeyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserPublicKeyRequest {
        GetUserPublicKeyRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserPublicKeyRequest {
        static instance: GetUserPublicKeyRequest = GetUserPublicKeyRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserPublicKeyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserPublicKeyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserPublicKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserPublicKeyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserPublicKeyResponse)
pub struct GetUserPublicKeyResponse {
    // message fields
    // @@protoc_insertion_point(field:GetUserPublicKeyResponse.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:GetUserPublicKeyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserPublicKeyResponse {
    fn default() -> &'a GetUserPublicKeyResponse {
        <GetUserPublicKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUserPublicKeyResponse {
    pub fn new() -> GetUserPublicKeyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &GetUserPublicKeyResponse| { &m.address },
            |m: &mut GetUserPublicKeyResponse| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserPublicKeyResponse>(
            "GetUserPublicKeyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserPublicKeyResponse {
    const NAME: &'static str = "GetUserPublicKeyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserPublicKeyResponse {
        GetUserPublicKeyResponse::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserPublicKeyResponse {
        static instance: GetUserPublicKeyResponse = GetUserPublicKeyResponse {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserPublicKeyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserPublicKeyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserPublicKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserPublicKeyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ekernel/apis/UserIdentity.proto\x1a\x15common/UserData.proto\"\x14\
    \n\x12GetUserDataRequest\"B\n\x13GetUserDataResponse\x12\"\n\x04data\x18\
    \x01\x20\x01(\x0b2\t.UserDataH\0R\x04data\x88\x01\x01B\x07\n\x05_data\"\
    \x19\n\x17GetUserPublicKeyRequest\"E\n\x18GetUserPublicKeyResponse\x12\
    \x1d\n\x07address\x18\x01\x20\x01(\tH\0R\x07address\x88\x01\x01B\n\n\x08\
    _address2\x9c\x01\n\x13UserIdentityService\x12I\n\x10GetUserPublicKey\
    \x12\x18.GetUserPublicKeyRequest\x1a\x19.GetUserPublicKeyResponse\"\0\
    \x12:\n\x0bGetUserData\x12\x13.GetUserDataRequest\x1a\x14.GetUserDataRes\
    ponse\"\0J\x8b\x03\n\x06\x12\x04\0\0\x13\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\t\n\x02\x03\0\x12\x03\x02\0\x1f\n\t\n\x02\x04\0\x12\x03\x04\0\x1d\
    \n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x1a\n\n\n\x02\x04\x01\x12\x04\x06\0\
    \x08\x01\n\n\n\x03\x04\x01\x01\x12\x03\x06\x08\x1b\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x07\x04\x1f\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x07\x04\
    \x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x07\r\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\x07\x16\x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x07\
    \x1d\x1e\n\t\n\x02\x04\x02\x12\x03\n\0\"\n\n\n\x03\x04\x02\x01\x12\x03\n\
    \x08\x1f\n\n\n\x02\x04\x03\x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03\x0c\x08\x20\n\x0b\n\x04\x04\x03\x02\0\x12\x03\r\x04\x20\n\x0c\n\
    \x05\x04\x03\x02\0\x04\x12\x03\r\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\r\r\x13\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\r\x14\x1b\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\r\x1e\x1f\n\n\n\x02\x06\0\x12\x04\x10\0\
    \x13\x01\n\n\n\x03\x06\0\x01\x12\x03\x10\x08\x1b\n\x0b\n\x04\x06\0\x02\0\
    \x12\x03\x11\x04W\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x11\x08\x18\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x11\x190\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x11;S\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x12\x04H\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x12\x08\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x12\x14&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x121Db\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::UserData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(GetUserDataRequest::generated_message_descriptor_data());
            messages.push(GetUserDataResponse::generated_message_descriptor_data());
            messages.push(GetUserPublicKeyRequest::generated_message_descriptor_data());
            messages.push(GetUserPublicKeyResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
