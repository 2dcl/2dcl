// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/SignedFetch.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:FlatFetchInit)
pub struct FlatFetchInit {
    // message fields
    // @@protoc_insertion_point(field:FlatFetchInit.method)
    pub method: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:FlatFetchInit.body)
    pub body: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:FlatFetchInit.headers)
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:FlatFetchInit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FlatFetchInit {
    fn default() -> &'a FlatFetchInit {
        <FlatFetchInit as ::protobuf::Message>::default_instance()
    }
}

impl FlatFetchInit {
    pub fn new() -> FlatFetchInit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "method",
            |m: &FlatFetchInit| { &m.method },
            |m: &mut FlatFetchInit| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "body",
            |m: &FlatFetchInit| { &m.body },
            |m: &mut FlatFetchInit| { &mut m.body },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "headers",
            |m: &FlatFetchInit| { &m.headers },
            |m: &mut FlatFetchInit| { &mut m.headers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FlatFetchInit>(
            "FlatFetchInit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FlatFetchInit {
    const NAME: &'static str = "FlatFetchInit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.method = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.body = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.headers.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.method.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.body.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for (k, v) in &self.headers {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.method.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.body.as_ref() {
            os.write_string(2, v)?;
        }
        for (k, v) in &self.headers {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(26)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FlatFetchInit {
        FlatFetchInit::new()
    }

    fn clear(&mut self) {
        self.method = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.headers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FlatFetchInit {
        static instance: ::protobuf::rt::Lazy<FlatFetchInit> = ::protobuf::rt::Lazy::new();
        instance.get(FlatFetchInit::new)
    }
}

impl ::protobuf::MessageFull for FlatFetchInit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FlatFetchInit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FlatFetchInit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlatFetchInit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:FlatFetchResponse)
pub struct FlatFetchResponse {
    // message fields
    // @@protoc_insertion_point(field:FlatFetchResponse.ok)
    pub ok: bool,
    // @@protoc_insertion_point(field:FlatFetchResponse.status)
    pub status: i32,
    // @@protoc_insertion_point(field:FlatFetchResponse.status_text)
    pub status_text: ::std::string::String,
    // @@protoc_insertion_point(field:FlatFetchResponse.headers)
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // @@protoc_insertion_point(field:FlatFetchResponse.body)
    pub body: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:FlatFetchResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FlatFetchResponse {
    fn default() -> &'a FlatFetchResponse {
        <FlatFetchResponse as ::protobuf::Message>::default_instance()
    }
}

impl FlatFetchResponse {
    pub fn new() -> FlatFetchResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ok",
            |m: &FlatFetchResponse| { &m.ok },
            |m: &mut FlatFetchResponse| { &mut m.ok },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &FlatFetchResponse| { &m.status },
            |m: &mut FlatFetchResponse| { &mut m.status },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status_text",
            |m: &FlatFetchResponse| { &m.status_text },
            |m: &mut FlatFetchResponse| { &mut m.status_text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "headers",
            |m: &FlatFetchResponse| { &m.headers },
            |m: &mut FlatFetchResponse| { &mut m.headers },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &FlatFetchResponse| { &m.body },
            |m: &mut FlatFetchResponse| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FlatFetchResponse>(
            "FlatFetchResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FlatFetchResponse {
    const NAME: &'static str = "FlatFetchResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.ok = is.read_bool()?;
                },
                16 => {
                    self.status = is.read_int32()?;
                },
                26 => {
                    self.status_text = is.read_string()?;
                },
                34 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.headers.insert(key, value);
                },
                42 => {
                    self.body = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.ok != false {
            my_size += 1 + 1;
        }
        if self.status != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.status);
        }
        if !self.status_text.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.status_text);
        }
        for (k, v) in &self.headers {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.ok != false {
            os.write_bool(1, self.ok)?;
        }
        if self.status != 0 {
            os.write_int32(2, self.status)?;
        }
        if !self.status_text.is_empty() {
            os.write_string(3, &self.status_text)?;
        }
        for (k, v) in &self.headers {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(34)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        if !self.body.is_empty() {
            os.write_string(5, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FlatFetchResponse {
        FlatFetchResponse::new()
    }

    fn clear(&mut self) {
        self.ok = false;
        self.status = 0;
        self.status_text.clear();
        self.headers.clear();
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FlatFetchResponse {
        static instance: ::protobuf::rt::Lazy<FlatFetchResponse> = ::protobuf::rt::Lazy::new();
        instance.get(FlatFetchResponse::new)
    }
}

impl ::protobuf::MessageFull for FlatFetchResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FlatFetchResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FlatFetchResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FlatFetchResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SignedFetchRequest)
pub struct SignedFetchRequest {
    // message fields
    // @@protoc_insertion_point(field:SignedFetchRequest.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:SignedFetchRequest.init)
    pub init: ::protobuf::MessageField<FlatFetchInit>,
    // special fields
    // @@protoc_insertion_point(special_field:SignedFetchRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedFetchRequest {
    fn default() -> &'a SignedFetchRequest {
        <SignedFetchRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignedFetchRequest {
    pub fn new() -> SignedFetchRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &SignedFetchRequest| { &m.url },
            |m: &mut SignedFetchRequest| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, FlatFetchInit>(
            "init",
            |m: &SignedFetchRequest| { &m.init },
            |m: &mut SignedFetchRequest| { &mut m.init },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedFetchRequest>(
            "SignedFetchRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedFetchRequest {
    const NAME: &'static str = "SignedFetchRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.init)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if let Some(v) = self.init.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if let Some(v) = self.init.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedFetchRequest {
        SignedFetchRequest::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.init.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedFetchRequest {
        static instance: SignedFetchRequest = SignedFetchRequest {
            url: ::std::string::String::new(),
            init: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedFetchRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedFetchRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedFetchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedFetchRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dkernel/apis/SignedFetch.proto\"\xcc\x01\n\rFlatFetchInit\x12\x1b\n\
    \x06method\x18\x01\x20\x01(\tH\0R\x06method\x88\x01\x01\x12\x17\n\x04bod\
    y\x18\x02\x20\x01(\tH\x01R\x04body\x88\x01\x01\x125\n\x07headers\x18\x03\
    \x20\x03(\x0b2\x1b.FlatFetchInit.HeadersEntryR\x07headers\x1a:\n\x0cHead\
    ersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01B\t\n\x07_methodB\x07\n\x05_body\
    \"\xe7\x01\n\x11FlatFetchResponse\x12\x0e\n\x02ok\x18\x01\x20\x01(\x08R\
    \x02ok\x12\x16\n\x06status\x18\x02\x20\x01(\x05R\x06status\x12\x1f\n\x0b\
    status_text\x18\x03\x20\x01(\tR\nstatusText\x129\n\x07headers\x18\x04\
    \x20\x03(\x0b2\x1f.FlatFetchResponse.HeadersEntryR\x07headers\x12\x12\n\
    \x04body\x18\x05\x20\x01(\tR\x04body\x1a:\n\x0cHeadersEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"X\n\x12SignedFetchRequest\x12\x10\n\x03url\x18\x01\
    \x20\x01(\tR\x03url\x12'\n\x04init\x18\x02\x20\x01(\x0b2\x0e.FlatFetchIn\
    itH\0R\x04init\x88\x01\x01B\x07\n\x05_init2N\n\x12SignedFetchService\x12\
    8\n\x0bSignedFetch\x12\x13.SignedFetchRequest\x1a\x12.FlatFetchResponse\
    \"\0J\xf9\x05\n\x06\x12\x04\0\0\x17\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\n\n\x02\x04\0\x12\x04\x02\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\
    \x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x04\x1f\n\x0c\n\x05\x04\0\
    \x02\0\x04\x12\x03\x03\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\r\
    \x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\x14\x1a\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x03\x1d\x1e\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x04\
    \x1d\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x04\x04\x0c\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x04\r\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\
    \x14\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x1b\x1c\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x05\x04$\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\
    \x05\x04\x17\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\x18\x1f\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x05\"#\n\n\n\x02\x04\x01\x12\x04\x08\0\
    \x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x08\x08\x19\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\t\x04\x10\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\t\x04\x08\
    \n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\t\x0b\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03\t\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\n\x04\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\n\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03\n\n\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\n\x13\
    \x14\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0b\x04\x1b\n\x0c\n\x05\x04\x01\
    \x02\x02\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\
    \x0b\x0b\x16\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0b\x19\x1a\n\x0b\n\
    \x04\x04\x01\x02\x03\x12\x03\x0c\x04$\n\x0c\n\x05\x04\x01\x02\x03\x06\
    \x12\x03\x0c\x04\x17\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x0c\x18\x1f\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0c\"#\n\x0b\n\x04\x04\x01\x02\
    \x04\x12\x03\r\x04\x14\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\r\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\r\x0b\x0f\n\x0c\n\x05\x04\x01\x02\
    \x04\x03\x12\x03\r\x12\x13\n\n\n\x02\x04\x02\x12\x04\x10\0\x13\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x10\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x11\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\x11\x0b\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\x11\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x12\x04$\n\x0c\n\
    \x05\x04\x02\x02\x01\x04\x12\x03\x12\x04\x0c\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x12\r\x1a\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x12\x1b\
    \x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x12\"#\n\n\n\x02\x06\0\x12\
    \x04\x15\0\x17\x01\n\n\n\x03\x06\0\x01\x12\x03\x15\x08\x1a\n\x0b\n\x04\
    \x06\0\x02\0\x12\x03\x16\x04F\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x16\
    \x08\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x16\x14&\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x161Bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FlatFetchInit::generated_message_descriptor_data());
            messages.push(FlatFetchResponse::generated_message_descriptor_data());
            messages.push(SignedFetchRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
