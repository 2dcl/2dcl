// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/EthereumController.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:RequirePaymentRequest)
pub struct RequirePaymentRequest {
    // message fields
    // @@protoc_insertion_point(field:RequirePaymentRequest.to_address)
    pub to_address: ::std::string::String,
    // @@protoc_insertion_point(field:RequirePaymentRequest.amount)
    pub amount: f32,
    // @@protoc_insertion_point(field:RequirePaymentRequest.currency)
    pub currency: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:RequirePaymentRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequirePaymentRequest {
    fn default() -> &'a RequirePaymentRequest {
        <RequirePaymentRequest as ::protobuf::Message>::default_instance()
    }
}

impl RequirePaymentRequest {
    pub fn new() -> RequirePaymentRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &RequirePaymentRequest| { &m.to_address },
            |m: &mut RequirePaymentRequest| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &RequirePaymentRequest| { &m.amount },
            |m: &mut RequirePaymentRequest| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "currency",
            |m: &RequirePaymentRequest| { &m.currency },
            |m: &mut RequirePaymentRequest| { &mut m.currency },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequirePaymentRequest>(
            "RequirePaymentRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequirePaymentRequest {
    const NAME: &'static str = "RequirePaymentRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.to_address = is.read_string()?;
                },
                21 => {
                    self.amount = is.read_float()?;
                },
                26 => {
                    self.currency = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.to_address);
        }
        if self.amount != 0. {
            my_size += 1 + 4;
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.currency);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.to_address.is_empty() {
            os.write_string(1, &self.to_address)?;
        }
        if self.amount != 0. {
            os.write_float(2, self.amount)?;
        }
        if !self.currency.is_empty() {
            os.write_string(3, &self.currency)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequirePaymentRequest {
        RequirePaymentRequest::new()
    }

    fn clear(&mut self) {
        self.to_address.clear();
        self.amount = 0.;
        self.currency.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequirePaymentRequest {
        static instance: RequirePaymentRequest = RequirePaymentRequest {
            to_address: ::std::string::String::new(),
            amount: 0.,
            currency: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequirePaymentRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequirePaymentRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequirePaymentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequirePaymentRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:RequirePaymentResponse)
pub struct RequirePaymentResponse {
    // message fields
    // @@protoc_insertion_point(field:RequirePaymentResponse.json_any_response)
    pub json_any_response: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:RequirePaymentResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RequirePaymentResponse {
    fn default() -> &'a RequirePaymentResponse {
        <RequirePaymentResponse as ::protobuf::Message>::default_instance()
    }
}

impl RequirePaymentResponse {
    pub fn new() -> RequirePaymentResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "json_any_response",
            |m: &RequirePaymentResponse| { &m.json_any_response },
            |m: &mut RequirePaymentResponse| { &mut m.json_any_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RequirePaymentResponse>(
            "RequirePaymentResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RequirePaymentResponse {
    const NAME: &'static str = "RequirePaymentResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.json_any_response = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.json_any_response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.json_any_response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.json_any_response.is_empty() {
            os.write_string(1, &self.json_any_response)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RequirePaymentResponse {
        RequirePaymentResponse::new()
    }

    fn clear(&mut self) {
        self.json_any_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RequirePaymentResponse {
        static instance: RequirePaymentResponse = RequirePaymentResponse {
            json_any_response: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RequirePaymentResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RequirePaymentResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RequirePaymentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequirePaymentResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SignMessageRequest)
pub struct SignMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:SignMessageRequest.message)
    pub message: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:SignMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignMessageRequest {
    fn default() -> &'a SignMessageRequest {
        <SignMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl SignMessageRequest {
    pub fn new() -> SignMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "message",
            |m: &SignMessageRequest| { &m.message },
            |m: &mut SignMessageRequest| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignMessageRequest>(
            "SignMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignMessageRequest {
    const NAME: &'static str = "SignMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.message.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.message {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.message {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignMessageRequest {
        SignMessageRequest::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignMessageRequest {
        static instance: ::protobuf::rt::Lazy<SignMessageRequest> = ::protobuf::rt::Lazy::new();
        instance.get(SignMessageRequest::new)
    }
}

impl ::protobuf::MessageFull for SignMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SignMessageResponse)
pub struct SignMessageResponse {
    // message fields
    // @@protoc_insertion_point(field:SignMessageResponse.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:SignMessageResponse.hexEncodedMessage)
    pub hexEncodedMessage: ::std::string::String,
    // @@protoc_insertion_point(field:SignMessageResponse.signature)
    pub signature: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SignMessageResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignMessageResponse {
    fn default() -> &'a SignMessageResponse {
        <SignMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl SignMessageResponse {
    pub fn new() -> SignMessageResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &SignMessageResponse| { &m.message },
            |m: &mut SignMessageResponse| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hexEncodedMessage",
            |m: &SignMessageResponse| { &m.hexEncodedMessage },
            |m: &mut SignMessageResponse| { &mut m.hexEncodedMessage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignMessageResponse| { &m.signature },
            |m: &mut SignMessageResponse| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignMessageResponse>(
            "SignMessageResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignMessageResponse {
    const NAME: &'static str = "SignMessageResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                18 => {
                    self.hexEncodedMessage = is.read_string()?;
                },
                26 => {
                    self.signature = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        if !self.hexEncodedMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hexEncodedMessage);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        if !self.hexEncodedMessage.is_empty() {
            os.write_string(2, &self.hexEncodedMessage)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignMessageResponse {
        SignMessageResponse::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.hexEncodedMessage.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignMessageResponse {
        static instance: SignMessageResponse = SignMessageResponse {
            message: ::std::string::String::new(),
            hexEncodedMessage: ::std::string::String::new(),
            signature: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignMessageResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignMessageResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignMessageResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ConvertMessageToObjectRequest)
pub struct ConvertMessageToObjectRequest {
    // message fields
    // @@protoc_insertion_point(field:ConvertMessageToObjectRequest.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:ConvertMessageToObjectRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConvertMessageToObjectRequest {
    fn default() -> &'a ConvertMessageToObjectRequest {
        <ConvertMessageToObjectRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConvertMessageToObjectRequest {
    pub fn new() -> ConvertMessageToObjectRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &ConvertMessageToObjectRequest| { &m.message },
            |m: &mut ConvertMessageToObjectRequest| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConvertMessageToObjectRequest>(
            "ConvertMessageToObjectRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConvertMessageToObjectRequest {
    const NAME: &'static str = "ConvertMessageToObjectRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConvertMessageToObjectRequest {
        ConvertMessageToObjectRequest::new()
    }

    fn clear(&mut self) {
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConvertMessageToObjectRequest {
        static instance: ConvertMessageToObjectRequest = ConvertMessageToObjectRequest {
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConvertMessageToObjectRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConvertMessageToObjectRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConvertMessageToObjectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvertMessageToObjectRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ConvertMessageToObjectResponse)
pub struct ConvertMessageToObjectResponse {
    // message fields
    // @@protoc_insertion_point(field:ConvertMessageToObjectResponse.dict)
    pub dict: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:ConvertMessageToObjectResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConvertMessageToObjectResponse {
    fn default() -> &'a ConvertMessageToObjectResponse {
        <ConvertMessageToObjectResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConvertMessageToObjectResponse {
    pub fn new() -> ConvertMessageToObjectResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "dict",
            |m: &ConvertMessageToObjectResponse| { &m.dict },
            |m: &mut ConvertMessageToObjectResponse| { &mut m.dict },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConvertMessageToObjectResponse>(
            "ConvertMessageToObjectResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConvertMessageToObjectResponse {
    const NAME: &'static str = "ConvertMessageToObjectResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.dict.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for (k, v) in &self.dict {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for (k, v) in &self.dict {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(10)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConvertMessageToObjectResponse {
        ConvertMessageToObjectResponse::new()
    }

    fn clear(&mut self) {
        self.dict.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConvertMessageToObjectResponse {
        static instance: ::protobuf::rt::Lazy<ConvertMessageToObjectResponse> = ::protobuf::rt::Lazy::new();
        instance.get(ConvertMessageToObjectResponse::new)
    }
}

impl ::protobuf::MessageFull for ConvertMessageToObjectResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConvertMessageToObjectResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConvertMessageToObjectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConvertMessageToObjectResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SendAsyncRequest)
pub struct SendAsyncRequest {
    // message fields
    // @@protoc_insertion_point(field:SendAsyncRequest.id)
    pub id: i32,
    // @@protoc_insertion_point(field:SendAsyncRequest.method)
    pub method: ::std::string::String,
    // @@protoc_insertion_point(field:SendAsyncRequest.json_params)
    pub json_params: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SendAsyncRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendAsyncRequest {
    fn default() -> &'a SendAsyncRequest {
        <SendAsyncRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendAsyncRequest {
    pub fn new() -> SendAsyncRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SendAsyncRequest| { &m.id },
            |m: &mut SendAsyncRequest| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &SendAsyncRequest| { &m.method },
            |m: &mut SendAsyncRequest| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "json_params",
            |m: &SendAsyncRequest| { &m.json_params },
            |m: &mut SendAsyncRequest| { &mut m.json_params },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendAsyncRequest>(
            "SendAsyncRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendAsyncRequest {
    const NAME: &'static str = "SendAsyncRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_int32()?;
                },
                18 => {
                    self.method = is.read_string()?;
                },
                26 => {
                    self.json_params = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.id);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.method);
        }
        if !self.json_params.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.json_params);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.method.is_empty() {
            os.write_string(2, &self.method)?;
        }
        if !self.json_params.is_empty() {
            os.write_string(3, &self.json_params)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendAsyncRequest {
        SendAsyncRequest::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.method.clear();
        self.json_params.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendAsyncRequest {
        static instance: SendAsyncRequest = SendAsyncRequest {
            id: 0,
            method: ::std::string::String::new(),
            json_params: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendAsyncRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendAsyncRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendAsyncRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendAsyncRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SendAsyncResponse)
pub struct SendAsyncResponse {
    // message fields
    // @@protoc_insertion_point(field:SendAsyncResponse.json_any_response)
    pub json_any_response: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SendAsyncResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SendAsyncResponse {
    fn default() -> &'a SendAsyncResponse {
        <SendAsyncResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendAsyncResponse {
    pub fn new() -> SendAsyncResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "json_any_response",
            |m: &SendAsyncResponse| { &m.json_any_response },
            |m: &mut SendAsyncResponse| { &mut m.json_any_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SendAsyncResponse>(
            "SendAsyncResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SendAsyncResponse {
    const NAME: &'static str = "SendAsyncResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.json_any_response = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.json_any_response.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.json_any_response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.json_any_response.is_empty() {
            os.write_string(1, &self.json_any_response)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SendAsyncResponse {
        SendAsyncResponse::new()
    }

    fn clear(&mut self) {
        self.json_any_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SendAsyncResponse {
        static instance: SendAsyncResponse = SendAsyncResponse {
            json_any_response: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SendAsyncResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SendAsyncResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SendAsyncResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendAsyncResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserAccountRequest)
pub struct GetUserAccountRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetUserAccountRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserAccountRequest {
    fn default() -> &'a GetUserAccountRequest {
        <GetUserAccountRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetUserAccountRequest {
    pub fn new() -> GetUserAccountRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserAccountRequest>(
            "GetUserAccountRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserAccountRequest {
    const NAME: &'static str = "GetUserAccountRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserAccountRequest {
        GetUserAccountRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserAccountRequest {
        static instance: GetUserAccountRequest = GetUserAccountRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserAccountRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserAccountRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserAccountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserAccountRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetUserAccountResponse)
pub struct GetUserAccountResponse {
    // message fields
    // @@protoc_insertion_point(field:GetUserAccountResponse.address)
    pub address: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:GetUserAccountResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetUserAccountResponse {
    fn default() -> &'a GetUserAccountResponse {
        <GetUserAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetUserAccountResponse {
    pub fn new() -> GetUserAccountResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &GetUserAccountResponse| { &m.address },
            |m: &mut GetUserAccountResponse| { &mut m.address },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetUserAccountResponse>(
            "GetUserAccountResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetUserAccountResponse {
    const NAME: &'static str = "GetUserAccountResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.address = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.address.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetUserAccountResponse {
        GetUserAccountResponse::new()
    }

    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetUserAccountResponse {
        static instance: GetUserAccountResponse = GetUserAccountResponse {
            address: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetUserAccountResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetUserAccountResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetUserAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetUserAccountResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$kernel/apis/EthereumController.proto\"j\n\x15RequirePaymentRequest\
    \x12\x1d\n\nto_address\x18\x01\x20\x01(\tR\ttoAddress\x12\x16\n\x06amoun\
    t\x18\x02\x20\x01(\x02R\x06amount\x12\x1a\n\x08currency\x18\x03\x20\x01(\
    \tR\x08currency\"D\n\x16RequirePaymentResponse\x12*\n\x11json_any_respon\
    se\x18\x01\x20\x01(\tR\x0fjsonAnyResponse\"\x8c\x01\n\x12SignMessageRequ\
    est\x12:\n\x07message\x18\x01\x20\x03(\x0b2\x20.SignMessageRequest.Messa\
    geEntryR\x07message\x1a:\n\x0cMessageEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\"{\n\x13SignMessageResponse\x12\x18\n\x07message\x18\x01\x20\x01(\t\
    R\x07message\x12,\n\x11hexEncodedMessage\x18\x02\x20\x01(\tR\x11hexEncod\
    edMessage\x12\x1c\n\tsignature\x18\x03\x20\x01(\tR\tsignature\"9\n\x1dCo\
    nvertMessageToObjectRequest\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07\
    message\"\x98\x01\n\x1eConvertMessageToObjectResponse\x12=\n\x04dict\x18\
    \x01\x20\x03(\x0b2).ConvertMessageToObjectResponse.DictEntryR\x04dict\
    \x1a7\n\tDictEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"[\n\x10SendAsyncReques\
    t\x12\x0e\n\x02id\x18\x01\x20\x01(\x05R\x02id\x12\x16\n\x06method\x18\
    \x02\x20\x01(\tR\x06method\x12\x1f\n\x0bjson_params\x18\x03\x20\x01(\tR\
    \njsonParams\"?\n\x11SendAsyncResponse\x12*\n\x11json_any_response\x18\
    \x01\x20\x01(\tR\x0fjsonAnyResponse\"\x17\n\x15GetUserAccountRequest\"C\
    \n\x16GetUserAccountResponse\x12\x1d\n\x07address\x18\x01\x20\x01(\tH\0R\
    \x07address\x88\x01\x01B\n\n\x08_address2\xf4\x02\n\x19EthereumControlle\
    rService\x12C\n\x0eRequirePayment\x12\x16.RequirePaymentRequest\x1a\x17.\
    RequirePaymentResponse\"\0\x12:\n\x0bSignMessage\x12\x13.SignMessageRequ\
    est\x1a\x14.SignMessageResponse\"\0\x12[\n\x16ConvertMessageToObject\x12\
    \x1e.ConvertMessageToObjectRequest\x1a\x1f.ConvertMessageToObjectRespons\
    e\"\0\x124\n\tSendAsync\x12\x11.SendAsyncRequest\x1a\x12.SendAsyncRespon\
    se\"\0\x12C\n\x0eGetUserAccount\x12\x16.GetUserAccountRequest\x1a\x17.Ge\
    tUserAccountResponse\"\0J\xf3\n\n\x06\x12\x04\0\04\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x06\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x02\x08\x1d\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x04\x1a\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x03\x0b\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x18\x19\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x04\x15\n\x0c\n\x05\x04\0\x02\x01\
    \x05\x12\x03\x04\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\n\x10\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x13\x14\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x05\x04\x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x05\x04\n\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x05\x0b\x13\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x05\x16\x17\n\n\n\x02\x04\x01\x12\x04\x08\0\n\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x08\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\
    \x04!\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\t\x0b\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x1f\
    \x20\n\n\n\x02\x04\x02\x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x0c\x08\x1a\n\x0b\n\x04\x04\x02\x02\0\x12\x03\r\x04$\n\x0c\n\x05\
    \x04\x02\x02\0\x06\x12\x03\r\x04\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\r\x18\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\r\"#\n\n\n\x02\x04\
    \x03\x12\x04\x10\0\x14\x01\n\n\n\x03\x04\x03\x01\x12\x03\x10\x08\x1b\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x11\x04\x17\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x11\x0b\x12\
    \n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x11\x15\x16\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x03\x12\x04!\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x12\
    \x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x12\x0b\x1c\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03\x12\x1f\x20\n\x0b\n\x04\x04\x03\x02\x02\x12\
    \x03\x13\x04\x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x13\x04\n\n\x0c\
    \n\x05\x04\x03\x02\x02\x01\x12\x03\x13\x0b\x14\n\x0c\n\x05\x04\x03\x02\
    \x02\x03\x12\x03\x13\x17\x18\n\n\n\x02\x04\x04\x12\x04\x16\0\x18\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03\x16\x08%\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \x17\x04\x17\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x17\x0b\x12\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x17\x15\x16\n\n\n\x02\x04\x05\x12\x04\x1a\0\x1c\x01\n\n\n\x03\x04\
    \x05\x01\x12\x03\x1a\x08&\n\x0b\n\x04\x04\x05\x02\0\x12\x03\x1b\x04!\n\
    \x0c\n\x05\x04\x05\x02\0\x06\x12\x03\x1b\x04\x17\n\x0c\n\x05\x04\x05\x02\
    \0\x01\x12\x03\x1b\x18\x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x1b\x1f\
    \x20\n\n\n\x02\x04\x06\x12\x04\x1e\0\"\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    \x1e\x08\x18\n\x0b\n\x04\x04\x06\x02\0\x12\x03\x1f\x04\x11\n\x0c\n\x05\
    \x04\x06\x02\0\x05\x12\x03\x1f\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03\x1f\n\x0c\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\x1f\x0f\x10\n\x0b\n\
    \x04\x04\x06\x02\x01\x12\x03\x20\x04\x16\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x03\x20\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03\x20\x0b\x11\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x03\x20\x14\x15\n\x0b\n\x04\x04\x06\
    \x02\x02\x12\x03!\x04\x1b\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03!\x04\n\
    \n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03!\x0b\x16\n\x0c\n\x05\x04\x06\
    \x02\x02\x03\x12\x03!\x19\x1a\n\n\n\x02\x04\x07\x12\x04$\0&\x01\n\n\n\
    \x03\x04\x07\x01\x12\x03$\x08\x19\n\x0b\n\x04\x04\x07\x02\0\x12\x03%\x04\
    !\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03%\x04\n\n\x0c\n\x05\x04\x07\x02\0\
    \x01\x12\x03%\x0b\x1c\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03%\x1f\x20\n\t\
    \n\x02\x04\x08\x12\x03(\0\x20\n\n\n\x03\x04\x08\x01\x12\x03(\x08\x1d\n\n\
    \n\x02\x04\t\x12\x04*\0,\x01\n\n\n\x03\x04\t\x01\x12\x03*\x08\x1e\n\x0b\
    \n\x04\x04\t\x02\0\x12\x03+\x04\x20\n\x0c\n\x05\x04\t\x02\0\x04\x12\x03+\
    \x04\x0c\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03+\r\x13\n\x0c\n\x05\x04\t\
    \x02\0\x01\x12\x03+\x14\x1b\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03+\x1e\x1f\
    \n\n\n\x02\x06\0\x12\x04.\04\x01\n\n\n\x03\x06\0\x01\x12\x03.\x08!\n\x0b\
    \n\x04\x06\0\x02\0\x12\x03/\x04Q\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03/\
    \x08\x16\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03/\x17,\n\x0c\n\x05\x06\0\x02\
    \0\x03\x12\x03/7M\n\x0b\n\x04\x06\0\x02\x01\x12\x030\x04H\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x030\x08\x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x030\x14&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x0301D\n\x0b\n\x04\x06\0\
    \x02\x02\x12\x031\x04i\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x031\x08\x1e\n\
    \x0c\n\x05\x06\0\x02\x02\x02\x12\x031\x1f<\n\x0c\n\x05\x06\0\x02\x02\x03\
    \x12\x031Ge\n\x0b\n\x04\x06\0\x02\x03\x12\x032\x04B\n\x0c\n\x05\x06\0\
    \x02\x03\x01\x12\x032\x08\x11\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x032\x12\
    \"\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x032->\n\x0b\n\x04\x06\0\x02\x04\
    \x12\x033\x04Q\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x033\x08\x16\n\x0c\n\
    \x05\x06\0\x02\x04\x02\x12\x033\x17,\n\x0c\n\x05\x06\0\x02\x04\x03\x12\
    \x0337Mb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(10);
            messages.push(RequirePaymentRequest::generated_message_descriptor_data());
            messages.push(RequirePaymentResponse::generated_message_descriptor_data());
            messages.push(SignMessageRequest::generated_message_descriptor_data());
            messages.push(SignMessageResponse::generated_message_descriptor_data());
            messages.push(ConvertMessageToObjectRequest::generated_message_descriptor_data());
            messages.push(ConvertMessageToObjectResponse::generated_message_descriptor_data());
            messages.push(SendAsyncRequest::generated_message_descriptor_data());
            messages.push(SendAsyncResponse::generated_message_descriptor_data());
            messages.push(GetUserAccountRequest::generated_message_descriptor_data());
            messages.push(GetUserAccountResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
