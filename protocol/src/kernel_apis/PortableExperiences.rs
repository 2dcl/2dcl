// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/PortableExperiences.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:KillRequest)
pub struct KillRequest {
    // message fields
    // @@protoc_insertion_point(field:KillRequest.pid)
    pub pid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:KillRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KillRequest {
    fn default() -> &'a KillRequest {
        <KillRequest as ::protobuf::Message>::default_instance()
    }
}

impl KillRequest {
    pub fn new() -> KillRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &KillRequest| { &m.pid },
            |m: &mut KillRequest| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KillRequest>(
            "KillRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KillRequest {
    const NAME: &'static str = "KillRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pid.is_empty() {
            os.write_string(1, &self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KillRequest {
        KillRequest::new()
    }

    fn clear(&mut self) {
        self.pid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KillRequest {
        static instance: KillRequest = KillRequest {
            pid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KillRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KillRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KillRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:KillResponse)
pub struct KillResponse {
    // message fields
    // @@protoc_insertion_point(field:KillResponse.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:KillResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a KillResponse {
    fn default() -> &'a KillResponse {
        <KillResponse as ::protobuf::Message>::default_instance()
    }
}

impl KillResponse {
    pub fn new() -> KillResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &KillResponse| { &m.status },
            |m: &mut KillResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<KillResponse>(
            "KillResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for KillResponse {
    const NAME: &'static str = "KillResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> KillResponse {
        KillResponse::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static KillResponse {
        static instance: KillResponse = KillResponse {
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for KillResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("KillResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for KillResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SpawnRequest)
pub struct SpawnRequest {
    // message fields
    // @@protoc_insertion_point(field:SpawnRequest.pid)
    pub pid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SpawnRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpawnRequest {
    fn default() -> &'a SpawnRequest {
        <SpawnRequest as ::protobuf::Message>::default_instance()
    }
}

impl SpawnRequest {
    pub fn new() -> SpawnRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &SpawnRequest| { &m.pid },
            |m: &mut SpawnRequest| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpawnRequest>(
            "SpawnRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpawnRequest {
    const NAME: &'static str = "SpawnRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pid.is_empty() {
            os.write_string(1, &self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpawnRequest {
        SpawnRequest::new()
    }

    fn clear(&mut self) {
        self.pid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpawnRequest {
        static instance: SpawnRequest = SpawnRequest {
            pid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpawnRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpawnRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpawnRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpawnRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SpawnResponse)
pub struct SpawnResponse {
    // message fields
    // @@protoc_insertion_point(field:SpawnResponse.pid)
    pub pid: ::std::string::String,
    // @@protoc_insertion_point(field:SpawnResponse.parent_cid)
    pub parent_cid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:SpawnResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SpawnResponse {
    fn default() -> &'a SpawnResponse {
        <SpawnResponse as ::protobuf::Message>::default_instance()
    }
}

impl SpawnResponse {
    pub fn new() -> SpawnResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &SpawnResponse| { &m.pid },
            |m: &mut SpawnResponse| { &mut m.pid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_cid",
            |m: &SpawnResponse| { &m.parent_cid },
            |m: &mut SpawnResponse| { &mut m.parent_cid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SpawnResponse>(
            "SpawnResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SpawnResponse {
    const NAME: &'static str = "SpawnResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pid = is.read_string()?;
                },
                18 => {
                    self.parent_cid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pid);
        }
        if !self.parent_cid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.parent_cid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pid.is_empty() {
            os.write_string(1, &self.pid)?;
        }
        if !self.parent_cid.is_empty() {
            os.write_string(2, &self.parent_cid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SpawnResponse {
        SpawnResponse::new()
    }

    fn clear(&mut self) {
        self.pid.clear();
        self.parent_cid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SpawnResponse {
        static instance: SpawnResponse = SpawnResponse {
            pid: ::std::string::String::new(),
            parent_cid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SpawnResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SpawnResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SpawnResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpawnResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PxRequest)
pub struct PxRequest {
    // message fields
    // @@protoc_insertion_point(field:PxRequest.pid)
    pub pid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:PxRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PxRequest {
    fn default() -> &'a PxRequest {
        <PxRequest as ::protobuf::Message>::default_instance()
    }
}

impl PxRequest {
    pub fn new() -> PxRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pid",
            |m: &PxRequest| { &m.pid },
            |m: &mut PxRequest| { &mut m.pid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PxRequest>(
            "PxRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PxRequest {
    const NAME: &'static str = "PxRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pid.is_empty() {
            os.write_string(1, &self.pid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PxRequest {
        PxRequest::new()
    }

    fn clear(&mut self) {
        self.pid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PxRequest {
        static instance: PxRequest = PxRequest {
            pid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PxRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PxRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PxRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPortableExperiencesLoadedRequest)
pub struct GetPortableExperiencesLoadedRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetPortableExperiencesLoadedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPortableExperiencesLoadedRequest {
    fn default() -> &'a GetPortableExperiencesLoadedRequest {
        <GetPortableExperiencesLoadedRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPortableExperiencesLoadedRequest {
    pub fn new() -> GetPortableExperiencesLoadedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPortableExperiencesLoadedRequest>(
            "GetPortableExperiencesLoadedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPortableExperiencesLoadedRequest {
    const NAME: &'static str = "GetPortableExperiencesLoadedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPortableExperiencesLoadedRequest {
        GetPortableExperiencesLoadedRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPortableExperiencesLoadedRequest {
        static instance: GetPortableExperiencesLoadedRequest = GetPortableExperiencesLoadedRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPortableExperiencesLoadedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPortableExperiencesLoadedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPortableExperiencesLoadedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPortableExperiencesLoadedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPortableExperiencesLoadedResponse)
pub struct GetPortableExperiencesLoadedResponse {
    // message fields
    // @@protoc_insertion_point(field:GetPortableExperiencesLoadedResponse.loaded)
    pub loaded: ::std::vec::Vec<SpawnResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:GetPortableExperiencesLoadedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPortableExperiencesLoadedResponse {
    fn default() -> &'a GetPortableExperiencesLoadedResponse {
        <GetPortableExperiencesLoadedResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPortableExperiencesLoadedResponse {
    pub fn new() -> GetPortableExperiencesLoadedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "loaded",
            |m: &GetPortableExperiencesLoadedResponse| { &m.loaded },
            |m: &mut GetPortableExperiencesLoadedResponse| { &mut m.loaded },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPortableExperiencesLoadedResponse>(
            "GetPortableExperiencesLoadedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPortableExperiencesLoadedResponse {
    const NAME: &'static str = "GetPortableExperiencesLoadedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.loaded.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.loaded {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.loaded {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPortableExperiencesLoadedResponse {
        GetPortableExperiencesLoadedResponse::new()
    }

    fn clear(&mut self) {
        self.loaded.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPortableExperiencesLoadedResponse {
        static instance: GetPortableExperiencesLoadedResponse = GetPortableExperiencesLoadedResponse {
            loaded: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPortableExperiencesLoadedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPortableExperiencesLoadedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPortableExperiencesLoadedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPortableExperiencesLoadedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ExitRequest)
pub struct ExitRequest {
    // special fields
    // @@protoc_insertion_point(special_field:ExitRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExitRequest {
    fn default() -> &'a ExitRequest {
        <ExitRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExitRequest {
    pub fn new() -> ExitRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExitRequest>(
            "ExitRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExitRequest {
    const NAME: &'static str = "ExitRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExitRequest {
        ExitRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExitRequest {
        static instance: ExitRequest = ExitRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExitRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExitRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExitRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:ExitResponse)
pub struct ExitResponse {
    // message fields
    // @@protoc_insertion_point(field:ExitResponse.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:ExitResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExitResponse {
    fn default() -> &'a ExitResponse {
        <ExitResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExitResponse {
    pub fn new() -> ExitResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &ExitResponse| { &m.status },
            |m: &mut ExitResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExitResponse>(
            "ExitResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExitResponse {
    const NAME: &'static str = "ExitResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExitResponse {
        ExitResponse::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExitResponse {
        static instance: ExitResponse = ExitResponse {
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExitResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExitResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExitResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%kernel/apis/PortableExperiences.proto\"\x1f\n\x0bKillRequest\x12\x10\
    \n\x03pid\x18\x01\x20\x01(\tR\x03pid\"&\n\x0cKillResponse\x12\x16\n\x06s\
    tatus\x18\x01\x20\x01(\x08R\x06status\"\x20\n\x0cSpawnRequest\x12\x10\n\
    \x03pid\x18\x01\x20\x01(\tR\x03pid\"@\n\rSpawnResponse\x12\x10\n\x03pid\
    \x18\x01\x20\x01(\tR\x03pid\x12\x1d\n\nparent_cid\x18\x02\x20\x01(\tR\tp\
    arentCid\"\x1d\n\tPxRequest\x12\x10\n\x03pid\x18\x01\x20\x01(\tR\x03pid\
    \"%\n#GetPortableExperiencesLoadedRequest\"N\n$GetPortableExperiencesLoa\
    dedResponse\x12&\n\x06loaded\x18\x01\x20\x03(\x0b2\x0e.SpawnResponseR\
    \x06loaded\"\r\n\x0bExitRequest\"&\n\x0cExitResponse\x12\x16\n\x06status\
    \x18\x01\x20\x01(\x08R\x06status2\x83\x02\n\x1aPortableExperiencesServic\
    e\x12(\n\x05Spawn\x12\r.SpawnRequest\x1a\x0e.SpawnResponse\"\0\x12%\n\
    \x04Kill\x12\x0c.KillRequest\x1a\r.KillResponse\"\0\x12%\n\x04Exit\x12\
    \x0c.ExitRequest\x1a\r.ExitResponse\"\0\x12m\n\x1cGetPortableExperiences\
    Loaded\x12$.GetPortableExperiencesLoadedRequest\x1a%.GetPortableExperien\
    cesLoadedResponse\"\0J\xa2\x07\n\x06\x12\x04\0\0'\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x04\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x02\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x03\x04\x13\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x03\x0b\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x11\x12\n\n\
    \n\x02\x04\x01\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\x01\x01\x12\x03\x06\
    \x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x07\x04\x14\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x07\x04\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x07\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x07\x12\x13\n\n\n\x02\
    \x04\x02\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\x02\x01\x12\x03\n\x08\x14\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x0b\x04\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0b\x0b\x0e\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0b\x11\x12\n\n\n\x02\x04\x03\x12\
    \x04\x0e\0\x11\x01\n\n\n\x03\x04\x03\x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x03\x0f\x04\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\
    \x0f\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x0f\x0b\x0e\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x0f\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x10\x04\x1a\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x10\x04\n\n\x0c\
    \n\x05\x04\x03\x02\x01\x01\x12\x03\x10\x0b\x15\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03\x10\x18\x19\n\n\n\x02\x04\x04\x12\x04\x13\0\x15\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03\x13\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \x14\x04\x13\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x14\x04\n\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x14\x0b\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x14\x11\x12\n\t\n\x02\x04\x05\x12\x03\x17\0.\n\n\n\x03\x04\x05\x01\
    \x12\x03\x17\x08+\n\n\n\x02\x04\x06\x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03\x19\x08,\n\x0b\n\x04\x04\x06\x02\0\x12\x03\x1a\x04&\n\
    \x0c\n\x05\x04\x06\x02\0\x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x06\x02\
    \0\x06\x12\x03\x1a\r\x1a\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03\x1a\x1b!\
    \n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03\x1a$%\n\t\n\x02\x04\x07\x12\x03\
    \x1d\0\x16\n\n\n\x03\x04\x07\x01\x12\x03\x1d\x08\x13\n\n\n\x02\x04\x08\
    \x12\x04\x1e\0\x20\x01\n\n\n\x03\x04\x08\x01\x12\x03\x1e\x08\x14\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03\x1f\x04\x14\n\x0c\n\x05\x04\x08\x02\0\x05\x12\
    \x03\x1f\x04\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03\x1f\t\x0f\n\x0c\n\
    \x05\x04\x08\x02\0\x03\x12\x03\x1f\x12\x13\n\n\n\x02\x06\0\x12\x04\"\0'\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\"\x08\"\n\x0b\n\x04\x06\0\x02\0\x12\x03\
    #\x046\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03#\x08\r\n\x0c\n\x05\x06\0\x02\
    \0\x02\x12\x03#\x0e\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03#%2\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03$\x043\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03$\
    \x08\x0c\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03$\r\x18\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03$#/\n\x0b\n\x04\x06\0\x02\x02\x12\x03%\x043\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03%\x08\x0c\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03%\r\x18\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03%#/\n\x0b\n\x04\x06\
    \0\x02\x03\x12\x03&\x04{\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03&\x08$\n\
    \x0c\n\x05\x06\0\x02\x03\x02\x12\x03&%H\n\x0c\n\x05\x06\0\x02\x03\x03\
    \x12\x03&Swb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(KillRequest::generated_message_descriptor_data());
            messages.push(KillResponse::generated_message_descriptor_data());
            messages.push(SpawnRequest::generated_message_descriptor_data());
            messages.push(SpawnResponse::generated_message_descriptor_data());
            messages.push(PxRequest::generated_message_descriptor_data());
            messages.push(GetPortableExperiencesLoadedRequest::generated_message_descriptor_data());
            messages.push(GetPortableExperiencesLoadedResponse::generated_message_descriptor_data());
            messages.push(ExitRequest::generated_message_descriptor_data());
            messages.push(ExitResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
