// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/ParcelIdentity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MappingsResponse)
pub struct MappingsResponse {
    // message fields
    // @@protoc_insertion_point(field:MappingsResponse.parcel_id)
    pub parcel_id: ::std::string::String,
    // @@protoc_insertion_point(field:MappingsResponse.root_cid)
    pub root_cid: ::std::string::String,
    // @@protoc_insertion_point(field:MappingsResponse.contents)
    pub contents: ::std::vec::Vec<super::ContentMapping::ContentMapping>,
    // special fields
    // @@protoc_insertion_point(special_field:MappingsResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MappingsResponse {
    fn default() -> &'a MappingsResponse {
        <MappingsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MappingsResponse {
    pub fn new() -> MappingsResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parcel_id",
            |m: &MappingsResponse| { &m.parcel_id },
            |m: &mut MappingsResponse| { &mut m.parcel_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "root_cid",
            |m: &MappingsResponse| { &m.root_cid },
            |m: &mut MappingsResponse| { &mut m.root_cid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "contents",
            |m: &MappingsResponse| { &m.contents },
            |m: &mut MappingsResponse| { &mut m.contents },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MappingsResponse>(
            "MappingsResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MappingsResponse {
    const NAME: &'static str = "MappingsResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.parcel_id = is.read_string()?;
                },
                18 => {
                    self.root_cid = is.read_string()?;
                },
                26 => {
                    self.contents.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.parcel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.parcel_id);
        }
        if !self.root_cid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.root_cid);
        }
        for value in &self.contents {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.parcel_id.is_empty() {
            os.write_string(1, &self.parcel_id)?;
        }
        if !self.root_cid.is_empty() {
            os.write_string(2, &self.root_cid)?;
        }
        for v in &self.contents {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MappingsResponse {
        MappingsResponse::new()
    }

    fn clear(&mut self) {
        self.parcel_id.clear();
        self.root_cid.clear();
        self.contents.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MappingsResponse {
        static instance: MappingsResponse = MappingsResponse {
            parcel_id: ::std::string::String::new(),
            root_cid: ::std::string::String::new(),
            contents: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MappingsResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MappingsResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MappingsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MappingsResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Land)
pub struct Land {
    // message fields
    // @@protoc_insertion_point(field:Land.scene_id)
    pub scene_id: ::std::string::String,
    // @@protoc_insertion_point(field:Land.scene_json_data)
    pub scene_json_data: ::std::string::String,
    // @@protoc_insertion_point(field:Land.base_url)
    pub base_url: ::std::string::String,
    // @@protoc_insertion_point(field:Land.base_url_bundles)
    pub base_url_bundles: ::std::string::String,
    // @@protoc_insertion_point(field:Land.mappings_response)
    pub mappings_response: ::protobuf::MessageField<MappingsResponse>,
    // special fields
    // @@protoc_insertion_point(special_field:Land.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Land {
    fn default() -> &'a Land {
        <Land as ::protobuf::Message>::default_instance()
    }
}

impl Land {
    pub fn new() -> Land {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &Land| { &m.scene_id },
            |m: &mut Land| { &mut m.scene_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_json_data",
            |m: &Land| { &m.scene_json_data },
            |m: &mut Land| { &mut m.scene_json_data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_url",
            |m: &Land| { &m.base_url },
            |m: &mut Land| { &mut m.base_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_url_bundles",
            |m: &Land| { &m.base_url_bundles },
            |m: &mut Land| { &mut m.base_url_bundles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MappingsResponse>(
            "mappings_response",
            |m: &Land| { &m.mappings_response },
            |m: &mut Land| { &mut m.mappings_response },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Land>(
            "Land",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Land {
    const NAME: &'static str = "Land";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.scene_id = is.read_string()?;
                },
                18 => {
                    self.scene_json_data = is.read_string()?;
                },
                26 => {
                    self.base_url = is.read_string()?;
                },
                34 => {
                    self.base_url_bundles = is.read_string()?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.mappings_response)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.scene_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scene_id);
        }
        if !self.scene_json_data.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.scene_json_data);
        }
        if !self.base_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.base_url);
        }
        if !self.base_url_bundles.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.base_url_bundles);
        }
        if let Some(v) = self.mappings_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.scene_id.is_empty() {
            os.write_string(1, &self.scene_id)?;
        }
        if !self.scene_json_data.is_empty() {
            os.write_string(2, &self.scene_json_data)?;
        }
        if !self.base_url.is_empty() {
            os.write_string(3, &self.base_url)?;
        }
        if !self.base_url_bundles.is_empty() {
            os.write_string(4, &self.base_url_bundles)?;
        }
        if let Some(v) = self.mappings_response.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Land {
        Land::new()
    }

    fn clear(&mut self) {
        self.scene_id.clear();
        self.scene_json_data.clear();
        self.base_url.clear();
        self.base_url_bundles.clear();
        self.mappings_response.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Land {
        static instance: Land = Land {
            scene_id: ::std::string::String::new(),
            scene_json_data: ::std::string::String::new(),
            base_url: ::std::string::String::new(),
            base_url_bundles: ::std::string::String::new(),
            mappings_response: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Land {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Land").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Land {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Land {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetParcelRequest)
pub struct GetParcelRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetParcelRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetParcelRequest {
    fn default() -> &'a GetParcelRequest {
        <GetParcelRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetParcelRequest {
    pub fn new() -> GetParcelRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetParcelRequest>(
            "GetParcelRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetParcelRequest {
    const NAME: &'static str = "GetParcelRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetParcelRequest {
        GetParcelRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetParcelRequest {
        static instance: GetParcelRequest = GetParcelRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetParcelRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetParcelRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetParcelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetParcelRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetParcelResponse)
pub struct GetParcelResponse {
    // message fields
    // @@protoc_insertion_point(field:GetParcelResponse.land)
    pub land: ::protobuf::MessageField<Land>,
    // @@protoc_insertion_point(field:GetParcelResponse.cid)
    pub cid: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetParcelResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetParcelResponse {
    fn default() -> &'a GetParcelResponse {
        <GetParcelResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetParcelResponse {
    pub fn new() -> GetParcelResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Land>(
            "land",
            |m: &GetParcelResponse| { &m.land },
            |m: &mut GetParcelResponse| { &mut m.land },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "cid",
            |m: &GetParcelResponse| { &m.cid },
            |m: &mut GetParcelResponse| { &mut m.cid },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetParcelResponse>(
            "GetParcelResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetParcelResponse {
    const NAME: &'static str = "GetParcelResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.land)?;
                },
                18 => {
                    self.cid = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.land.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.cid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.land.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.cid.is_empty() {
            os.write_string(2, &self.cid)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetParcelResponse {
        GetParcelResponse::new()
    }

    fn clear(&mut self) {
        self.land.clear();
        self.cid.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetParcelResponse {
        static instance: GetParcelResponse = GetParcelResponse {
            land: ::protobuf::MessageField::none(),
            cid: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetParcelResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetParcelResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetParcelResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetParcelResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetSceneIdRequest)
pub struct GetSceneIdRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetSceneIdRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSceneIdRequest {
    fn default() -> &'a GetSceneIdRequest {
        <GetSceneIdRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetSceneIdRequest {
    pub fn new() -> GetSceneIdRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSceneIdRequest>(
            "GetSceneIdRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSceneIdRequest {
    const NAME: &'static str = "GetSceneIdRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSceneIdRequest {
        GetSceneIdRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSceneIdRequest {
        static instance: GetSceneIdRequest = GetSceneIdRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSceneIdRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSceneIdRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSceneIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSceneIdRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetSceneIdResponse)
pub struct GetSceneIdResponse {
    // message fields
    // @@protoc_insertion_point(field:GetSceneIdResponse.scene_id)
    pub scene_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetSceneIdResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetSceneIdResponse {
    fn default() -> &'a GetSceneIdResponse {
        <GetSceneIdResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetSceneIdResponse {
    pub fn new() -> GetSceneIdResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scene_id",
            |m: &GetSceneIdResponse| { &m.scene_id },
            |m: &mut GetSceneIdResponse| { &mut m.scene_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetSceneIdResponse>(
            "GetSceneIdResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetSceneIdResponse {
    const NAME: &'static str = "GetSceneIdResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.scene_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.scene_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scene_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.scene_id.is_empty() {
            os.write_string(1, &self.scene_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetSceneIdResponse {
        GetSceneIdResponse::new()
    }

    fn clear(&mut self) {
        self.scene_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetSceneIdResponse {
        static instance: GetSceneIdResponse = GetSceneIdResponse {
            scene_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetSceneIdResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetSceneIdResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetSceneIdResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetSceneIdResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetIsEmptyRequest)
pub struct GetIsEmptyRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetIsEmptyRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsEmptyRequest {
    fn default() -> &'a GetIsEmptyRequest {
        <GetIsEmptyRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIsEmptyRequest {
    pub fn new() -> GetIsEmptyRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIsEmptyRequest>(
            "GetIsEmptyRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIsEmptyRequest {
    const NAME: &'static str = "GetIsEmptyRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsEmptyRequest {
        GetIsEmptyRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsEmptyRequest {
        static instance: GetIsEmptyRequest = GetIsEmptyRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIsEmptyRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIsEmptyRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIsEmptyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIsEmptyRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetIsEmptyResponse)
pub struct GetIsEmptyResponse {
    // message fields
    // @@protoc_insertion_point(field:GetIsEmptyResponse.is_empty)
    pub is_empty: bool,
    // special fields
    // @@protoc_insertion_point(special_field:GetIsEmptyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetIsEmptyResponse {
    fn default() -> &'a GetIsEmptyResponse {
        <GetIsEmptyResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIsEmptyResponse {
    pub fn new() -> GetIsEmptyResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_empty",
            |m: &GetIsEmptyResponse| { &m.is_empty },
            |m: &mut GetIsEmptyResponse| { &mut m.is_empty },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetIsEmptyResponse>(
            "GetIsEmptyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetIsEmptyResponse {
    const NAME: &'static str = "GetIsEmptyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_empty = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_empty != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_empty != false {
            os.write_bool(1, self.is_empty)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetIsEmptyResponse {
        GetIsEmptyResponse::new()
    }

    fn clear(&mut self) {
        self.is_empty = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetIsEmptyResponse {
        static instance: GetIsEmptyResponse = GetIsEmptyResponse {
            is_empty: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetIsEmptyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetIsEmptyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetIsEmptyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIsEmptyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20kernel/apis/ParcelIdentity.proto\x1a\x1bcommon/ContentMapping.prot\
    o\"w\n\x10MappingsResponse\x12\x1b\n\tparcel_id\x18\x01\x20\x01(\tR\x08p\
    arcelId\x12\x19\n\x08root_cid\x18\x02\x20\x01(\tR\x07rootCid\x12+\n\x08c\
    ontents\x18\x03\x20\x03(\x0b2\x0f.ContentMappingR\x08contents\"\xce\x01\
    \n\x04Land\x12\x19\n\x08scene_id\x18\x01\x20\x01(\tR\x07sceneId\x12&\n\
    \x0fscene_json_data\x18\x02\x20\x01(\tR\rsceneJsonData\x12\x19\n\x08base\
    _url\x18\x03\x20\x01(\tR\x07baseUrl\x12(\n\x10base_url_bundles\x18\x04\
    \x20\x01(\tR\x0ebaseUrlBundles\x12>\n\x11mappings_response\x18\x05\x20\
    \x01(\x0b2\x11.MappingsResponseR\x10mappingsResponse\"\x12\n\x10GetParce\
    lRequest\"@\n\x11GetParcelResponse\x12\x19\n\x04land\x18\x01\x20\x01(\
    \x0b2\x05.LandR\x04land\x12\x10\n\x03cid\x18\x02\x20\x01(\tR\x03cid\"\
    \x13\n\x11GetSceneIdRequest\"/\n\x12GetSceneIdResponse\x12\x19\n\x08scen\
    e_id\x18\x01\x20\x01(\tR\x07sceneId\"\x13\n\x11GetIsEmptyRequest\"/\n\
    \x12GetIsEmptyResponse\x12\x19\n\x08is_empty\x18\x01\x20\x01(\x08R\x07is\
    Empty2\xbf\x01\n\x15ParcelIdentityService\x124\n\tGetParcel\x12\x11.GetP\
    arcelRequest\x1a\x12.GetParcelResponse\"\0\x127\n\nGetSceneId\x12\x12.Ge\
    tSceneIdRequest\x1a\x13.GetSceneIdResponse\"\0\x127\n\nGetIsEmpty\x12\
    \x12.GetIsEmptyRequest\x1a\x13.GetIsEmptyResponse\"\0J\xb9\x08\n\x06\x12\
    \x04\0\0&\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\
    \x02\0%\n\n\n\x02\x04\0\x12\x04\x04\0\x08\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x04\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x19\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x05\x0b\x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x01\x12\x03\x06\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x06\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x13\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03\x06\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\
    \x07\x04)\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x07\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03\x07\r\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x07\x1c$\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07'(\n\n\n\x02\x04\
    \x01\x12\x04\n\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x0c\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0b\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\
    \x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\x0b\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03\x0b\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0c\x04\x1f\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0c\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0c\x0b\x1a\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0c\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\r\
    \x04\x18\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03\r\x0b\x13\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\r\x16\x17\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0e\x04\x20\n\x0c\n\
    \x05\x04\x01\x02\x03\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\x01\x02\x03\
    \x01\x12\x03\x0e\x0b\x1b\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x0e\x1e\
    \x1f\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x0f\x04+\n\x0c\n\x05\x04\x01\
    \x02\x04\x06\x12\x03\x0f\x04\x14\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\
    \x0f\x15&\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x0f)*\n\t\n\x02\x04\
    \x02\x12\x03\x12\0\x1b\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\x18\n\n\n\
    \x02\x04\x03\x12\x04\x13\0\x16\x01\n\n\n\x03\x04\x03\x01\x12\x03\x13\x08\
    \x19\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x14\x04\x12\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x03\x14\x04\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x14\
    \t\r\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x14\x10\x11\n\x0b\n\x04\x04\
    \x03\x02\x01\x12\x03\x15\x04\x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\
    \x15\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x15\x0b\x0e\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03\x15\x11\x12\n\t\n\x02\x04\x04\x12\x03\
    \x18\0\x1c\n\n\n\x03\x04\x04\x01\x12\x03\x18\x08\x19\n\n\n\x02\x04\x05\
    \x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\x05\x01\x12\x03\x19\x08\x1a\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03\x1a\x04\x18\n\x0c\n\x05\x04\x05\x02\0\x05\x12\
    \x03\x1a\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x1a\x0b\x13\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03\x1a\x16\x17\n\t\n\x02\x04\x06\x12\x03\x1d\
    \0\x1c\n\n\n\x03\x04\x06\x01\x12\x03\x1d\x08\x19\n\n\n\x02\x04\x07\x12\
    \x04\x1e\0\x20\x01\n\n\n\x03\x04\x07\x01\x12\x03\x1e\x08\x1a\n\x0b\n\x04\
    \x04\x07\x02\0\x12\x03\x1f\x04\x16\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03\
    \x1f\x04\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03\x1f\t\x11\n\x0c\n\x05\
    \x04\x07\x02\0\x03\x12\x03\x1f\x14\x15\n\n\n\x02\x06\0\x12\x04\"\0&\x01\
    \n\n\n\x03\x06\0\x01\x12\x03\"\x08\x1d\n\x0b\n\x04\x06\0\x02\0\x12\x03#\
    \x04B\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03#\x08\x11\n\x0c\n\x05\x06\0\x02\
    \0\x02\x12\x03#\x12\"\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03#->\n\x0b\n\x04\
    \x06\0\x02\x01\x12\x03$\x04E\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03$\x08\
    \x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03$\x13$\n\x0c\n\x05\x06\0\x02\
    \x01\x03\x12\x03$/A\n\x0b\n\x04\x06\0\x02\x02\x12\x03%\x04E\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03%\x08\x12\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03%\x13$\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03%/Ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ContentMapping::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MappingsResponse::generated_message_descriptor_data());
            messages.push(Land::generated_message_descriptor_data());
            messages.push(GetParcelRequest::generated_message_descriptor_data());
            messages.push(GetParcelResponse::generated_message_descriptor_data());
            messages.push(GetSceneIdRequest::generated_message_descriptor_data());
            messages.push(GetSceneIdResponse::generated_message_descriptor_data());
            messages.push(GetIsEmptyRequest::generated_message_descriptor_data());
            messages.push(GetIsEmptyResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
