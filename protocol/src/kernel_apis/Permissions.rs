// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/Permissions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PermissionResponse)
pub struct PermissionResponse {
    // message fields
    // @@protoc_insertion_point(field:PermissionResponse.has_permission)
    pub has_permission: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PermissionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PermissionResponse {
    fn default() -> &'a PermissionResponse {
        <PermissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl PermissionResponse {
    pub fn new() -> PermissionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "has_permission",
            |m: &PermissionResponse| { &m.has_permission },
            |m: &mut PermissionResponse| { &mut m.has_permission },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PermissionResponse>(
            "PermissionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PermissionResponse {
    const NAME: &'static str = "PermissionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.has_permission = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.has_permission != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.has_permission != false {
            os.write_bool(1, self.has_permission)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PermissionResponse {
        PermissionResponse::new()
    }

    fn clear(&mut self) {
        self.has_permission = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PermissionResponse {
        static instance: PermissionResponse = PermissionResponse {
            has_permission: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PermissionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PermissionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PermissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PermissionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:HasPermissionRequest)
pub struct HasPermissionRequest {
    // message fields
    // @@protoc_insertion_point(field:HasPermissionRequest.permission)
    pub permission: ::protobuf::EnumOrUnknown<PermissionItem>,
    // special fields
    // @@protoc_insertion_point(special_field:HasPermissionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HasPermissionRequest {
    fn default() -> &'a HasPermissionRequest {
        <HasPermissionRequest as ::protobuf::Message>::default_instance()
    }
}

impl HasPermissionRequest {
    pub fn new() -> HasPermissionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "permission",
            |m: &HasPermissionRequest| { &m.permission },
            |m: &mut HasPermissionRequest| { &mut m.permission },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HasPermissionRequest>(
            "HasPermissionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HasPermissionRequest {
    const NAME: &'static str = "HasPermissionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.permission = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.permission != ::protobuf::EnumOrUnknown::new(PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE) {
            my_size += ::protobuf::rt::int32_size(1, self.permission.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.permission != ::protobuf::EnumOrUnknown::new(PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.permission))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HasPermissionRequest {
        HasPermissionRequest::new()
    }

    fn clear(&mut self) {
        self.permission = ::protobuf::EnumOrUnknown::new(PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HasPermissionRequest {
        static instance: HasPermissionRequest = HasPermissionRequest {
            permission: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HasPermissionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HasPermissionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HasPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HasPermissionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:HasManyPermissionRequest)
pub struct HasManyPermissionRequest {
    // message fields
    // @@protoc_insertion_point(field:HasManyPermissionRequest.permissions)
    pub permissions: ::std::vec::Vec<::protobuf::EnumOrUnknown<PermissionItem>>,
    // special fields
    // @@protoc_insertion_point(special_field:HasManyPermissionRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HasManyPermissionRequest {
    fn default() -> &'a HasManyPermissionRequest {
        <HasManyPermissionRequest as ::protobuf::Message>::default_instance()
    }
}

impl HasManyPermissionRequest {
    pub fn new() -> HasManyPermissionRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "permissions",
            |m: &HasManyPermissionRequest| { &m.permissions },
            |m: &mut HasManyPermissionRequest| { &mut m.permissions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HasManyPermissionRequest>(
            "HasManyPermissionRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HasManyPermissionRequest {
    const NAME: &'static str = "HasManyPermissionRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.permissions.push(is.read_enum_or_unknown()?);
                },
                10 => {
                    ::protobuf::rt::read_repeated_packed_enum_or_unknown_into(is, &mut self.permissions)?
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.permissions {
            my_size += ::protobuf::rt::int32_size(1, value.value());
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.permissions {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(v))?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HasManyPermissionRequest {
        HasManyPermissionRequest::new()
    }

    fn clear(&mut self) {
        self.permissions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HasManyPermissionRequest {
        static instance: HasManyPermissionRequest = HasManyPermissionRequest {
            permissions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HasManyPermissionRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HasManyPermissionRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HasManyPermissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HasManyPermissionRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:HasManyPermissionResponse)
pub struct HasManyPermissionResponse {
    // message fields
    // @@protoc_insertion_point(field:HasManyPermissionResponse.has_many_permission)
    pub has_many_permission: ::std::vec::Vec<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:HasManyPermissionResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a HasManyPermissionResponse {
    fn default() -> &'a HasManyPermissionResponse {
        <HasManyPermissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl HasManyPermissionResponse {
    pub fn new() -> HasManyPermissionResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "has_many_permission",
            |m: &HasManyPermissionResponse| { &m.has_many_permission },
            |m: &mut HasManyPermissionResponse| { &mut m.has_many_permission },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<HasManyPermissionResponse>(
            "HasManyPermissionResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for HasManyPermissionResponse {
    const NAME: &'static str = "HasManyPermissionResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_bool_into(&mut self.has_many_permission)?;
                },
                8 => {
                    self.has_many_permission.push(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += 2 * self.has_many_permission.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.has_many_permission {
            os.write_bool(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> HasManyPermissionResponse {
        HasManyPermissionResponse::new()
    }

    fn clear(&mut self) {
        self.has_many_permission.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static HasManyPermissionResponse {
        static instance: HasManyPermissionResponse = HasManyPermissionResponse {
            has_many_permission: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for HasManyPermissionResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("HasManyPermissionResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for HasManyPermissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HasManyPermissionResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:PermissionItem)
pub enum PermissionItem {
    // @@protoc_insertion_point(enum_value:PermissionItem.ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE)
    ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE = 0,
    // @@protoc_insertion_point(enum_value:PermissionItem.ALLOW_TO_TRIGGER_AVATAR_EMOTE)
    ALLOW_TO_TRIGGER_AVATAR_EMOTE = 1,
    // @@protoc_insertion_point(enum_value:PermissionItem.USE_WEB3_API)
    USE_WEB3_API = 2,
    // @@protoc_insertion_point(enum_value:PermissionItem.USE_WEBSOCKET)
    USE_WEBSOCKET = 3,
    // @@protoc_insertion_point(enum_value:PermissionItem.USE_FETCH)
    USE_FETCH = 4,
}

impl ::protobuf::Enum for PermissionItem {
    const NAME: &'static str = "PermissionItem";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PermissionItem> {
        match value {
            0 => ::std::option::Option::Some(PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE),
            1 => ::std::option::Option::Some(PermissionItem::ALLOW_TO_TRIGGER_AVATAR_EMOTE),
            2 => ::std::option::Option::Some(PermissionItem::USE_WEB3_API),
            3 => ::std::option::Option::Some(PermissionItem::USE_WEBSOCKET),
            4 => ::std::option::Option::Some(PermissionItem::USE_FETCH),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [PermissionItem] = &[
        PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE,
        PermissionItem::ALLOW_TO_TRIGGER_AVATAR_EMOTE,
        PermissionItem::USE_WEB3_API,
        PermissionItem::USE_WEBSOCKET,
        PermissionItem::USE_FETCH,
    ];
}

impl ::protobuf::EnumFull for PermissionItem {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("PermissionItem").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for PermissionItem {
    fn default() -> Self {
        PermissionItem::ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE
    }
}

impl PermissionItem {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<PermissionItem>("PermissionItem")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dkernel/apis/Permissions.proto\";\n\x12PermissionResponse\x12%\n\
    \x0ehas_permission\x18\x01\x20\x01(\x08R\rhasPermission\"G\n\x14HasPermi\
    ssionRequest\x12/\n\npermission\x18\x01\x20\x01(\x0e2\x0f.PermissionItem\
    R\npermission\"M\n\x18HasManyPermissionRequest\x121\n\x0bpermissions\x18\
    \x01\x20\x03(\x0e2\x0f.PermissionItemR\x0bpermissions\"K\n\x19HasManyPer\
    missionResponse\x12.\n\x13has_many_permission\x18\x01\x20\x03(\x08R\x11h\
    asManyPermission*\x8e\x01\n\x0ePermissionItem\x12%\n!ALLOW_TO_MOVE_PLAYE\
    R_INSIDE_SCENE\x10\0\x12!\n\x1dALLOW_TO_TRIGGER_AVATAR_EMOTE\x10\x01\x12\
    \x10\n\x0cUSE_WEB3_API\x10\x02\x12\x11\n\rUSE_WEBSOCKET\x10\x03\x12\r\n\
    \tUSE_FETCH\x10\x042\xa2\x01\n\x12PermissionsService\x12=\n\rHasPermissi\
    on\x12\x15.HasPermissionRequest\x1a\x13.PermissionResponse\"\0\x12M\n\
    \x12HasManyPermissions\x12\x19.HasManyPermissionRequest\x1a\x1a.HasManyP\
    ermissionResponse\"\0J\xd5\x05\n\x06\x12\x04\0\0\x1d\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\x02\0\x08\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x02\x05\x13\n\x0b\n\x04\x05\0\x02\0\x12\x03\x03\x04*\n\x0c\
    \n\x05\x05\0\x02\0\x01\x12\x03\x03\x04%\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x03()\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x04\x04&\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\x04\x04!\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04$\
    %\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x05\x04\x15\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\x05\x04\x10\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\
    \x13\x14\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x06\x04\x16\n\x0c\n\x05\x05\0\
    \x02\x03\x01\x12\x03\x06\x04\x11\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\
    \x06\x14\x15\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x07\x04\x12\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\x07\x04\r\n\x0c\n\x05\x05\0\x02\x04\x02\x12\
    \x03\x07\x10\x11\n\n\n\x02\x04\0\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\n\x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x04\x1c\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x0b\x04\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x0b\t\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0b\x1a\x1b\n\n\n\x02\
    \x04\x01\x12\x04\x0e\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x1c\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0f\x04\"\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x0f\x04\x12\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0f\x13\
    \x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x20!\n\n\n\x02\x04\x02\
    \x12\x04\x12\0\x14\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\x20\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x13\x04,\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\x13\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x13\r\x1b\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x13\x1c'\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x13*+\n\n\n\x02\x04\x03\x12\x04\x16\0\x18\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x16\x08!\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x17\x04*\n\x0c\n\
    \x05\x04\x03\x02\0\x04\x12\x03\x17\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\x17\r\x11\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x17\x12%\n\x0c\
    \n\x05\x04\x03\x02\0\x03\x12\x03\x17()\n\n\n\x02\x06\0\x12\x04\x1a\0\x1d\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x1a\x08\x1a\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x1b\x04K\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1b\x08\x15\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x1b\x16*\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x1b5G\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x1c\x04[\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x1c\x08\x1a\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x1c\x1b3\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x1c>Wb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(PermissionResponse::generated_message_descriptor_data());
            messages.push(HasPermissionRequest::generated_message_descriptor_data());
            messages.push(HasManyPermissionRequest::generated_message_descriptor_data());
            messages.push(HasManyPermissionResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(PermissionItem::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
