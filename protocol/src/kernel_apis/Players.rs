// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/Players.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Player)
pub struct Player {
    // message fields
    // @@protoc_insertion_point(field:Player.user_id)
    pub user_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Player.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Player {
    fn default() -> &'a Player {
        <Player as ::protobuf::Message>::default_instance()
    }
}

impl Player {
    pub fn new() -> Player {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &Player| { &m.user_id },
            |m: &mut Player| { &mut m.user_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Player>(
            "Player",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Player {
    const NAME: &'static str = "Player";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.user_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.user_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.user_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.user_id.is_empty() {
            os.write_string(1, &self.user_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Player {
        Player::new()
    }

    fn clear(&mut self) {
        self.user_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Player {
        static instance: Player = Player {
            user_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Player {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Player").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Player {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Player {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlayersGetUserDataResponse)
pub struct PlayersGetUserDataResponse {
    // message fields
    // @@protoc_insertion_point(field:PlayersGetUserDataResponse.data)
    pub data: ::protobuf::MessageField<super::UserData::UserData>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayersGetUserDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayersGetUserDataResponse {
    fn default() -> &'a PlayersGetUserDataResponse {
        <PlayersGetUserDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl PlayersGetUserDataResponse {
    pub fn new() -> PlayersGetUserDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::UserData::UserData>(
            "data",
            |m: &PlayersGetUserDataResponse| { &m.data },
            |m: &mut PlayersGetUserDataResponse| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayersGetUserDataResponse>(
            "PlayersGetUserDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayersGetUserDataResponse {
    const NAME: &'static str = "PlayersGetUserDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.data)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayersGetUserDataResponse {
        PlayersGetUserDataResponse::new()
    }

    fn clear(&mut self) {
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayersGetUserDataResponse {
        static instance: PlayersGetUserDataResponse = PlayersGetUserDataResponse {
            data: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayersGetUserDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayersGetUserDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayersGetUserDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayersGetUserDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PlayerListResponse)
pub struct PlayerListResponse {
    // message fields
    // @@protoc_insertion_point(field:PlayerListResponse.players)
    pub players: ::std::vec::Vec<Player>,
    // special fields
    // @@protoc_insertion_point(special_field:PlayerListResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PlayerListResponse {
    fn default() -> &'a PlayerListResponse {
        <PlayerListResponse as ::protobuf::Message>::default_instance()
    }
}

impl PlayerListResponse {
    pub fn new() -> PlayerListResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "players",
            |m: &PlayerListResponse| { &m.players },
            |m: &mut PlayerListResponse| { &mut m.players },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PlayerListResponse>(
            "PlayerListResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PlayerListResponse {
    const NAME: &'static str = "PlayerListResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.players.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.players {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.players {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PlayerListResponse {
        PlayerListResponse::new()
    }

    fn clear(&mut self) {
        self.players.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PlayerListResponse {
        static instance: PlayerListResponse = PlayerListResponse {
            players: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PlayerListResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PlayerListResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PlayerListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerListResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPlayerDataRequest)
pub struct GetPlayerDataRequest {
    // message fields
    // @@protoc_insertion_point(field:GetPlayerDataRequest.user_id)
    pub user_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetPlayerDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayerDataRequest {
    fn default() -> &'a GetPlayerDataRequest {
        <GetPlayerDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayerDataRequest {
    pub fn new() -> GetPlayerDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &GetPlayerDataRequest| { &m.user_id },
            |m: &mut GetPlayerDataRequest| { &mut m.user_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlayerDataRequest>(
            "GetPlayerDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlayerDataRequest {
    const NAME: &'static str = "GetPlayerDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.user_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.user_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.user_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.user_id.is_empty() {
            os.write_string(1, &self.user_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayerDataRequest {
        GetPlayerDataRequest::new()
    }

    fn clear(&mut self) {
        self.user_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayerDataRequest {
        static instance: GetPlayerDataRequest = GetPlayerDataRequest {
            user_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlayerDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlayerDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlayerDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlayerDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPlayersInSceneRequest)
pub struct GetPlayersInSceneRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetPlayersInSceneRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlayersInSceneRequest {
    fn default() -> &'a GetPlayersInSceneRequest {
        <GetPlayersInSceneRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlayersInSceneRequest {
    pub fn new() -> GetPlayersInSceneRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlayersInSceneRequest>(
            "GetPlayersInSceneRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlayersInSceneRequest {
    const NAME: &'static str = "GetPlayersInSceneRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlayersInSceneRequest {
        GetPlayersInSceneRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlayersInSceneRequest {
        static instance: GetPlayersInSceneRequest = GetPlayersInSceneRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlayersInSceneRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlayersInSceneRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlayersInSceneRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlayersInSceneRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetConnectedPlayersRequest)
pub struct GetConnectedPlayersRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetConnectedPlayersRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetConnectedPlayersRequest {
    fn default() -> &'a GetConnectedPlayersRequest {
        <GetConnectedPlayersRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetConnectedPlayersRequest {
    pub fn new() -> GetConnectedPlayersRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetConnectedPlayersRequest>(
            "GetConnectedPlayersRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetConnectedPlayersRequest {
    const NAME: &'static str = "GetConnectedPlayersRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetConnectedPlayersRequest {
        GetConnectedPlayersRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetConnectedPlayersRequest {
        static instance: GetConnectedPlayersRequest = GetConnectedPlayersRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetConnectedPlayersRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetConnectedPlayersRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetConnectedPlayersRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetConnectedPlayersRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19kernel/apis/Players.proto\x1a\x15common/UserData.proto\"!\n\x06Pla\
    yer\x12\x17\n\x07user_id\x18\x01\x20\x01(\tR\x06userId\"I\n\x1aPlayersGe\
    tUserDataResponse\x12\"\n\x04data\x18\x01\x20\x01(\x0b2\t.UserDataH\0R\
    \x04data\x88\x01\x01B\x07\n\x05_data\"7\n\x12PlayerListResponse\x12!\n\
    \x07players\x18\x01\x20\x03(\x0b2\x07.PlayerR\x07players\"/\n\x14GetPlay\
    erDataRequest\x12\x17\n\x07user_id\x18\x01\x20\x01(\tR\x06userId\"\x1a\n\
    \x18GetPlayersInSceneRequest\"\x1c\n\x1aGetConnectedPlayersRequest2\xe9\
    \x01\n\x0ePlayersService\x12E\n\rGetPlayerData\x12\x15.GetPlayerDataRequ\
    est\x1a\x1b.PlayersGetUserDataResponse\"\0\x12E\n\x11GetPlayersInScene\
    \x12\x19.GetPlayersInSceneRequest\x1a\x13.PlayerListResponse\"\0\x12I\n\
    \x13GetConnectedPlayers\x12\x1b.GetConnectedPlayersRequest\x1a\x13.Playe\
    rListResponse\"\0J\xe0\x04\n\x06\x12\x04\0\0\x1b\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x1f\n\n\n\x02\x04\0\x12\x04\
    \x04\0\x06\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x0e\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x04\x17\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x04\n\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\x12\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05\x15\x16\n\n\n\x02\x04\x01\x12\x04\x08\0\n\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x08\x08\"\n\x0b\n\x04\x04\x01\x02\0\x12\x03\t\x04\
    \x1f\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\t\x04\x0c\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03\t\r\x15\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\t\x16\
    \x1a\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\t\x1d\x1e\n\n\n\x02\x04\x02\
    \x12\x04\x0c\0\x0e\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0c\x08\x1a\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\r\x04\x20\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03\r\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\r\r\x13\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03\r\x14\x1b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03\r\x1e\x1f\n\n\n\x02\x04\x03\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x03\
    \x01\x12\x03\x10\x08\x1c\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x11\x04\x17\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x03\x02\0\
    \x01\x12\x03\x11\x0b\x12\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x11\x15\
    \x16\n\t\n\x02\x04\x04\x12\x03\x14\0#\n\n\n\x03\x04\x04\x01\x12\x03\x14\
    \x08\x20\n\t\n\x02\x04\x05\x12\x03\x15\0%\n\n\n\x03\x04\x05\x01\x12\x03\
    \x15\x08\"\n\n\n\x02\x06\0\x12\x04\x17\0\x1b\x01\n\n\n\x03\x06\0\x01\x12\
    \x03\x17\x08\x16\n\x0b\n\x04\x06\0\x02\0\x12\x03\x18\x04S\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x18\x08\x15\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x18\x16*\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x185O\n\x0b\n\x04\x06\0\
    \x02\x01\x12\x03\x19\x04S\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x19\x08\
    \x19\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x19\x1a2\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x19=O\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x1a\x04X\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x1a\x08\x1b\n\x0c\n\x05\x06\0\x02\
    \x02\x02\x12\x03\x1a\x1c6\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1aBTb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::UserData::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(Player::generated_message_descriptor_data());
            messages.push(PlayersGetUserDataResponse::generated_message_descriptor_data());
            messages.push(PlayerListResponse::generated_message_descriptor_data());
            messages.push(GetPlayerDataRequest::generated_message_descriptor_data());
            messages.push(GetPlayersInSceneRequest::generated_message_descriptor_data());
            messages.push(GetConnectedPlayersRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
