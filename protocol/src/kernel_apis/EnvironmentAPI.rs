// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/apis/EnvironmentAPI.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MinimalRunnableEntity)
pub struct MinimalRunnableEntity {
    // message fields
    // @@protoc_insertion_point(field:MinimalRunnableEntity.content)
    pub content: ::std::vec::Vec<super::ContentMapping::ContentMapping>,
    // @@protoc_insertion_point(field:MinimalRunnableEntity.metadata_json)
    pub metadata_json: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:MinimalRunnableEntity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MinimalRunnableEntity {
    fn default() -> &'a MinimalRunnableEntity {
        <MinimalRunnableEntity as ::protobuf::Message>::default_instance()
    }
}

impl MinimalRunnableEntity {
    pub fn new() -> MinimalRunnableEntity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "content",
            |m: &MinimalRunnableEntity| { &m.content },
            |m: &mut MinimalRunnableEntity| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "metadata_json",
            |m: &MinimalRunnableEntity| { &m.metadata_json },
            |m: &mut MinimalRunnableEntity| { &mut m.metadata_json },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MinimalRunnableEntity>(
            "MinimalRunnableEntity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MinimalRunnableEntity {
    const NAME: &'static str = "MinimalRunnableEntity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content.push(is.read_message()?);
                },
                18 => {
                    self.metadata_json = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.content {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.metadata_json.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.metadata_json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.content {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        if !self.metadata_json.is_empty() {
            os.write_string(2, &self.metadata_json)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MinimalRunnableEntity {
        MinimalRunnableEntity::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.metadata_json.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MinimalRunnableEntity {
        static instance: MinimalRunnableEntity = MinimalRunnableEntity {
            content: ::std::vec::Vec::new(),
            metadata_json: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MinimalRunnableEntity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MinimalRunnableEntity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MinimalRunnableEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MinimalRunnableEntity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BootstrapDataResponse)
pub struct BootstrapDataResponse {
    // message fields
    // @@protoc_insertion_point(field:BootstrapDataResponse.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:BootstrapDataResponse.base_url)
    pub base_url: ::std::string::String,
    // @@protoc_insertion_point(field:BootstrapDataResponse.entity)
    pub entity: ::protobuf::MessageField<MinimalRunnableEntity>,
    // @@protoc_insertion_point(field:BootstrapDataResponse.use_f_p_s_throttling)
    pub use_f_p_s_throttling: bool,
    // special fields
    // @@protoc_insertion_point(special_field:BootstrapDataResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BootstrapDataResponse {
    fn default() -> &'a BootstrapDataResponse {
        <BootstrapDataResponse as ::protobuf::Message>::default_instance()
    }
}

impl BootstrapDataResponse {
    pub fn new() -> BootstrapDataResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &BootstrapDataResponse| { &m.id },
            |m: &mut BootstrapDataResponse| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "base_url",
            |m: &BootstrapDataResponse| { &m.base_url },
            |m: &mut BootstrapDataResponse| { &mut m.base_url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MinimalRunnableEntity>(
            "entity",
            |m: &BootstrapDataResponse| { &m.entity },
            |m: &mut BootstrapDataResponse| { &mut m.entity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "use_f_p_s_throttling",
            |m: &BootstrapDataResponse| { &m.use_f_p_s_throttling },
            |m: &mut BootstrapDataResponse| { &mut m.use_f_p_s_throttling },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BootstrapDataResponse>(
            "BootstrapDataResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BootstrapDataResponse {
    const NAME: &'static str = "BootstrapDataResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                34 => {
                    self.base_url = is.read_string()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.entity)?;
                },
                40 => {
                    self.use_f_p_s_throttling = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.base_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.base_url);
        }
        if let Some(v) = self.entity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.use_f_p_s_throttling != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.base_url.is_empty() {
            os.write_string(4, &self.base_url)?;
        }
        if let Some(v) = self.entity.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if self.use_f_p_s_throttling != false {
            os.write_bool(5, self.use_f_p_s_throttling)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BootstrapDataResponse {
        BootstrapDataResponse::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.base_url.clear();
        self.entity.clear();
        self.use_f_p_s_throttling = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BootstrapDataResponse {
        static instance: BootstrapDataResponse = BootstrapDataResponse {
            id: ::std::string::String::new(),
            base_url: ::std::string::String::new(),
            entity: ::protobuf::MessageField::none(),
            use_f_p_s_throttling: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BootstrapDataResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BootstrapDataResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BootstrapDataResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BootstrapDataResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PreviewModeResponse)
pub struct PreviewModeResponse {
    // message fields
    // @@protoc_insertion_point(field:PreviewModeResponse.is_preview)
    pub is_preview: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PreviewModeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PreviewModeResponse {
    fn default() -> &'a PreviewModeResponse {
        <PreviewModeResponse as ::protobuf::Message>::default_instance()
    }
}

impl PreviewModeResponse {
    pub fn new() -> PreviewModeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_preview",
            |m: &PreviewModeResponse| { &m.is_preview },
            |m: &mut PreviewModeResponse| { &mut m.is_preview },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PreviewModeResponse>(
            "PreviewModeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PreviewModeResponse {
    const NAME: &'static str = "PreviewModeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_preview = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_preview != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_preview != false {
            os.write_bool(1, self.is_preview)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PreviewModeResponse {
        PreviewModeResponse::new()
    }

    fn clear(&mut self) {
        self.is_preview = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PreviewModeResponse {
        static instance: PreviewModeResponse = PreviewModeResponse {
            is_preview: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PreviewModeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PreviewModeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PreviewModeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PreviewModeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AreUnsafeRequestAllowedResponse)
pub struct AreUnsafeRequestAllowedResponse {
    // message fields
    // @@protoc_insertion_point(field:AreUnsafeRequestAllowedResponse.status)
    pub status: bool,
    // special fields
    // @@protoc_insertion_point(special_field:AreUnsafeRequestAllowedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AreUnsafeRequestAllowedResponse {
    fn default() -> &'a AreUnsafeRequestAllowedResponse {
        <AreUnsafeRequestAllowedResponse as ::protobuf::Message>::default_instance()
    }
}

impl AreUnsafeRequestAllowedResponse {
    pub fn new() -> AreUnsafeRequestAllowedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &AreUnsafeRequestAllowedResponse| { &m.status },
            |m: &mut AreUnsafeRequestAllowedResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AreUnsafeRequestAllowedResponse>(
            "AreUnsafeRequestAllowedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AreUnsafeRequestAllowedResponse {
    const NAME: &'static str = "AreUnsafeRequestAllowedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.status = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AreUnsafeRequestAllowedResponse {
        AreUnsafeRequestAllowedResponse::new()
    }

    fn clear(&mut self) {
        self.status = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AreUnsafeRequestAllowedResponse {
        static instance: AreUnsafeRequestAllowedResponse = AreUnsafeRequestAllowedResponse {
            status: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AreUnsafeRequestAllowedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AreUnsafeRequestAllowedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AreUnsafeRequestAllowedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AreUnsafeRequestAllowedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPlatformResponse)
pub struct GetPlatformResponse {
    // message fields
    // @@protoc_insertion_point(field:GetPlatformResponse.platform)
    pub platform: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:GetPlatformResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlatformResponse {
    fn default() -> &'a GetPlatformResponse {
        <GetPlatformResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetPlatformResponse {
    pub fn new() -> GetPlatformResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "platform",
            |m: &GetPlatformResponse| { &m.platform },
            |m: &mut GetPlatformResponse| { &mut m.platform },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlatformResponse>(
            "GetPlatformResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlatformResponse {
    const NAME: &'static str = "GetPlatformResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.platform = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.platform.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.platform);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.platform.is_empty() {
            os.write_string(1, &self.platform)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlatformResponse {
        GetPlatformResponse::new()
    }

    fn clear(&mut self) {
        self.platform.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlatformResponse {
        static instance: GetPlatformResponse = GetPlatformResponse {
            platform: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlatformResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlatformResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlatformResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlatformResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:EnvironmentRealm)
pub struct EnvironmentRealm {
    // message fields
    // @@protoc_insertion_point(field:EnvironmentRealm.domain)
    pub domain: ::std::string::String,
    // @@protoc_insertion_point(field:EnvironmentRealm.layer)
    pub layer: ::std::string::String,
    // @@protoc_insertion_point(field:EnvironmentRealm.room)
    pub room: ::std::string::String,
    // @@protoc_insertion_point(field:EnvironmentRealm.server_name)
    pub server_name: ::std::string::String,
    // @@protoc_insertion_point(field:EnvironmentRealm.display_name)
    pub display_name: ::std::string::String,
    // @@protoc_insertion_point(field:EnvironmentRealm.protocol)
    pub protocol: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:EnvironmentRealm.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EnvironmentRealm {
    fn default() -> &'a EnvironmentRealm {
        <EnvironmentRealm as ::protobuf::Message>::default_instance()
    }
}

impl EnvironmentRealm {
    pub fn new() -> EnvironmentRealm {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "domain",
            |m: &EnvironmentRealm| { &m.domain },
            |m: &mut EnvironmentRealm| { &mut m.domain },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "layer",
            |m: &EnvironmentRealm| { &m.layer },
            |m: &mut EnvironmentRealm| { &mut m.layer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "room",
            |m: &EnvironmentRealm| { &m.room },
            |m: &mut EnvironmentRealm| { &mut m.room },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "server_name",
            |m: &EnvironmentRealm| { &m.server_name },
            |m: &mut EnvironmentRealm| { &mut m.server_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display_name",
            |m: &EnvironmentRealm| { &m.display_name },
            |m: &mut EnvironmentRealm| { &mut m.display_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "protocol",
            |m: &EnvironmentRealm| { &m.protocol },
            |m: &mut EnvironmentRealm| { &mut m.protocol },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EnvironmentRealm>(
            "EnvironmentRealm",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EnvironmentRealm {
    const NAME: &'static str = "EnvironmentRealm";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.domain = is.read_string()?;
                },
                18 => {
                    self.layer = is.read_string()?;
                },
                26 => {
                    self.room = is.read_string()?;
                },
                34 => {
                    self.server_name = is.read_string()?;
                },
                42 => {
                    self.display_name = is.read_string()?;
                },
                50 => {
                    self.protocol = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        if !self.layer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.layer);
        }
        if !self.room.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.room);
        }
        if !self.server_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.server_name);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.display_name);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        if !self.layer.is_empty() {
            os.write_string(2, &self.layer)?;
        }
        if !self.room.is_empty() {
            os.write_string(3, &self.room)?;
        }
        if !self.server_name.is_empty() {
            os.write_string(4, &self.server_name)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(5, &self.display_name)?;
        }
        if !self.protocol.is_empty() {
            os.write_string(6, &self.protocol)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EnvironmentRealm {
        EnvironmentRealm::new()
    }

    fn clear(&mut self) {
        self.domain.clear();
        self.layer.clear();
        self.room.clear();
        self.server_name.clear();
        self.display_name.clear();
        self.protocol.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EnvironmentRealm {
        static instance: EnvironmentRealm = EnvironmentRealm {
            domain: ::std::string::String::new(),
            layer: ::std::string::String::new(),
            room: ::std::string::String::new(),
            server_name: ::std::string::String::new(),
            display_name: ::std::string::String::new(),
            protocol: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EnvironmentRealm {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EnvironmentRealm").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EnvironmentRealm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvironmentRealm {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetCurrentRealmResponse)
pub struct GetCurrentRealmResponse {
    // message fields
    // @@protoc_insertion_point(field:GetCurrentRealmResponse.current_realm)
    pub current_realm: ::protobuf::MessageField<EnvironmentRealm>,
    // special fields
    // @@protoc_insertion_point(special_field:GetCurrentRealmResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCurrentRealmResponse {
    fn default() -> &'a GetCurrentRealmResponse {
        <GetCurrentRealmResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetCurrentRealmResponse {
    pub fn new() -> GetCurrentRealmResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, EnvironmentRealm>(
            "current_realm",
            |m: &GetCurrentRealmResponse| { &m.current_realm },
            |m: &mut GetCurrentRealmResponse| { &mut m.current_realm },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCurrentRealmResponse>(
            "GetCurrentRealmResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCurrentRealmResponse {
    const NAME: &'static str = "GetCurrentRealmResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.current_realm)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.current_realm.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.current_realm.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCurrentRealmResponse {
        GetCurrentRealmResponse::new()
    }

    fn clear(&mut self) {
        self.current_realm.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCurrentRealmResponse {
        static instance: GetCurrentRealmResponse = GetCurrentRealmResponse {
            current_realm: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCurrentRealmResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCurrentRealmResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCurrentRealmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCurrentRealmResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetExplorerConfigurationResponse)
pub struct GetExplorerConfigurationResponse {
    // message fields
    // @@protoc_insertion_point(field:GetExplorerConfigurationResponse.clientUri)
    pub clientUri: ::std::string::String,
    // @@protoc_insertion_point(field:GetExplorerConfigurationResponse.configurations)
    pub configurations: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:GetExplorerConfigurationResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetExplorerConfigurationResponse {
    fn default() -> &'a GetExplorerConfigurationResponse {
        <GetExplorerConfigurationResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetExplorerConfigurationResponse {
    pub fn new() -> GetExplorerConfigurationResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clientUri",
            |m: &GetExplorerConfigurationResponse| { &m.clientUri },
            |m: &mut GetExplorerConfigurationResponse| { &mut m.clientUri },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "configurations",
            |m: &GetExplorerConfigurationResponse| { &m.configurations },
            |m: &mut GetExplorerConfigurationResponse| { &mut m.configurations },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetExplorerConfigurationResponse>(
            "GetExplorerConfigurationResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetExplorerConfigurationResponse {
    const NAME: &'static str = "GetExplorerConfigurationResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.clientUri = is.read_string()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_string()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.configurations.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.clientUri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.clientUri);
        }
        for (k, v) in &self.configurations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.clientUri.is_empty() {
            os.write_string(1, &self.clientUri)?;
        }
        for (k, v) in &self.configurations {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::string_size(2, &v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetExplorerConfigurationResponse {
        GetExplorerConfigurationResponse::new()
    }

    fn clear(&mut self) {
        self.clientUri.clear();
        self.configurations.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetExplorerConfigurationResponse {
        static instance: ::protobuf::rt::Lazy<GetExplorerConfigurationResponse> = ::protobuf::rt::Lazy::new();
        instance.get(GetExplorerConfigurationResponse::new)
    }
}

impl ::protobuf::MessageFull for GetExplorerConfigurationResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetExplorerConfigurationResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetExplorerConfigurationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExplorerConfigurationResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetDecentralandTimeResponse)
pub struct GetDecentralandTimeResponse {
    // message fields
    // @@protoc_insertion_point(field:GetDecentralandTimeResponse.seconds)
    pub seconds: i32,
    // special fields
    // @@protoc_insertion_point(special_field:GetDecentralandTimeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDecentralandTimeResponse {
    fn default() -> &'a GetDecentralandTimeResponse {
        <GetDecentralandTimeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetDecentralandTimeResponse {
    pub fn new() -> GetDecentralandTimeResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seconds",
            |m: &GetDecentralandTimeResponse| { &m.seconds },
            |m: &mut GetDecentralandTimeResponse| { &mut m.seconds },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDecentralandTimeResponse>(
            "GetDecentralandTimeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDecentralandTimeResponse {
    const NAME: &'static str = "GetDecentralandTimeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seconds = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seconds != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.seconds);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seconds != 0 {
            os.write_int32(1, self.seconds)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDecentralandTimeResponse {
        GetDecentralandTimeResponse::new()
    }

    fn clear(&mut self) {
        self.seconds = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDecentralandTimeResponse {
        static instance: GetDecentralandTimeResponse = GetDecentralandTimeResponse {
            seconds: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDecentralandTimeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDecentralandTimeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDecentralandTimeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDecentralandTimeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetBootstrapDataRequest)
pub struct GetBootstrapDataRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetBootstrapDataRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetBootstrapDataRequest {
    fn default() -> &'a GetBootstrapDataRequest {
        <GetBootstrapDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetBootstrapDataRequest {
    pub fn new() -> GetBootstrapDataRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetBootstrapDataRequest>(
            "GetBootstrapDataRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetBootstrapDataRequest {
    const NAME: &'static str = "GetBootstrapDataRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetBootstrapDataRequest {
        GetBootstrapDataRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetBootstrapDataRequest {
        static instance: GetBootstrapDataRequest = GetBootstrapDataRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetBootstrapDataRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetBootstrapDataRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetBootstrapDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetBootstrapDataRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:IsPreviewModeRequest)
pub struct IsPreviewModeRequest {
    // special fields
    // @@protoc_insertion_point(special_field:IsPreviewModeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IsPreviewModeRequest {
    fn default() -> &'a IsPreviewModeRequest {
        <IsPreviewModeRequest as ::protobuf::Message>::default_instance()
    }
}

impl IsPreviewModeRequest {
    pub fn new() -> IsPreviewModeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IsPreviewModeRequest>(
            "IsPreviewModeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IsPreviewModeRequest {
    const NAME: &'static str = "IsPreviewModeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IsPreviewModeRequest {
        IsPreviewModeRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IsPreviewModeRequest {
        static instance: IsPreviewModeRequest = IsPreviewModeRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IsPreviewModeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IsPreviewModeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IsPreviewModeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsPreviewModeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetPlatformRequest)
pub struct GetPlatformRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetPlatformRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetPlatformRequest {
    fn default() -> &'a GetPlatformRequest {
        <GetPlatformRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetPlatformRequest {
    pub fn new() -> GetPlatformRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetPlatformRequest>(
            "GetPlatformRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetPlatformRequest {
    const NAME: &'static str = "GetPlatformRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetPlatformRequest {
        GetPlatformRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetPlatformRequest {
        static instance: GetPlatformRequest = GetPlatformRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetPlatformRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetPlatformRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetPlatformRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPlatformRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AreUnsafeRequestAllowedRequest)
pub struct AreUnsafeRequestAllowedRequest {
    // special fields
    // @@protoc_insertion_point(special_field:AreUnsafeRequestAllowedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AreUnsafeRequestAllowedRequest {
    fn default() -> &'a AreUnsafeRequestAllowedRequest {
        <AreUnsafeRequestAllowedRequest as ::protobuf::Message>::default_instance()
    }
}

impl AreUnsafeRequestAllowedRequest {
    pub fn new() -> AreUnsafeRequestAllowedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AreUnsafeRequestAllowedRequest>(
            "AreUnsafeRequestAllowedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AreUnsafeRequestAllowedRequest {
    const NAME: &'static str = "AreUnsafeRequestAllowedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AreUnsafeRequestAllowedRequest {
        AreUnsafeRequestAllowedRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AreUnsafeRequestAllowedRequest {
        static instance: AreUnsafeRequestAllowedRequest = AreUnsafeRequestAllowedRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AreUnsafeRequestAllowedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AreUnsafeRequestAllowedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AreUnsafeRequestAllowedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AreUnsafeRequestAllowedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetCurrentRealmRequest)
pub struct GetCurrentRealmRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetCurrentRealmRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetCurrentRealmRequest {
    fn default() -> &'a GetCurrentRealmRequest {
        <GetCurrentRealmRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetCurrentRealmRequest {
    pub fn new() -> GetCurrentRealmRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetCurrentRealmRequest>(
            "GetCurrentRealmRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetCurrentRealmRequest {
    const NAME: &'static str = "GetCurrentRealmRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetCurrentRealmRequest {
        GetCurrentRealmRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetCurrentRealmRequest {
        static instance: GetCurrentRealmRequest = GetCurrentRealmRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetCurrentRealmRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetCurrentRealmRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetCurrentRealmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetCurrentRealmRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetExplorerConfigurationRequest)
pub struct GetExplorerConfigurationRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetExplorerConfigurationRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetExplorerConfigurationRequest {
    fn default() -> &'a GetExplorerConfigurationRequest {
        <GetExplorerConfigurationRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetExplorerConfigurationRequest {
    pub fn new() -> GetExplorerConfigurationRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetExplorerConfigurationRequest>(
            "GetExplorerConfigurationRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetExplorerConfigurationRequest {
    const NAME: &'static str = "GetExplorerConfigurationRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetExplorerConfigurationRequest {
        GetExplorerConfigurationRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetExplorerConfigurationRequest {
        static instance: GetExplorerConfigurationRequest = GetExplorerConfigurationRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetExplorerConfigurationRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetExplorerConfigurationRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetExplorerConfigurationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExplorerConfigurationRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:GetDecentralandTimeRequest)
pub struct GetDecentralandTimeRequest {
    // special fields
    // @@protoc_insertion_point(special_field:GetDecentralandTimeRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetDecentralandTimeRequest {
    fn default() -> &'a GetDecentralandTimeRequest {
        <GetDecentralandTimeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDecentralandTimeRequest {
    pub fn new() -> GetDecentralandTimeRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetDecentralandTimeRequest>(
            "GetDecentralandTimeRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetDecentralandTimeRequest {
    const NAME: &'static str = "GetDecentralandTimeRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetDecentralandTimeRequest {
        GetDecentralandTimeRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetDecentralandTimeRequest {
        static instance: GetDecentralandTimeRequest = GetDecentralandTimeRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetDecentralandTimeRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetDecentralandTimeRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetDecentralandTimeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDecentralandTimeRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20kernel/apis/EnvironmentAPI.proto\x1a\x1bcommon/ContentMapping.prot\
    o\"g\n\x15MinimalRunnableEntity\x12)\n\x07content\x18\x01\x20\x03(\x0b2\
    \x0f.ContentMappingR\x07content\x12#\n\rmetadata_json\x18\x02\x20\x01(\t\
    R\x0cmetadataJson\"\xa2\x01\n\x15BootstrapDataResponse\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\x12\x19\n\x08base_url\x18\x04\x20\x01(\tR\x07\
    baseUrl\x12.\n\x06entity\x18\x02\x20\x01(\x0b2\x16.MinimalRunnableEntity\
    R\x06entity\x12.\n\x14use_f_p_s_throttling\x18\x05\x20\x01(\x08R\x10useF\
    PSThrottling\"4\n\x13PreviewModeResponse\x12\x1d\n\nis_preview\x18\x01\
    \x20\x01(\x08R\tisPreview\"9\n\x1fAreUnsafeRequestAllowedResponse\x12\
    \x16\n\x06status\x18\x01\x20\x01(\x08R\x06status\"1\n\x13GetPlatformResp\
    onse\x12\x1a\n\x08platform\x18\x01\x20\x01(\tR\x08platform\"\xb4\x01\n\
    \x10EnvironmentRealm\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\
    \x12\x14\n\x05layer\x18\x02\x20\x01(\tR\x05layer\x12\x12\n\x04room\x18\
    \x03\x20\x01(\tR\x04room\x12\x1f\n\x0bserver_name\x18\x04\x20\x01(\tR\ns\
    erverName\x12!\n\x0cdisplay_name\x18\x05\x20\x01(\tR\x0bdisplayName\x12\
    \x1a\n\x08protocol\x18\x06\x20\x01(\tR\x08protocol\"h\n\x17GetCurrentRea\
    lmResponse\x12;\n\rcurrent_realm\x18\x01\x20\x01(\x0b2\x11.EnvironmentRe\
    almH\0R\x0ccurrentRealm\x88\x01\x01B\x10\n\x0e_current_realm\"\xe2\x01\n\
    \x20GetExplorerConfigurationResponse\x12\x1c\n\tclientUri\x18\x01\x20\
    \x01(\tR\tclientUri\x12]\n\x0econfigurations\x18\x02\x20\x03(\x0b25.GetE\
    xplorerConfigurationResponse.ConfigurationsEntryR\x0econfigurations\x1aA\
    \n\x13ConfigurationsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"7\n\x1bGetDe\
    centralandTimeResponse\x12\x18\n\x07seconds\x18\x01\x20\x01(\x05R\x07sec\
    onds\"\x19\n\x17GetBootstrapDataRequest\"\x16\n\x14IsPreviewModeRequest\
    \"\x14\n\x12GetPlatformRequest\"\x20\n\x1eAreUnsafeRequestAllowedRequest\
    \"\x18\n\x16GetCurrentRealmRequest\"!\n\x1fGetExplorerConfigurationReque\
    st\"\x1c\n\x1aGetDecentralandTimeRequest2\xba\x04\n\x15EnvironmentAPISer\
    vice\x12F\n\x10GetBootstrapData\x12\x18.GetBootstrapDataRequest\x1a\x16.\
    BootstrapDataResponse\"\0\x12>\n\rIsPreviewMode\x12\x15.IsPreviewModeReq\
    uest\x1a\x14.PreviewModeResponse\"\0\x12:\n\x0bGetPlatform\x12\x13.GetPl\
    atformRequest\x1a\x14.GetPlatformResponse\"\0\x12^\n\x17AreUnsafeRequest\
    Allowed\x12\x1f.AreUnsafeRequestAllowedRequest\x1a\x20.AreUnsafeRequestA\
    llowedResponse\"\0\x12F\n\x0fGetCurrentRealm\x12\x17.GetCurrentRealmRequ\
    est\x1a\x18.GetCurrentRealmResponse\"\0\x12a\n\x18GetExplorerConfigurati\
    on\x12\x20.GetExplorerConfigurationRequest\x1a!.GetExplorerConfiguration\
    Response\"\0\x12R\n\x13GetDecentralandTime\x12\x1b.GetDecentralandTimeRe\
    quest\x1a\x1c.GetDecentralandTimeResponse\"\0J\xe0\x0e\n\x06\x12\x04\0\0\
    B\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0%\n\n\
    \n\x02\x04\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\
    \x1d\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04(\n\x0c\n\x05\x04\0\x02\0\
    \x04\x12\x03\x05\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\r\x1b\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x1c#\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x05&'\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x04\x1d\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x06\x0b\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x1b\x1c\n\n\n\
    \x02\x04\x01\x12\x04\t\0\x0e\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x1d\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x04\x12\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x0b\r\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\n\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0b\x04\x18\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0b\x0b\x13\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0b\x16\x17\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0c\
    \x04%\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x0c\x04\x19\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x0c\x1a\x20\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x0c#$\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\r\x04\"\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03\r\x04\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03\r\t\x1d\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\r\x20!\n\n\n\
    \x02\x04\x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\x12\x03\x10\x08\
    \x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x04\x18\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x11\x04\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x11\
    \t\x13\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x16\x17\n\n\n\x02\x04\
    \x03\x12\x04\x14\0\x16\x01\n\n\n\x03\x04\x03\x01\x12\x03\x14\x08'\n\x0b\
    \n\x04\x04\x03\x02\0\x12\x03\x15\x04\x14\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\x15\x04\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x15\t\x0f\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x15\x12\x13\n\n\n\x02\x04\x04\x12\
    \x04\x18\0\x1a\x01\n\n\n\x03\x04\x04\x01\x12\x03\x18\x08\x1b\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x03\x19\x04\x18\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\
    \x19\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x19\x0b\x13\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03\x19\x16\x17\n\n\n\x02\x04\x05\x12\x04\x1c\0#\
    \x01\n\n\n\x03\x04\x05\x01\x12\x03\x1c\x08\x18\n\x0b\n\x04\x04\x05\x02\0\
    \x12\x03\x1d\x04\x16\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03\x1d\x04\n\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03\x1d\x0b\x11\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03\x1d\x14\x15\n\x0b\n\x04\x04\x05\x02\x01\x12\x03\x1e\x04\
    \x15\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\x1e\x04\n\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03\x1e\x0b\x10\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03\x1e\x13\x14\n\x0b\n\x04\x04\x05\x02\x02\x12\x03\x1f\x04\x14\n\x0c\n\
    \x05\x04\x05\x02\x02\x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\x05\x02\x02\
    \x01\x12\x03\x1f\x0b\x0f\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03\x1f\x12\
    \x13\n\x0b\n\x04\x04\x05\x02\x03\x12\x03\x20\x04\x1b\n\x0c\n\x05\x04\x05\
    \x02\x03\x05\x12\x03\x20\x04\n\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03\
    \x20\x0b\x16\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03\x20\x19\x1a\n\x0b\n\
    \x04\x04\x05\x02\x04\x12\x03!\x04\x1c\n\x0c\n\x05\x04\x05\x02\x04\x05\
    \x12\x03!\x04\n\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03!\x0b\x17\n\x0c\n\
    \x05\x04\x05\x02\x04\x03\x12\x03!\x1a\x1b\n\x0b\n\x04\x04\x05\x02\x05\
    \x12\x03\"\x04\x18\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03\"\x04\n\n\x0c\
    \n\x05\x04\x05\x02\x05\x01\x12\x03\"\x0b\x13\n\x0c\n\x05\x04\x05\x02\x05\
    \x03\x12\x03\"\x16\x17\n\n\n\x02\x04\x06\x12\x04%\0'\x01\n\n\n\x03\x04\
    \x06\x01\x12\x03%\x08\x1f\n\x0b\n\x04\x04\x06\x02\0\x12\x03&\x040\n\x0c\
    \n\x05\x04\x06\x02\0\x04\x12\x03&\x04\x0c\n\x0c\n\x05\x04\x06\x02\0\x06\
    \x12\x03&\r\x1d\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03&\x1e+\n\x0c\n\x05\
    \x04\x06\x02\0\x03\x12\x03&./\n\n\n\x02\x04\x07\x12\x04)\0,\x01\n\n\n\
    \x03\x04\x07\x01\x12\x03)\x08(\n\x0b\n\x04\x04\x07\x02\0\x12\x03*\x04\
    \x19\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x03*\x0b\x14\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03*\x17\
    \x18\n\x0b\n\x04\x04\x07\x02\x01\x12\x03+\x04+\n\x0c\n\x05\x04\x07\x02\
    \x01\x06\x12\x03+\x04\x17\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03+\x18&\
    \n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03+)*\n\n\n\x02\x04\x08\x12\x04.\0\
    0\x01\n\n\n\x03\x04\x08\x01\x12\x03.\x08#\n\x0b\n\x04\x04\x08\x02\0\x12\
    \x03/\x04\x16\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03/\x04\t\n\x0c\n\x05\
    \x04\x08\x02\0\x01\x12\x03/\n\x11\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03/\
    \x14\x15\n\t\n\x02\x04\t\x12\x032\0\"\n\n\n\x03\x04\t\x01\x12\x032\x08\
    \x1f\n\t\n\x02\x04\n\x12\x033\0\x1f\n\n\n\x03\x04\n\x01\x12\x033\x08\x1c\
    \n\t\n\x02\x04\x0b\x12\x034\0\x1d\n\n\n\x03\x04\x0b\x01\x12\x034\x08\x1a\
    \n\t\n\x02\x04\x0c\x12\x035\0)\n\n\n\x03\x04\x0c\x01\x12\x035\x08&\n\t\n\
    \x02\x04\r\x12\x036\0!\n\n\n\x03\x04\r\x01\x12\x036\x08\x1e\n\t\n\x02\
    \x04\x0e\x12\x037\0*\n\n\n\x03\x04\x0e\x01\x12\x037\x08'\n\t\n\x02\x04\
    \x0f\x12\x038\0%\n\n\n\x03\x04\x0f\x01\x12\x038\x08\"\n\n\n\x02\x06\0\
    \x12\x04:\0B\x01\n\n\n\x03\x06\0\x01\x12\x03:\x08\x1d\n\x0b\n\x04\x06\0\
    \x02\0\x12\x03;\x04T\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03;\x08\x18\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03;\x190\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\
    ;;P\n\x0b\n\x04\x06\0\x02\x01\x12\x03<\x04L\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03<\x08\x15\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03<\x16*\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03<5H\n\x0b\n\x04\x06\0\x02\x02\x12\x03=\
    \x04H\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03=\x08\x13\n\x0c\n\x05\x06\0\
    \x02\x02\x02\x12\x03=\x14&\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03=1D\n\
    \x0b\n\x04\x06\0\x02\x03\x12\x03>\x04l\n\x0c\n\x05\x06\0\x02\x03\x01\x12\
    \x03>\x08\x1f\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03>\x20>\n\x0c\n\x05\
    \x06\0\x02\x03\x03\x12\x03>Ih\n\x0b\n\x04\x06\0\x02\x04\x12\x03?\x04T\n\
    \x0c\n\x05\x06\0\x02\x04\x01\x12\x03?\x08\x17\n\x0c\n\x05\x06\0\x02\x04\
    \x02\x12\x03?\x18.\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03?9P\n\x0b\n\x04\
    \x06\0\x02\x05\x12\x03@\x04o\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03@\x08\
    \x20\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03@!@\n\x0c\n\x05\x06\0\x02\x05\
    \x03\x12\x03@Kk\n\x0b\n\x04\x06\0\x02\x06\x12\x03A\x04`\n\x0c\n\x05\x06\
    \0\x02\x06\x01\x12\x03A\x08\x1b\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03A\
    \x1c6\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03AA\\b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::ContentMapping::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(MinimalRunnableEntity::generated_message_descriptor_data());
            messages.push(BootstrapDataResponse::generated_message_descriptor_data());
            messages.push(PreviewModeResponse::generated_message_descriptor_data());
            messages.push(AreUnsafeRequestAllowedResponse::generated_message_descriptor_data());
            messages.push(GetPlatformResponse::generated_message_descriptor_data());
            messages.push(EnvironmentRealm::generated_message_descriptor_data());
            messages.push(GetCurrentRealmResponse::generated_message_descriptor_data());
            messages.push(GetExplorerConfigurationResponse::generated_message_descriptor_data());
            messages.push(GetDecentralandTimeResponse::generated_message_descriptor_data());
            messages.push(GetBootstrapDataRequest::generated_message_descriptor_data());
            messages.push(IsPreviewModeRequest::generated_message_descriptor_data());
            messages.push(GetPlatformRequest::generated_message_descriptor_data());
            messages.push(AreUnsafeRequestAllowedRequest::generated_message_descriptor_data());
            messages.push(GetCurrentRealmRequest::generated_message_descriptor_data());
            messages.push(GetExplorerConfigurationRequest::generated_message_descriptor_data());
            messages.push(GetDecentralandTimeRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
