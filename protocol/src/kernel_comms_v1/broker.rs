// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/comms/v1/broker.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.CoordinatorMessage)
pub struct CoordinatorMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.CoordinatorMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.CoordinatorMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoordinatorMessage {
    fn default() -> &'a CoordinatorMessage {
        <CoordinatorMessage as ::protobuf::Message>::default_instance()
    }
}

impl CoordinatorMessage {
    pub fn new() -> CoordinatorMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CoordinatorMessage| { &m.type_ },
            |m: &mut CoordinatorMessage| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoordinatorMessage>(
            "CoordinatorMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoordinatorMessage {
    const NAME: &'static str = "CoordinatorMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoordinatorMessage {
        CoordinatorMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoordinatorMessage {
        static instance: CoordinatorMessage = CoordinatorMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoordinatorMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoordinatorMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoordinatorMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoordinatorMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.WelcomeMessage)
pub struct WelcomeMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.WelcomeMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.WelcomeMessage.alias)
    pub alias: u64,
    // @@protoc_insertion_point(field:protocol.WelcomeMessage.available_servers)
    pub available_servers: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.WelcomeMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WelcomeMessage {
    fn default() -> &'a WelcomeMessage {
        <WelcomeMessage as ::protobuf::Message>::default_instance()
    }
}

impl WelcomeMessage {
    pub fn new() -> WelcomeMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &WelcomeMessage| { &m.type_ },
            |m: &mut WelcomeMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "alias",
            |m: &WelcomeMessage| { &m.alias },
            |m: &mut WelcomeMessage| { &mut m.alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "available_servers",
            |m: &WelcomeMessage| { &m.available_servers },
            |m: &mut WelcomeMessage| { &mut m.available_servers },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WelcomeMessage>(
            "WelcomeMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WelcomeMessage {
    const NAME: &'static str = "WelcomeMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.alias = is.read_uint64()?;
                },
                26 => {
                    is.read_repeated_packed_uint64_into(&mut self.available_servers)?;
                },
                24 => {
                    self.available_servers.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.alias);
        }
        for value in &self.available_servers {
            my_size += ::protobuf::rt::uint64_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.alias != 0 {
            os.write_uint64(2, self.alias)?;
        }
        for v in &self.available_servers {
            os.write_uint64(3, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WelcomeMessage {
        WelcomeMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.alias = 0;
        self.available_servers.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WelcomeMessage {
        static instance: WelcomeMessage = WelcomeMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            alias: 0,
            available_servers: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WelcomeMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WelcomeMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WelcomeMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WelcomeMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ConnectMessage)
pub struct ConnectMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.ConnectMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.ConnectMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.ConnectMessage.to_alias)
    pub to_alias: u64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ConnectMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectMessage {
    fn default() -> &'a ConnectMessage {
        <ConnectMessage as ::protobuf::Message>::default_instance()
    }
}

impl ConnectMessage {
    pub fn new() -> ConnectMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &ConnectMessage| { &m.type_ },
            |m: &mut ConnectMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &ConnectMessage| { &m.from_alias },
            |m: &mut ConnectMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_alias",
            |m: &ConnectMessage| { &m.to_alias },
            |m: &mut ConnectMessage| { &mut m.to_alias },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectMessage>(
            "ConnectMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectMessage {
    const NAME: &'static str = "ConnectMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                24 => {
                    self.to_alias = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if self.to_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.to_alias);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if self.to_alias != 0 {
            os.write_uint64(3, self.to_alias)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectMessage {
        ConnectMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.to_alias = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectMessage {
        static instance: ConnectMessage = ConnectMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            to_alias: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.WebRtcMessage)
pub struct WebRtcMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.WebRtcMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.WebRtcMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.WebRtcMessage.to_alias)
    pub to_alias: u64,
    // @@protoc_insertion_point(field:protocol.WebRtcMessage.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.WebRtcMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a WebRtcMessage {
    fn default() -> &'a WebRtcMessage {
        <WebRtcMessage as ::protobuf::Message>::default_instance()
    }
}

impl WebRtcMessage {
    pub fn new() -> WebRtcMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &WebRtcMessage| { &m.type_ },
            |m: &mut WebRtcMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &WebRtcMessage| { &m.from_alias },
            |m: &mut WebRtcMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_alias",
            |m: &WebRtcMessage| { &m.to_alias },
            |m: &mut WebRtcMessage| { &mut m.to_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &WebRtcMessage| { &m.data },
            |m: &mut WebRtcMessage| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<WebRtcMessage>(
            "WebRtcMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for WebRtcMessage {
    const NAME: &'static str = "WebRtcMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                24 => {
                    self.to_alias = is.read_uint64()?;
                },
                34 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if self.to_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.to_alias);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if self.to_alias != 0 {
            os.write_uint64(3, self.to_alias)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> WebRtcMessage {
        WebRtcMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.to_alias = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static WebRtcMessage {
        static instance: WebRtcMessage = WebRtcMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            to_alias: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for WebRtcMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("WebRtcMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for WebRtcMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WebRtcMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.MessageHeader)
pub struct MessageHeader {
    // message fields
    // @@protoc_insertion_point(field:protocol.MessageHeader.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.MessageHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageHeader {
    fn default() -> &'a MessageHeader {
        <MessageHeader as ::protobuf::Message>::default_instance()
    }
}

impl MessageHeader {
    pub fn new() -> MessageHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MessageHeader| { &m.type_ },
            |m: &mut MessageHeader| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageHeader>(
            "MessageHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageHeader {
    const NAME: &'static str = "MessageHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageHeader {
        MessageHeader::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageHeader {
        static instance: MessageHeader = MessageHeader {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.PingMessage)
pub struct PingMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.PingMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.PingMessage.time)
    pub time: f64,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.PingMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PingMessage {
    fn default() -> &'a PingMessage {
        <PingMessage as ::protobuf::Message>::default_instance()
    }
}

impl PingMessage {
    pub fn new() -> PingMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &PingMessage| { &m.type_ },
            |m: &mut PingMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &PingMessage| { &m.time },
            |m: &mut PingMessage| { &mut m.time },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PingMessage>(
            "PingMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PingMessage {
    const NAME: &'static str = "PingMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PingMessage {
        PingMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.time = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PingMessage {
        static instance: PingMessage = PingMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PingMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PingMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PingMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  NOTE: topics is a space separated string in the format specified by Format
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.SubscriptionMessage)
pub struct SubscriptionMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.SubscriptionMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.SubscriptionMessage.format)
    pub format: ::protobuf::EnumOrUnknown<Format>,
    // @@protoc_insertion_point(field:protocol.SubscriptionMessage.topics)
    pub topics: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.SubscriptionMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SubscriptionMessage {
    fn default() -> &'a SubscriptionMessage {
        <SubscriptionMessage as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionMessage {
    pub fn new() -> SubscriptionMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SubscriptionMessage| { &m.type_ },
            |m: &mut SubscriptionMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &SubscriptionMessage| { &m.format },
            |m: &mut SubscriptionMessage| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topics",
            |m: &SubscriptionMessage| { &m.topics },
            |m: &mut SubscriptionMessage| { &mut m.topics },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SubscriptionMessage>(
            "SubscriptionMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SubscriptionMessage {
    const NAME: &'static str = "SubscriptionMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.format = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.topics = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.format != ::protobuf::EnumOrUnknown::new(Format::UNKNOWN_FORMAT) {
            my_size += ::protobuf::rt::int32_size(2, self.format.value());
        }
        if !self.topics.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.topics);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.format != ::protobuf::EnumOrUnknown::new(Format::UNKNOWN_FORMAT) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.format))?;
        }
        if !self.topics.is_empty() {
            os.write_bytes(3, &self.topics)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SubscriptionMessage {
        SubscriptionMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.format = ::protobuf::EnumOrUnknown::new(Format::UNKNOWN_FORMAT);
        self.topics.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SubscriptionMessage {
        static instance: SubscriptionMessage = SubscriptionMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            format: ::protobuf::EnumOrUnknown::from_i32(0),
            topics: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SubscriptionMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SubscriptionMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SubscriptionMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.AuthMessage)
pub struct AuthMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.AuthMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.AuthMessage.role)
    pub role: ::protobuf::EnumOrUnknown<Role>,
    // @@protoc_insertion_point(field:protocol.AuthMessage.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.AuthMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthMessage {
    fn default() -> &'a AuthMessage {
        <AuthMessage as ::protobuf::Message>::default_instance()
    }
}

impl AuthMessage {
    pub fn new() -> AuthMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &AuthMessage| { &m.type_ },
            |m: &mut AuthMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &AuthMessage| { &m.role },
            |m: &mut AuthMessage| { &mut m.role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &AuthMessage| { &m.body },
            |m: &mut AuthMessage| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthMessage>(
            "AuthMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthMessage {
    const NAME: &'static str = "AuthMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.role = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            my_size += ::protobuf::rt::int32_size(2, self.role.value());
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.role))?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthMessage {
        AuthMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.role = ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE);
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthMessage {
        static instance: AuthMessage = AuthMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            role: ::protobuf::EnumOrUnknown::from_i32(0),
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TopicMessage)
pub struct TopicMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.TopicMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.TopicMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.TopicMessage.topic)
    pub topic: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.TopicMessage.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TopicMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TopicMessage {
    fn default() -> &'a TopicMessage {
        <TopicMessage as ::protobuf::Message>::default_instance()
    }
}

impl TopicMessage {
    pub fn new() -> TopicMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TopicMessage| { &m.type_ },
            |m: &mut TopicMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &TopicMessage| { &m.from_alias },
            |m: &mut TopicMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &TopicMessage| { &m.topic },
            |m: &mut TopicMessage| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &TopicMessage| { &m.body },
            |m: &mut TopicMessage| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicMessage>(
            "TopicMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TopicMessage {
    const NAME: &'static str = "TopicMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                26 => {
                    self.topic = is.read_string()?;
                },
                34 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.topic);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if !self.topic.is_empty() {
            os.write_string(3, &self.topic)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(4, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TopicMessage {
        TopicMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.topic.clear();
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TopicMessage {
        static instance: TopicMessage = TopicMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            topic: ::std::string::String::new(),
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TopicMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TopicMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TopicMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopicMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TopicFWMessage)
pub struct TopicFWMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.TopicFWMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.TopicFWMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.TopicFWMessage.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TopicFWMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TopicFWMessage {
    fn default() -> &'a TopicFWMessage {
        <TopicFWMessage as ::protobuf::Message>::default_instance()
    }
}

impl TopicFWMessage {
    pub fn new() -> TopicFWMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TopicFWMessage| { &m.type_ },
            |m: &mut TopicFWMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &TopicFWMessage| { &m.from_alias },
            |m: &mut TopicFWMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &TopicFWMessage| { &m.body },
            |m: &mut TopicFWMessage| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicFWMessage>(
            "TopicFWMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TopicFWMessage {
    const NAME: &'static str = "TopicFWMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                26 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TopicFWMessage {
        TopicFWMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TopicFWMessage {
        static instance: TopicFWMessage = TopicFWMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TopicFWMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TopicFWMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TopicFWMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopicFWMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TopicIdentityMessage)
pub struct TopicIdentityMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.topic)
    pub topic: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.identity)
    pub identity: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.role)
    pub role: ::protobuf::EnumOrUnknown<Role>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityMessage.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TopicIdentityMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TopicIdentityMessage {
    fn default() -> &'a TopicIdentityMessage {
        <TopicIdentityMessage as ::protobuf::Message>::default_instance()
    }
}

impl TopicIdentityMessage {
    pub fn new() -> TopicIdentityMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TopicIdentityMessage| { &m.type_ },
            |m: &mut TopicIdentityMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &TopicIdentityMessage| { &m.from_alias },
            |m: &mut TopicIdentityMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &TopicIdentityMessage| { &m.topic },
            |m: &mut TopicIdentityMessage| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identity",
            |m: &TopicIdentityMessage| { &m.identity },
            |m: &mut TopicIdentityMessage| { &mut m.identity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &TopicIdentityMessage| { &m.role },
            |m: &mut TopicIdentityMessage| { &mut m.role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &TopicIdentityMessage| { &m.body },
            |m: &mut TopicIdentityMessage| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicIdentityMessage>(
            "TopicIdentityMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TopicIdentityMessage {
    const NAME: &'static str = "TopicIdentityMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                26 => {
                    self.topic = is.read_string()?;
                },
                34 => {
                    self.identity = is.read_bytes()?;
                },
                40 => {
                    self.role = is.read_enum_or_unknown()?;
                },
                50 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.topic);
        }
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.identity);
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            my_size += ::protobuf::rt::int32_size(5, self.role.value());
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if !self.topic.is_empty() {
            os.write_string(3, &self.topic)?;
        }
        if !self.identity.is_empty() {
            os.write_bytes(4, &self.identity)?;
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.role))?;
        }
        if !self.body.is_empty() {
            os.write_bytes(6, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TopicIdentityMessage {
        TopicIdentityMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.topic.clear();
        self.identity.clear();
        self.role = ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE);
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TopicIdentityMessage {
        static instance: TopicIdentityMessage = TopicIdentityMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            topic: ::std::string::String::new(),
            identity: ::std::vec::Vec::new(),
            role: ::protobuf::EnumOrUnknown::from_i32(0),
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TopicIdentityMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TopicIdentityMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TopicIdentityMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopicIdentityMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.TopicIdentityFWMessage)
pub struct TopicIdentityFWMessage {
    // message fields
    // @@protoc_insertion_point(field:protocol.TopicIdentityFWMessage.type)
    pub type_: ::protobuf::EnumOrUnknown<MessageType>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityFWMessage.from_alias)
    pub from_alias: u64,
    // @@protoc_insertion_point(field:protocol.TopicIdentityFWMessage.identity)
    pub identity: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityFWMessage.role)
    pub role: ::protobuf::EnumOrUnknown<Role>,
    // @@protoc_insertion_point(field:protocol.TopicIdentityFWMessage.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.TopicIdentityFWMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TopicIdentityFWMessage {
    fn default() -> &'a TopicIdentityFWMessage {
        <TopicIdentityFWMessage as ::protobuf::Message>::default_instance()
    }
}

impl TopicIdentityFWMessage {
    pub fn new() -> TopicIdentityFWMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &TopicIdentityFWMessage| { &m.type_ },
            |m: &mut TopicIdentityFWMessage| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_alias",
            |m: &TopicIdentityFWMessage| { &m.from_alias },
            |m: &mut TopicIdentityFWMessage| { &mut m.from_alias },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identity",
            |m: &TopicIdentityFWMessage| { &m.identity },
            |m: &mut TopicIdentityFWMessage| { &mut m.identity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "role",
            |m: &TopicIdentityFWMessage| { &m.role },
            |m: &mut TopicIdentityFWMessage| { &mut m.role },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &TopicIdentityFWMessage| { &m.body },
            |m: &mut TopicIdentityFWMessage| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TopicIdentityFWMessage>(
            "TopicIdentityFWMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TopicIdentityFWMessage {
    const NAME: &'static str = "TopicIdentityFWMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.from_alias = is.read_uint64()?;
                },
                26 => {
                    self.identity = is.read_bytes()?;
                },
                32 => {
                    self.role = is.read_enum_or_unknown()?;
                },
                42 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.from_alias != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.from_alias);
        }
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.identity);
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            my_size += ::protobuf::rt::int32_size(4, self.role.value());
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.from_alias != 0 {
            os.write_uint64(2, self.from_alias)?;
        }
        if !self.identity.is_empty() {
            os.write_bytes(3, &self.identity)?;
        }
        if self.role != ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.role))?;
        }
        if !self.body.is_empty() {
            os.write_bytes(5, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TopicIdentityFWMessage {
        TopicIdentityFWMessage::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(MessageType::UNKNOWN_MESSAGE_TYPE);
        self.from_alias = 0;
        self.identity.clear();
        self.role = ::protobuf::EnumOrUnknown::new(Role::UNKNOWN_ROLE);
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TopicIdentityFWMessage {
        static instance: TopicIdentityFWMessage = TopicIdentityFWMessage {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            from_alias: 0,
            identity: ::std::vec::Vec::new(),
            role: ::protobuf::EnumOrUnknown::from_i32(0),
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TopicIdentityFWMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TopicIdentityFWMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TopicIdentityFWMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TopicIdentityFWMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protocol.MessageType)
pub enum MessageType {
    // @@protoc_insertion_point(enum_value:protocol.MessageType.UNKNOWN_MESSAGE_TYPE)
    UNKNOWN_MESSAGE_TYPE = 0,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.WELCOME)
    WELCOME = 1,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.CONNECT)
    CONNECT = 2,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.WEBRTC_OFFER)
    WEBRTC_OFFER = 3,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.WEBRTC_ANSWER)
    WEBRTC_ANSWER = 4,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.WEBRTC_ICE_CANDIDATE)
    WEBRTC_ICE_CANDIDATE = 5,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.PING)
    PING = 6,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.SUBSCRIPTION)
    SUBSCRIPTION = 7,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.AUTH)
    AUTH = 8,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.TOPIC)
    TOPIC = 9,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.TOPIC_FW)
    TOPIC_FW = 10,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.TOPIC_IDENTITY)
    TOPIC_IDENTITY = 11,
    // @@protoc_insertion_point(enum_value:protocol.MessageType.TOPIC_IDENTITY_FW)
    TOPIC_IDENTITY_FW = 12,
}

impl ::protobuf::Enum for MessageType {
    const NAME: &'static str = "MessageType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::UNKNOWN_MESSAGE_TYPE),
            1 => ::std::option::Option::Some(MessageType::WELCOME),
            2 => ::std::option::Option::Some(MessageType::CONNECT),
            3 => ::std::option::Option::Some(MessageType::WEBRTC_OFFER),
            4 => ::std::option::Option::Some(MessageType::WEBRTC_ANSWER),
            5 => ::std::option::Option::Some(MessageType::WEBRTC_ICE_CANDIDATE),
            6 => ::std::option::Option::Some(MessageType::PING),
            7 => ::std::option::Option::Some(MessageType::SUBSCRIPTION),
            8 => ::std::option::Option::Some(MessageType::AUTH),
            9 => ::std::option::Option::Some(MessageType::TOPIC),
            10 => ::std::option::Option::Some(MessageType::TOPIC_FW),
            11 => ::std::option::Option::Some(MessageType::TOPIC_IDENTITY),
            12 => ::std::option::Option::Some(MessageType::TOPIC_IDENTITY_FW),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MessageType] = &[
        MessageType::UNKNOWN_MESSAGE_TYPE,
        MessageType::WELCOME,
        MessageType::CONNECT,
        MessageType::WEBRTC_OFFER,
        MessageType::WEBRTC_ANSWER,
        MessageType::WEBRTC_ICE_CANDIDATE,
        MessageType::PING,
        MessageType::SUBSCRIPTION,
        MessageType::AUTH,
        MessageType::TOPIC,
        MessageType::TOPIC_FW,
        MessageType::TOPIC_IDENTITY,
        MessageType::TOPIC_IDENTITY_FW,
    ];
}

impl ::protobuf::EnumFull for MessageType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MessageType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::UNKNOWN_MESSAGE_TYPE
    }
}

impl MessageType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MessageType>("MessageType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protocol.Role)
pub enum Role {
    // @@protoc_insertion_point(enum_value:protocol.Role.UNKNOWN_ROLE)
    UNKNOWN_ROLE = 0,
    // @@protoc_insertion_point(enum_value:protocol.Role.CLIENT)
    CLIENT = 1,
    // @@protoc_insertion_point(enum_value:protocol.Role.COMMUNICATION_SERVER)
    COMMUNICATION_SERVER = 2,
}

impl ::protobuf::Enum for Role {
    const NAME: &'static str = "Role";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Role> {
        match value {
            0 => ::std::option::Option::Some(Role::UNKNOWN_ROLE),
            1 => ::std::option::Option::Some(Role::CLIENT),
            2 => ::std::option::Option::Some(Role::COMMUNICATION_SERVER),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Role] = &[
        Role::UNKNOWN_ROLE,
        Role::CLIENT,
        Role::COMMUNICATION_SERVER,
    ];
}

impl ::protobuf::EnumFull for Role {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Role").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Role {
    fn default() -> Self {
        Role::UNKNOWN_ROLE
    }
}

impl Role {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Role>("Role")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protocol.Format)
pub enum Format {
    // @@protoc_insertion_point(enum_value:protocol.Format.UNKNOWN_FORMAT)
    UNKNOWN_FORMAT = 0,
    // @@protoc_insertion_point(enum_value:protocol.Format.PLAIN)
    PLAIN = 1,
    // @@protoc_insertion_point(enum_value:protocol.Format.GZIP)
    GZIP = 2,
}

impl ::protobuf::Enum for Format {
    const NAME: &'static str = "Format";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Format> {
        match value {
            0 => ::std::option::Option::Some(Format::UNKNOWN_FORMAT),
            1 => ::std::option::Option::Some(Format::PLAIN),
            2 => ::std::option::Option::Some(Format::GZIP),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Format] = &[
        Format::UNKNOWN_FORMAT,
        Format::PLAIN,
        Format::GZIP,
    ];
}

impl ::protobuf::EnumFull for Format {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Format").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Format {
    fn default() -> Self {
        Format::UNKNOWN_FORMAT
    }
}

impl Format {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Format>("Format")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ckernel/comms/v1/broker.proto\x12\x08protocol\"?\n\x12CoordinatorMe\
    ssage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageTypeR\x04\
    type\"~\n\x0eWelcomeMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.pro\
    tocol.MessageTypeR\x04type\x12\x14\n\x05alias\x18\x02\x20\x01(\x04R\x05a\
    lias\x12+\n\x11available_servers\x18\x03\x20\x03(\x04R\x10availableServe\
    rs\"u\n\x0eConnectMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.proto\
    col.MessageTypeR\x04type\x12\x1d\n\nfrom_alias\x18\x02\x20\x01(\x04R\tfr\
    omAlias\x12\x19\n\x08to_alias\x18\x03\x20\x01(\x04R\x07toAlias\"\x88\x01\
    \n\rWebRtcMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.Mess\
    ageTypeR\x04type\x12\x1d\n\nfrom_alias\x18\x02\x20\x01(\x04R\tfromAlias\
    \x12\x19\n\x08to_alias\x18\x03\x20\x01(\x04R\x07toAlias\x12\x12\n\x04dat\
    a\x18\x04\x20\x01(\x0cR\x04data\":\n\rMessageHeader\x12)\n\x04type\x18\
    \x01\x20\x01(\x0e2\x15.protocol.MessageTypeR\x04type\"L\n\x0bPingMessage\
    \x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageTypeR\x04type\
    \x12\x12\n\x04time\x18\x02\x20\x01(\x01R\x04time\"\x82\x01\n\x13Subscrip\
    tionMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageTyp\
    eR\x04type\x12(\n\x06format\x18\x02\x20\x01(\x0e2\x10.protocol.FormatR\
    \x06format\x12\x16\n\x06topics\x18\x03\x20\x01(\x0cR\x06topics\"p\n\x0bA\
    uthMessage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageType\
    R\x04type\x12\"\n\x04role\x18\x02\x20\x01(\x0e2\x0e.protocol.RoleR\x04ro\
    le\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\x04body\"\x82\x01\n\x0cTopicM\
    essage\x12)\n\x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageTypeR\
    \x04type\x12\x1d\n\nfrom_alias\x18\x02\x20\x01(\x04R\tfromAlias\x12\x14\
    \n\x05topic\x18\x03\x20\x01(\tR\x05topic\x12\x12\n\x04body\x18\x04\x20\
    \x01(\x0cR\x04body\"n\n\x0eTopicFWMessage\x12)\n\x04type\x18\x01\x20\x01\
    (\x0e2\x15.protocol.MessageTypeR\x04type\x12\x1d\n\nfrom_alias\x18\x02\
    \x20\x01(\x04R\tfromAlias\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\x04bod\
    y\"\xca\x01\n\x14TopicIdentityMessage\x12)\n\x04type\x18\x01\x20\x01(\
    \x0e2\x15.protocol.MessageTypeR\x04type\x12\x1d\n\nfrom_alias\x18\x02\
    \x20\x01(\x04R\tfromAlias\x12\x14\n\x05topic\x18\x03\x20\x01(\tR\x05topi\
    c\x12\x1a\n\x08identity\x18\x04\x20\x01(\x0cR\x08identity\x12\"\n\x04rol\
    e\x18\x05\x20\x01(\x0e2\x0e.protocol.RoleR\x04role\x12\x12\n\x04body\x18\
    \x06\x20\x01(\x0cR\x04body\"\xb6\x01\n\x16TopicIdentityFWMessage\x12)\n\
    \x04type\x18\x01\x20\x01(\x0e2\x15.protocol.MessageTypeR\x04type\x12\x1d\
    \n\nfrom_alias\x18\x02\x20\x01(\x04R\tfromAlias\x12\x1a\n\x08identity\
    \x18\x03\x20\x01(\x0cR\x08identity\x12\"\n\x04role\x18\x04\x20\x01(\x0e2\
    \x0e.protocol.RoleR\x04role\x12\x12\n\x04body\x18\x05\x20\x01(\x0cR\x04b\
    ody*\xea\x01\n\x0bMessageType\x12\x18\n\x14UNKNOWN_MESSAGE_TYPE\x10\0\
    \x12\x0b\n\x07WELCOME\x10\x01\x12\x0b\n\x07CONNECT\x10\x02\x12\x10\n\x0c\
    WEBRTC_OFFER\x10\x03\x12\x11\n\rWEBRTC_ANSWER\x10\x04\x12\x18\n\x14WEBRT\
    C_ICE_CANDIDATE\x10\x05\x12\x08\n\x04PING\x10\x06\x12\x10\n\x0cSUBSCRIPT\
    ION\x10\x07\x12\x08\n\x04AUTH\x10\x08\x12\t\n\x05TOPIC\x10\t\x12\x0c\n\
    \x08TOPIC_FW\x10\n\x12\x12\n\x0eTOPIC_IDENTITY\x10\x0b\x12\x15\n\x11TOPI\
    C_IDENTITY_FW\x10\x0c*>\n\x04Role\x12\x10\n\x0cUNKNOWN_ROLE\x10\0\x12\n\
    \n\x06CLIENT\x10\x01\x12\x18\n\x14COMMUNICATION_SERVER\x10\x02*1\n\x06Fo\
    rmat\x12\x12\n\x0eUNKNOWN_FORMAT\x10\0\x12\t\n\x05PLAIN\x10\x01\x12\x08\
    \n\x04GZIP\x10\x02J\xf3\x1a\n\x06\x12\x04\0\0q\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n\n\n\x02\x05\0\x12\x04\
    \x04\0\x14\x01\n\n\n\x03\x05\0\x01\x12\x03\x04\x05\x10\n\x0b\n\x04\x05\0\
    \x02\0\x12\x03\x05\x02\x1b\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x05\x02\
    \x16\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\x19\x1a\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x06\x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x06\
    \x02\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x06\x0c\r\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\x07\x02\x0e\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x07\
    \x02\t\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x07\x0c\r\n\x0b\n\x04\x05\0\
    \x02\x03\x12\x03\x08\x02\x13\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x08\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x08\x11\x12\n\x0b\n\x04\
    \x05\0\x02\x04\x12\x03\t\x02\x14\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\t\
    \x02\x0f\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\t\x12\x13\n\x0b\n\x04\x05\
    \0\x02\x05\x12\x03\n\x02\x1b\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\n\x02\
    \x16\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\n\x19\x1a\n\x0b\n\x04\x05\0\
    \x02\x06\x12\x03\x0b\x02\x0b\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x0b\
    \x02\x06\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x0b\t\n\n\x0b\n\x04\x05\0\
    \x02\x07\x12\x03\x0c\x02\x13\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x0c\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\x07\x02\x12\x03\x0c\x11\x12\n\x0b\n\x04\
    \x05\0\x02\x08\x12\x03\r\x02\x0b\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\r\
    \x02\x06\n\x0c\n\x05\x05\0\x02\x08\x02\x12\x03\r\t\n\n\x0b\n\x04\x05\0\
    \x02\t\x12\x03\x0f\x02\x0c\n\x0c\n\x05\x05\0\x02\t\x01\x12\x03\x0f\x02\
    \x07\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x0f\n\x0b\n\x0b\n\x04\x05\0\x02\
    \n\x12\x03\x10\x02\x10\n\x0c\n\x05\x05\0\x02\n\x01\x12\x03\x10\x02\n\n\
    \x0c\n\x05\x05\0\x02\n\x02\x12\x03\x10\r\x0f\n\x0b\n\x04\x05\0\x02\x0b\
    \x12\x03\x12\x02\x16\n\x0c\n\x05\x05\0\x02\x0b\x01\x12\x03\x12\x02\x10\n\
    \x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\x12\x13\x15\n\x0b\n\x04\x05\0\x02\
    \x0c\x12\x03\x13\x02\x19\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\x13\x02\
    \x13\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\x13\x16\x18\n\n\n\x02\x05\x01\
    \x12\x04\x16\0\x1a\x01\n\n\n\x03\x05\x01\x01\x12\x03\x16\x05\t\n\x0b\n\
    \x04\x05\x01\x02\0\x12\x03\x17\x02\x13\n\x0c\n\x05\x05\x01\x02\0\x01\x12\
    \x03\x17\x02\x0e\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x17\x11\x12\n\x0b\
    \n\x04\x05\x01\x02\x01\x12\x03\x18\x02\r\n\x0c\n\x05\x05\x01\x02\x01\x01\
    \x12\x03\x18\x02\x08\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\x18\x0b\x0c\
    \n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x19\x02\x1b\n\x0c\n\x05\x05\x01\x02\
    \x02\x01\x12\x03\x19\x02\x16\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x19\
    \x19\x1a\n\n\n\x02\x05\x02\x12\x04\x1c\0\x20\x01\n\n\n\x03\x05\x02\x01\
    \x12\x03\x1c\x05\x0b\n\x0b\n\x04\x05\x02\x02\0\x12\x03\x1d\x02\x15\n\x0c\
    \n\x05\x05\x02\x02\0\x01\x12\x03\x1d\x02\x10\n\x0c\n\x05\x05\x02\x02\0\
    \x02\x12\x03\x1d\x13\x14\n\x0b\n\x04\x05\x02\x02\x01\x12\x03\x1e\x02\x0c\
    \n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03\x1e\x02\x07\n\x0c\n\x05\x05\x02\
    \x02\x01\x02\x12\x03\x1e\n\x0b\n\x0b\n\x04\x05\x02\x02\x02\x12\x03\x1f\
    \x02\x0b\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03\x1f\x02\x06\n\x0c\n\x05\
    \x05\x02\x02\x02\x02\x12\x03\x1f\t\n\n*\n\x02\x04\0\x12\x04$\0&\x012\x1e\
    \x20NOTE:\x20coordination\x20messsages\n\n\n\n\x03\x04\0\x01\x12\x03$\
    \x08\x1a\n\x0b\n\x04\x04\0\x02\0\x12\x03%\x04\x19\n\x0c\n\x05\x04\0\x02\
    \0\x06\x12\x03%\x04\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03%\x10\x14\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03%\x17\x18\n\n\n\x02\x04\x01\x12\x04(\0\
    ,\x01\n\n\n\x03\x04\x01\x01\x12\x03(\x08\x16\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03)\x04\x19\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03)\x04\x0f\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03)\x10\x14\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03)\x17\x18\n\x0b\n\x04\x04\x01\x02\x01\x12\x03*\x04\x15\n\x0c\n\
    \x05\x04\x01\x02\x01\x05\x12\x03*\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\
    \x12\x03*\x0b\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03*\x13\x14\n\x0b\
    \n\x04\x04\x01\x02\x02\x12\x03+\x04*\n\x0c\n\x05\x04\x01\x02\x02\x04\x12\
    \x03+\x04\x0c\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03+\r\x13\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03+\x14%\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03+()\n\n\n\x02\x04\x02\x12\x04.\02\x01\n\n\n\x03\x04\x02\x01\x12\x03.\
    \x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\x03/\x04\x19\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03/\x04\x0f\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03/\x10\
    \x14\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03/\x17\x18\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x030\x04\x1a\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x030\x04\n\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x030\x0b\x15\n\x0c\n\x05\x04\x02\
    \x02\x01\x03\x12\x030\x18\x19\n\x0b\n\x04\x04\x02\x02\x02\x12\x031\x04\
    \x18\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x031\x04\n\n\x0c\n\x05\x04\x02\
    \x02\x02\x01\x12\x031\x0b\x13\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x031\
    \x16\x17\n\n\n\x02\x04\x03\x12\x044\09\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    4\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x035\x04\x19\n\x0c\n\x05\x04\x03\
    \x02\0\x06\x12\x035\x04\x0f\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x035\x10\
    \x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x035\x17\x18\n\x0b\n\x04\x04\x03\
    \x02\x01\x12\x036\x04\x1a\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x036\x04\n\
    \n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x036\x0b\x15\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x036\x18\x19\n\x0b\n\x04\x04\x03\x02\x02\x12\x037\x04\
    \x18\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x037\x04\n\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x037\x0b\x13\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x037\
    \x16\x17\n\x0b\n\x04\x04\x03\x02\x03\x12\x038\x04\x13\n\x0c\n\x05\x04\
    \x03\x02\x03\x05\x12\x038\x04\t\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x038\
    \n\x0e\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x038\x11\x12\n)\n\x02\x04\x04\
    \x12\x04=\0?\x012\x1d\x20NOTE:\x20comm\x20server\x20messsages\n\n\n\n\
    \x03\x04\x04\x01\x12\x03=\x08\x15\n\x0b\n\x04\x04\x04\x02\0\x12\x03>\x04\
    \x19\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03>\x04\x0f\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03>\x10\x14\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03>\x17\
    \x18\n\n\n\x02\x04\x05\x12\x04A\0D\x01\n\n\n\x03\x04\x05\x01\x12\x03A\
    \x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x03B\x04\x19\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x03B\x04\x0f\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03B\x10\
    \x14\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03B\x17\x18\n\x0b\n\x04\x04\x05\
    \x02\x01\x12\x03C\x04\x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03C\x04\n\
    \n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03C\x0b\x0f\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x03C\x12\x13\nX\n\x02\x04\x06\x12\x04G\0K\x01\x1aL\x20N\
    OTE:\x20topics\x20is\x20a\x20space\x20separated\x20string\x20in\x20the\
    \x20format\x20specified\x20by\x20Format\n\n\n\n\x03\x04\x06\x01\x12\x03G\
    \x08\x1b\n\x0b\n\x04\x04\x06\x02\0\x12\x03H\x04\x19\n\x0c\n\x05\x04\x06\
    \x02\0\x06\x12\x03H\x04\x0f\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03H\x10\
    \x14\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03H\x17\x18\n\x0b\n\x04\x04\x06\
    \x02\x01\x12\x03I\x04\x16\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03I\x04\n\
    \n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03I\x0b\x11\n\x0c\n\x05\x04\x06\
    \x02\x01\x03\x12\x03I\x14\x15\n\x0b\n\x04\x04\x06\x02\x02\x12\x03J\x04\
    \x15\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03J\x04\t\n\x0c\n\x05\x04\x06\
    \x02\x02\x01\x12\x03J\n\x10\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03J\x13\
    \x14\n)\n\x02\x04\x07\x12\x04O\0S\x012\x1d\x20NOTE:\x20comm\x20server\
    \x20messsages\n\n\n\n\x03\x04\x07\x01\x12\x03O\x08\x13\n\x0b\n\x04\x04\
    \x07\x02\0\x12\x03P\x04\x19\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03P\x04\
    \x0f\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03P\x10\x14\n\x0c\n\x05\x04\x07\
    \x02\0\x03\x12\x03P\x17\x18\n\x0b\n\x04\x04\x07\x02\x01\x12\x03Q\x04\x12\
    \n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03Q\x04\x08\n\x0c\n\x05\x04\x07\
    \x02\x01\x01\x12\x03Q\t\r\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03Q\x10\
    \x11\n\x0b\n\x04\x04\x07\x02\x02\x12\x03R\x04\x13\n\x0c\n\x05\x04\x07\
    \x02\x02\x05\x12\x03R\x04\t\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03R\n\
    \x0e\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03R\x11\x12\n\n\n\x02\x04\x08\
    \x12\x04U\0Z\x01\n\n\n\x03\x04\x08\x01\x12\x03U\x08\x14\n\x0b\n\x04\x04\
    \x08\x02\0\x12\x03V\x04\x19\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03V\x04\
    \x0f\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03V\x10\x14\n\x0c\n\x05\x04\x08\
    \x02\0\x03\x12\x03V\x17\x18\n\x0b\n\x04\x04\x08\x02\x01\x12\x03W\x04\x1a\
    \n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03W\x04\n\n\x0c\n\x05\x04\x08\x02\
    \x01\x01\x12\x03W\x0b\x15\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03W\x18\
    \x19\n\x0b\n\x04\x04\x08\x02\x02\x12\x03X\x04\x15\n\x0c\n\x05\x04\x08\
    \x02\x02\x05\x12\x03X\x04\n\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03X\x0b\
    \x10\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03X\x13\x14\n\x0b\n\x04\x04\
    \x08\x02\x03\x12\x03Y\x04\x13\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03Y\
    \x04\t\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03Y\n\x0e\n\x0c\n\x05\x04\
    \x08\x02\x03\x03\x12\x03Y\x11\x12\n\n\n\x02\x04\t\x12\x04\\\0`\x01\n\n\n\
    \x03\x04\t\x01\x12\x03\\\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\x03]\x04\
    \x19\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03]\x04\x0f\n\x0c\n\x05\x04\t\x02\
    \0\x01\x12\x03]\x10\x14\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03]\x17\x18\n\
    \x0b\n\x04\x04\t\x02\x01\x12\x03^\x04\x1a\n\x0c\n\x05\x04\t\x02\x01\x05\
    \x12\x03^\x04\n\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03^\x0b\x15\n\x0c\n\
    \x05\x04\t\x02\x01\x03\x12\x03^\x18\x19\n\x0b\n\x04\x04\t\x02\x02\x12\
    \x03_\x04\x13\n\x0c\n\x05\x04\t\x02\x02\x05\x12\x03_\x04\t\n\x0c\n\x05\
    \x04\t\x02\x02\x01\x12\x03_\n\x0e\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03_\
    \x11\x12\n\n\n\x02\x04\n\x12\x04b\0i\x01\n\n\n\x03\x04\n\x01\x12\x03b\
    \x08\x1c\n\x0b\n\x04\x04\n\x02\0\x12\x03c\x04\x19\n\x0c\n\x05\x04\n\x02\
    \0\x06\x12\x03c\x04\x0f\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03c\x10\x14\n\
    \x0c\n\x05\x04\n\x02\0\x03\x12\x03c\x17\x18\n\x0b\n\x04\x04\n\x02\x01\
    \x12\x03d\x04\x1a\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03d\x04\n\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03d\x0b\x15\n\x0c\n\x05\x04\n\x02\x01\x03\
    \x12\x03d\x18\x19\n\x0b\n\x04\x04\n\x02\x02\x12\x03e\x04\x15\n\x0c\n\x05\
    \x04\n\x02\x02\x05\x12\x03e\x04\n\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03e\
    \x0b\x10\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03e\x13\x14\n\x0b\n\x04\x04\
    \n\x02\x03\x12\x03f\x04\x17\n\x0c\n\x05\x04\n\x02\x03\x05\x12\x03f\x04\t\
    \n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03f\n\x12\n\x0c\n\x05\x04\n\x02\x03\
    \x03\x12\x03f\x15\x16\n\x0b\n\x04\x04\n\x02\x04\x12\x03g\x04\x12\n\x0c\n\
    \x05\x04\n\x02\x04\x06\x12\x03g\x04\x08\n\x0c\n\x05\x04\n\x02\x04\x01\
    \x12\x03g\t\r\n\x0c\n\x05\x04\n\x02\x04\x03\x12\x03g\x10\x11\n\x0b\n\x04\
    \x04\n\x02\x05\x12\x03h\x04\x13\n\x0c\n\x05\x04\n\x02\x05\x05\x12\x03h\
    \x04\t\n\x0c\n\x05\x04\n\x02\x05\x01\x12\x03h\n\x0e\n\x0c\n\x05\x04\n\
    \x02\x05\x03\x12\x03h\x11\x12\n\n\n\x02\x04\x0b\x12\x04k\0q\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03k\x08\x1e\n\x0b\n\x04\x04\x0b\x02\0\x12\x03l\x04\
    \x19\n\x0c\n\x05\x04\x0b\x02\0\x06\x12\x03l\x04\x0f\n\x0c\n\x05\x04\x0b\
    \x02\0\x01\x12\x03l\x10\x14\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03l\x17\
    \x18\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03m\x04\x1a\n\x0c\n\x05\x04\x0b\
    \x02\x01\x05\x12\x03m\x04\n\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03m\x0b\
    \x15\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03m\x18\x19\n\x0b\n\x04\x04\
    \x0b\x02\x02\x12\x03n\x04\x17\n\x0c\n\x05\x04\x0b\x02\x02\x05\x12\x03n\
    \x04\t\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\x03n\n\x12\n\x0c\n\x05\x04\
    \x0b\x02\x02\x03\x12\x03n\x15\x16\n\x0b\n\x04\x04\x0b\x02\x03\x12\x03o\
    \x04\x12\n\x0c\n\x05\x04\x0b\x02\x03\x06\x12\x03o\x04\x08\n\x0c\n\x05\
    \x04\x0b\x02\x03\x01\x12\x03o\t\r\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\
    \x03o\x10\x11\n\x0b\n\x04\x04\x0b\x02\x04\x12\x03p\x04\x13\n\x0c\n\x05\
    \x04\x0b\x02\x04\x05\x12\x03p\x04\t\n\x0c\n\x05\x04\x0b\x02\x04\x01\x12\
    \x03p\n\x0e\n\x0c\n\x05\x04\x0b\x02\x04\x03\x12\x03p\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(CoordinatorMessage::generated_message_descriptor_data());
            messages.push(WelcomeMessage::generated_message_descriptor_data());
            messages.push(ConnectMessage::generated_message_descriptor_data());
            messages.push(WebRtcMessage::generated_message_descriptor_data());
            messages.push(MessageHeader::generated_message_descriptor_data());
            messages.push(PingMessage::generated_message_descriptor_data());
            messages.push(SubscriptionMessage::generated_message_descriptor_data());
            messages.push(AuthMessage::generated_message_descriptor_data());
            messages.push(TopicMessage::generated_message_descriptor_data());
            messages.push(TopicFWMessage::generated_message_descriptor_data());
            messages.push(TopicIdentityMessage::generated_message_descriptor_data());
            messages.push(TopicIdentityFWMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(MessageType::generated_enum_descriptor_data());
            enums.push(Role::generated_enum_descriptor_data());
            enums.push(Format::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
