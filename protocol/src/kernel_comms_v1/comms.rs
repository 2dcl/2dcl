// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `kernel/comms/v1/comms.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.AuthData)
pub struct AuthData {
    // message fields
    // @@protoc_insertion_point(field:protocol.AuthData.signature)
    pub signature: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.AuthData.identity)
    pub identity: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.AuthData.timestamp)
    pub timestamp: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.AuthData.access_token)
    pub access_token: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.AuthData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AuthData {
    fn default() -> &'a AuthData {
        <AuthData as ::protobuf::Message>::default_instance()
    }
}

impl AuthData {
    pub fn new() -> AuthData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &AuthData| { &m.signature },
            |m: &mut AuthData| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "identity",
            |m: &AuthData| { &m.identity },
            |m: &mut AuthData| { &mut m.identity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &AuthData| { &m.timestamp },
            |m: &mut AuthData| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "access_token",
            |m: &AuthData| { &m.access_token },
            |m: &mut AuthData| { &mut m.access_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AuthData>(
            "AuthData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AuthData {
    const NAME: &'static str = "AuthData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signature = is.read_string()?;
                },
                18 => {
                    self.identity = is.read_string()?;
                },
                26 => {
                    self.timestamp = is.read_string()?;
                },
                34 => {
                    self.access_token = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.signature);
        }
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.identity);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.timestamp);
        }
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.access_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.signature.is_empty() {
            os.write_string(1, &self.signature)?;
        }
        if !self.identity.is_empty() {
            os.write_string(2, &self.identity)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(3, &self.timestamp)?;
        }
        if !self.access_token.is_empty() {
            os.write_string(4, &self.access_token)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AuthData {
        AuthData::new()
    }

    fn clear(&mut self) {
        self.signature.clear();
        self.identity.clear();
        self.timestamp.clear();
        self.access_token.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AuthData {
        static instance: AuthData = AuthData {
            signature: ::std::string::String::new(),
            identity: ::std::string::String::new(),
            timestamp: ::std::string::String::new(),
            access_token: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AuthData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AuthData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AuthData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.DataHeader)
pub struct DataHeader {
    // message fields
    // @@protoc_insertion_point(field:protocol.DataHeader.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.DataHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataHeader {
    fn default() -> &'a DataHeader {
        <DataHeader as ::protobuf::Message>::default_instance()
    }
}

impl DataHeader {
    pub fn new() -> DataHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &DataHeader| { &m.category },
            |m: &mut DataHeader| { &mut m.category },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataHeader>(
            "DataHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataHeader {
    const NAME: &'static str = "DataHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataHeader {
        DataHeader::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataHeader {
        static instance: DataHeader = DataHeader {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.PositionData)
pub struct PositionData {
    // message fields
    // @@protoc_insertion_point(field:protocol.PositionData.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // @@protoc_insertion_point(field:protocol.PositionData.time)
    pub time: f64,
    // @@protoc_insertion_point(field:protocol.PositionData.position_x)
    pub position_x: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.position_y)
    pub position_y: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.position_z)
    pub position_z: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.rotation_x)
    pub rotation_x: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.rotation_y)
    pub rotation_y: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.rotation_z)
    pub rotation_z: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.rotation_w)
    pub rotation_w: f32,
    // @@protoc_insertion_point(field:protocol.PositionData.immediate)
    pub immediate: bool,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.PositionData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PositionData {
    fn default() -> &'a PositionData {
        <PositionData as ::protobuf::Message>::default_instance()
    }
}

impl PositionData {
    pub fn new() -> PositionData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &PositionData| { &m.category },
            |m: &mut PositionData| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &PositionData| { &m.time },
            |m: &mut PositionData| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_x",
            |m: &PositionData| { &m.position_x },
            |m: &mut PositionData| { &mut m.position_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_y",
            |m: &PositionData| { &m.position_y },
            |m: &mut PositionData| { &mut m.position_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_z",
            |m: &PositionData| { &m.position_z },
            |m: &mut PositionData| { &mut m.position_z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rotation_x",
            |m: &PositionData| { &m.rotation_x },
            |m: &mut PositionData| { &mut m.rotation_x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rotation_y",
            |m: &PositionData| { &m.rotation_y },
            |m: &mut PositionData| { &mut m.rotation_y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rotation_z",
            |m: &PositionData| { &m.rotation_z },
            |m: &mut PositionData| { &mut m.rotation_z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rotation_w",
            |m: &PositionData| { &m.rotation_w },
            |m: &mut PositionData| { &mut m.rotation_w },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "immediate",
            |m: &PositionData| { &m.immediate },
            |m: &mut PositionData| { &mut m.immediate },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PositionData>(
            "PositionData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PositionData {
    const NAME: &'static str = "PositionData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                29 => {
                    self.position_x = is.read_float()?;
                },
                37 => {
                    self.position_y = is.read_float()?;
                },
                45 => {
                    self.position_z = is.read_float()?;
                },
                53 => {
                    self.rotation_x = is.read_float()?;
                },
                61 => {
                    self.rotation_y = is.read_float()?;
                },
                69 => {
                    self.rotation_z = is.read_float()?;
                },
                77 => {
                    self.rotation_w = is.read_float()?;
                },
                80 => {
                    self.immediate = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        if self.position_x != 0. {
            my_size += 1 + 4;
        }
        if self.position_y != 0. {
            my_size += 1 + 4;
        }
        if self.position_z != 0. {
            my_size += 1 + 4;
        }
        if self.rotation_x != 0. {
            my_size += 1 + 4;
        }
        if self.rotation_y != 0. {
            my_size += 1 + 4;
        }
        if self.rotation_z != 0. {
            my_size += 1 + 4;
        }
        if self.rotation_w != 0. {
            my_size += 1 + 4;
        }
        if self.immediate != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        if self.position_x != 0. {
            os.write_float(3, self.position_x)?;
        }
        if self.position_y != 0. {
            os.write_float(4, self.position_y)?;
        }
        if self.position_z != 0. {
            os.write_float(5, self.position_z)?;
        }
        if self.rotation_x != 0. {
            os.write_float(6, self.rotation_x)?;
        }
        if self.rotation_y != 0. {
            os.write_float(7, self.rotation_y)?;
        }
        if self.rotation_z != 0. {
            os.write_float(8, self.rotation_z)?;
        }
        if self.rotation_w != 0. {
            os.write_float(9, self.rotation_w)?;
        }
        if self.immediate != false {
            os.write_bool(10, self.immediate)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PositionData {
        PositionData::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.time = 0.;
        self.position_x = 0.;
        self.position_y = 0.;
        self.position_z = 0.;
        self.rotation_x = 0.;
        self.rotation_y = 0.;
        self.rotation_z = 0.;
        self.rotation_w = 0.;
        self.immediate = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PositionData {
        static instance: PositionData = PositionData {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            position_x: 0.,
            position_y: 0.,
            position_z: 0.,
            rotation_x: 0.,
            rotation_y: 0.,
            rotation_z: 0.,
            rotation_w: 0.,
            immediate: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PositionData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PositionData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PositionData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PositionData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProfileData)
pub struct ProfileData {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProfileData.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // @@protoc_insertion_point(field:protocol.ProfileData.time)
    pub time: f64,
    // @@protoc_insertion_point(field:protocol.ProfileData.profile_version)
    pub profile_version: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.ProfileData.profile_type)
    pub profile_type: ::protobuf::EnumOrUnknown<profile_data::ProfileType>,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProfileData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileData {
    fn default() -> &'a ProfileData {
        <ProfileData as ::protobuf::Message>::default_instance()
    }
}

impl ProfileData {
    pub fn new() -> ProfileData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &ProfileData| { &m.category },
            |m: &mut ProfileData| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &ProfileData| { &m.time },
            |m: &mut ProfileData| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "profile_version",
            |m: &ProfileData| { &m.profile_version },
            |m: &mut ProfileData| { &mut m.profile_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "profile_type",
            |m: &ProfileData| { &m.profile_type },
            |m: &mut ProfileData| { &mut m.profile_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProfileData>(
            "ProfileData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProfileData {
    const NAME: &'static str = "ProfileData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                26 => {
                    self.profile_version = is.read_string()?;
                },
                32 => {
                    self.profile_type = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        if !self.profile_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.profile_version);
        }
        if self.profile_type != ::protobuf::EnumOrUnknown::new(profile_data::ProfileType::LOCAL) {
            my_size += ::protobuf::rt::int32_size(4, self.profile_type.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        if !self.profile_version.is_empty() {
            os.write_string(3, &self.profile_version)?;
        }
        if self.profile_type != ::protobuf::EnumOrUnknown::new(profile_data::ProfileType::LOCAL) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.profile_type))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileData {
        ProfileData::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.time = 0.;
        self.profile_version.clear();
        self.profile_type = ::protobuf::EnumOrUnknown::new(profile_data::ProfileType::LOCAL);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileData {
        static instance: ProfileData = ProfileData {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            profile_version: ::std::string::String::new(),
            profile_type: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProfileData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `ProfileData`
pub mod profile_data {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:protocol.ProfileData.ProfileType)
    pub enum ProfileType {
        // @@protoc_insertion_point(enum_value:protocol.ProfileData.ProfileType.LOCAL)
        LOCAL = 0,
        // @@protoc_insertion_point(enum_value:protocol.ProfileData.ProfileType.DEPLOYED)
        DEPLOYED = 1,
    }

    impl ::protobuf::Enum for ProfileType {
        const NAME: &'static str = "ProfileType";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ProfileType> {
            match value {
                0 => ::std::option::Option::Some(ProfileType::LOCAL),
                1 => ::std::option::Option::Some(ProfileType::DEPLOYED),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ProfileType] = &[
            ProfileType::LOCAL,
            ProfileType::DEPLOYED,
        ];
    }

    impl ::protobuf::EnumFull for ProfileType {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("ProfileData.ProfileType").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for ProfileType {
        fn default() -> Self {
            ProfileType::LOCAL
        }
    }

    impl ProfileType {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ProfileType>("ProfileData.ProfileType")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProfileRequestData)
pub struct ProfileRequestData {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProfileRequestData.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // @@protoc_insertion_point(field:protocol.ProfileRequestData.time)
    pub time: f64,
    // @@protoc_insertion_point(field:protocol.ProfileRequestData.profile_version)
    pub profile_version: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.ProfileRequestData.user_id)
    pub user_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProfileRequestData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileRequestData {
    fn default() -> &'a ProfileRequestData {
        <ProfileRequestData as ::protobuf::Message>::default_instance()
    }
}

impl ProfileRequestData {
    pub fn new() -> ProfileRequestData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &ProfileRequestData| { &m.category },
            |m: &mut ProfileRequestData| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &ProfileRequestData| { &m.time },
            |m: &mut ProfileRequestData| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "profile_version",
            |m: &ProfileRequestData| { &m.profile_version },
            |m: &mut ProfileRequestData| { &mut m.profile_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "user_id",
            |m: &ProfileRequestData| { &m.user_id },
            |m: &mut ProfileRequestData| { &mut m.user_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProfileRequestData>(
            "ProfileRequestData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProfileRequestData {
    const NAME: &'static str = "ProfileRequestData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                26 => {
                    self.profile_version = is.read_string()?;
                },
                34 => {
                    self.user_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        if !self.profile_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.profile_version);
        }
        if !self.user_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.user_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        if !self.profile_version.is_empty() {
            os.write_string(3, &self.profile_version)?;
        }
        if !self.user_id.is_empty() {
            os.write_string(4, &self.user_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileRequestData {
        ProfileRequestData::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.time = 0.;
        self.profile_version.clear();
        self.user_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileRequestData {
        static instance: ProfileRequestData = ProfileRequestData {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            profile_version: ::std::string::String::new(),
            user_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProfileRequestData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileRequestData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileRequestData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileRequestData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ProfileResponseData)
pub struct ProfileResponseData {
    // message fields
    // @@protoc_insertion_point(field:protocol.ProfileResponseData.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // @@protoc_insertion_point(field:protocol.ProfileResponseData.time)
    pub time: f64,
    // @@protoc_insertion_point(field:protocol.ProfileResponseData.serialized_profile)
    pub serialized_profile: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ProfileResponseData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ProfileResponseData {
    fn default() -> &'a ProfileResponseData {
        <ProfileResponseData as ::protobuf::Message>::default_instance()
    }
}

impl ProfileResponseData {
    pub fn new() -> ProfileResponseData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &ProfileResponseData| { &m.category },
            |m: &mut ProfileResponseData| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &ProfileResponseData| { &m.time },
            |m: &mut ProfileResponseData| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serialized_profile",
            |m: &ProfileResponseData| { &m.serialized_profile },
            |m: &mut ProfileResponseData| { &mut m.serialized_profile },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ProfileResponseData>(
            "ProfileResponseData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ProfileResponseData {
    const NAME: &'static str = "ProfileResponseData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                26 => {
                    self.serialized_profile = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        if !self.serialized_profile.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.serialized_profile);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        if !self.serialized_profile.is_empty() {
            os.write_string(3, &self.serialized_profile)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ProfileResponseData {
        ProfileResponseData::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.time = 0.;
        self.serialized_profile.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ProfileResponseData {
        static instance: ProfileResponseData = ProfileResponseData {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            serialized_profile: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ProfileResponseData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ProfileResponseData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ProfileResponseData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProfileResponseData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:protocol.ChatData)
pub struct ChatData {
    // message fields
    // @@protoc_insertion_point(field:protocol.ChatData.category)
    pub category: ::protobuf::EnumOrUnknown<Category>,
    // @@protoc_insertion_point(field:protocol.ChatData.time)
    pub time: f64,
    // @@protoc_insertion_point(field:protocol.ChatData.message_id)
    pub message_id: ::std::string::String,
    // @@protoc_insertion_point(field:protocol.ChatData.text)
    pub text: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:protocol.ChatData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ChatData {
    fn default() -> &'a ChatData {
        <ChatData as ::protobuf::Message>::default_instance()
    }
}

impl ChatData {
    pub fn new() -> ChatData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "category",
            |m: &ChatData| { &m.category },
            |m: &mut ChatData| { &mut m.category },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &ChatData| { &m.time },
            |m: &mut ChatData| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_id",
            |m: &ChatData| { &m.message_id },
            |m: &mut ChatData| { &mut m.message_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &ChatData| { &m.text },
            |m: &mut ChatData| { &mut m.text },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ChatData>(
            "ChatData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ChatData {
    const NAME: &'static str = "ChatData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.category = is.read_enum_or_unknown()?;
                },
                17 => {
                    self.time = is.read_double()?;
                },
                26 => {
                    self.message_id = is.read_string()?;
                },
                34 => {
                    self.text = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            my_size += ::protobuf::rt::int32_size(1, self.category.value());
        }
        if self.time != 0. {
            my_size += 1 + 8;
        }
        if !self.message_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message_id);
        }
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.category != ::protobuf::EnumOrUnknown::new(Category::UNKNOWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.category))?;
        }
        if self.time != 0. {
            os.write_double(2, self.time)?;
        }
        if !self.message_id.is_empty() {
            os.write_string(3, &self.message_id)?;
        }
        if !self.text.is_empty() {
            os.write_string(4, &self.text)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ChatData {
        ChatData::new()
    }

    fn clear(&mut self) {
        self.category = ::protobuf::EnumOrUnknown::new(Category::UNKNOWN);
        self.time = 0.;
        self.message_id.clear();
        self.text.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ChatData {
        static instance: ChatData = ChatData {
            category: ::protobuf::EnumOrUnknown::from_i32(0),
            time: 0.,
            message_id: ::std::string::String::new(),
            text: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ChatData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ChatData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ChatData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChatData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:protocol.Category)
pub enum Category {
    // @@protoc_insertion_point(enum_value:protocol.Category.UNKNOWN)
    UNKNOWN = 0,
    // @@protoc_insertion_point(enum_value:protocol.Category.POSITION)
    POSITION = 1,
    // @@protoc_insertion_point(enum_value:protocol.Category.PROFILE)
    PROFILE = 2,
    // @@protoc_insertion_point(enum_value:protocol.Category.CHAT)
    CHAT = 3,
    // @@protoc_insertion_point(enum_value:protocol.Category.SCENE_MESSAGE)
    SCENE_MESSAGE = 4,
    // @@protoc_insertion_point(enum_value:protocol.Category.PROF_REQ)
    PROF_REQ = 5,
    // @@protoc_insertion_point(enum_value:protocol.Category.PROF_RES)
    PROF_RES = 6,
}

impl ::protobuf::Enum for Category {
    const NAME: &'static str = "Category";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Category> {
        match value {
            0 => ::std::option::Option::Some(Category::UNKNOWN),
            1 => ::std::option::Option::Some(Category::POSITION),
            2 => ::std::option::Option::Some(Category::PROFILE),
            3 => ::std::option::Option::Some(Category::CHAT),
            4 => ::std::option::Option::Some(Category::SCENE_MESSAGE),
            5 => ::std::option::Option::Some(Category::PROF_REQ),
            6 => ::std::option::Option::Some(Category::PROF_RES),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Category] = &[
        Category::UNKNOWN,
        Category::POSITION,
        Category::PROFILE,
        Category::CHAT,
        Category::SCENE_MESSAGE,
        Category::PROF_REQ,
        Category::PROF_RES,
    ];
}

impl ::protobuf::EnumFull for Category {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Category").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Category {
    fn default() -> Self {
        Category::UNKNOWN
    }
}

impl Category {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Category>("Category")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bkernel/comms/v1/comms.proto\x12\x08protocol\"\x85\x01\n\x08AuthDat\
    a\x12\x1c\n\tsignature\x18\x01\x20\x01(\tR\tsignature\x12\x1a\n\x08ident\
    ity\x18\x02\x20\x01(\tR\x08identity\x12\x1c\n\ttimestamp\x18\x03\x20\x01\
    (\tR\ttimestamp\x12!\n\x0caccess_token\x18\x04\x20\x01(\tR\x0baccessToke\
    n\"<\n\nDataHeader\x12.\n\x08category\x18\x01\x20\x01(\x0e2\x12.protocol\
    .CategoryR\x08category\"\xc9\x02\n\x0cPositionData\x12.\n\x08category\
    \x18\x01\x20\x01(\x0e2\x12.protocol.CategoryR\x08category\x12\x12\n\x04t\
    ime\x18\x02\x20\x01(\x01R\x04time\x12\x1d\n\nposition_x\x18\x03\x20\x01(\
    \x02R\tpositionX\x12\x1d\n\nposition_y\x18\x04\x20\x01(\x02R\tpositionY\
    \x12\x1d\n\nposition_z\x18\x05\x20\x01(\x02R\tpositionZ\x12\x1d\n\nrotat\
    ion_x\x18\x06\x20\x01(\x02R\trotationX\x12\x1d\n\nrotation_y\x18\x07\x20\
    \x01(\x02R\trotationY\x12\x1d\n\nrotation_z\x18\x08\x20\x01(\x02R\trotat\
    ionZ\x12\x1d\n\nrotation_w\x18\t\x20\x01(\x02R\trotationW\x12\x1c\n\timm\
    ediate\x18\n\x20\x01(\x08R\timmediate\"\xe8\x01\n\x0bProfileData\x12.\n\
    \x08category\x18\x01\x20\x01(\x0e2\x12.protocol.CategoryR\x08category\
    \x12\x12\n\x04time\x18\x02\x20\x01(\x01R\x04time\x12'\n\x0fprofile_versi\
    on\x18\x03\x20\x01(\tR\x0eprofileVersion\x12D\n\x0cprofile_type\x18\x04\
    \x20\x01(\x0e2!.protocol.ProfileData.ProfileTypeR\x0bprofileType\"&\n\
    \x0bProfileType\x12\t\n\x05LOCAL\x10\0\x12\x0c\n\x08DEPLOYED\x10\x01\"\
    \x9a\x01\n\x12ProfileRequestData\x12.\n\x08category\x18\x01\x20\x01(\x0e\
    2\x12.protocol.CategoryR\x08category\x12\x12\n\x04time\x18\x02\x20\x01(\
    \x01R\x04time\x12'\n\x0fprofile_version\x18\x03\x20\x01(\tR\x0eprofileVe\
    rsion\x12\x17\n\x07user_id\x18\x04\x20\x01(\tR\x06userId\"\x88\x01\n\x13\
    ProfileResponseData\x12.\n\x08category\x18\x01\x20\x01(\x0e2\x12.protoco\
    l.CategoryR\x08category\x12\x12\n\x04time\x18\x02\x20\x01(\x01R\x04time\
    \x12-\n\x12serialized_profile\x18\x03\x20\x01(\tR\x11serializedProfile\"\
    \x81\x01\n\x08ChatData\x12.\n\x08category\x18\x01\x20\x01(\x0e2\x12.prot\
    ocol.CategoryR\x08category\x12\x12\n\x04time\x18\x02\x20\x01(\x01R\x04ti\
    me\x12\x1d\n\nmessage_id\x18\x03\x20\x01(\tR\tmessageId\x12\x12\n\x04tex\
    t\x18\x04\x20\x01(\tR\x04text*k\n\x08Category\x12\x0b\n\x07UNKNOWN\x10\0\
    \x12\x0c\n\x08POSITION\x10\x01\x12\x0b\n\x07PROFILE\x10\x02\x12\x08\n\
    \x04CHAT\x10\x03\x12\x11\n\rSCENE_MESSAGE\x10\x04\x12\x0c\n\x08PROF_REQ\
    \x10\x05\x12\x0c\n\x08PROF_RES\x10\x06J\xe7\x11\n\x06\x12\x04\0\0C\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x11\n\n\n\
    \x02\x04\0\x12\x04\x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x10\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x19\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\x14\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x05\x17\x18\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x06\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x04\n\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x13\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x06\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\x04\x19\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x07\x0b\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x17\x18\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x04\x1c\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\x0b\x17\
    \n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x1a\x1b\n\n\n\x02\x05\0\x12\
    \x04\x0b\0\x13\x01\n\n\n\x03\x05\0\x01\x12\x03\x0b\x05\r\n\x0b\n\x04\x05\
    \0\x02\0\x12\x03\x0c\x05\x11\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0c\x05\
    \x0c\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x0c\x0f\x10\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\r\x05\x12\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\r\x05\r\
    \n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\r\x10\x11\n\x0b\n\x04\x05\0\x02\
    \x02\x12\x03\x0e\x05\x11\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0e\x05\
    \x0c\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0e\x0f\x10\n\x0b\n\x04\x05\0\
    \x02\x03\x12\x03\x0f\x05\x0e\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0f\
    \x05\t\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0f\x0c\r\n\x0b\n\x04\x05\0\
    \x02\x04\x12\x03\x10\x05\x17\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x10\
    \x05\x12\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x10\x15\x16\n\x0b\n\x04\
    \x05\0\x02\x05\x12\x03\x11\x05\x12\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\
    \x11\x05\r\n\x0c\n\x05\x05\0\x02\x05\x02\x12\x03\x11\x10\x11\n\x0b\n\x04\
    \x05\0\x02\x06\x12\x03\x12\x05\x12\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\
    \x12\x05\r\n\x0c\n\x05\x05\0\x02\x06\x02\x12\x03\x12\x10\x11\n\n\n\x02\
    \x04\x01\x12\x04\x15\0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x15\x08\x12\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x16\x04\x1a\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x16\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x16\r\x15\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x16\x18\x19\n\n\n\x02\x04\x02\x12\
    \x04\x19\0$\x01\n\n\n\x03\x04\x02\x01\x12\x03\x19\x08\x14\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x1a\x04\x1a\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\
    \x1a\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1a\r\x15\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1a\x18\x19\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x1b\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1b\x04\n\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x1b\x12\x13\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x1c\x04\
    \x19\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1c\x04\t\n\x0c\n\x05\x04\
    \x02\x02\x02\x01\x12\x03\x1c\n\x14\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\
    \x03\x1c\x17\x18\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1d\x04\x19\n\x0c\n\
    \x05\x04\x02\x02\x03\x05\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\x02\x02\x03\
    \x01\x12\x03\x1d\n\x14\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1d\x17\
    \x18\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\x1e\x04\x19\n\x0c\n\x05\x04\x02\
    \x02\x04\x05\x12\x03\x1e\x04\t\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\
    \x1e\n\x14\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x1e\x17\x18\n\x0b\n\
    \x04\x04\x02\x02\x05\x12\x03\x1f\x04\x19\n\x0c\n\x05\x04\x02\x02\x05\x05\
    \x12\x03\x1f\x04\t\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x1f\n\x14\n\
    \x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x1f\x17\x18\n\x0b\n\x04\x04\x02\
    \x02\x06\x12\x03\x20\x04\x19\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x20\
    \x04\t\n\x0c\n\x05\x04\x02\x02\x06\x01\x12\x03\x20\n\x14\n\x0c\n\x05\x04\
    \x02\x02\x06\x03\x12\x03\x20\x17\x18\n\x0b\n\x04\x04\x02\x02\x07\x12\x03\
    !\x04\x19\n\x0c\n\x05\x04\x02\x02\x07\x05\x12\x03!\x04\t\n\x0c\n\x05\x04\
    \x02\x02\x07\x01\x12\x03!\n\x14\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03!\
    \x17\x18\n\x0b\n\x04\x04\x02\x02\x08\x12\x03\"\x04\x19\n\x0c\n\x05\x04\
    \x02\x02\x08\x05\x12\x03\"\x04\t\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03\
    \"\n\x14\n\x0c\n\x05\x04\x02\x02\x08\x03\x12\x03\"\x17\x18\n\x0b\n\x04\
    \x04\x02\x02\t\x12\x03#\x04\x18\n\x0c\n\x05\x04\x02\x02\t\x05\x12\x03#\
    \x04\x08\n\x0c\n\x05\x04\x02\x02\t\x01\x12\x03#\t\x12\n\x0c\n\x05\x04\
    \x02\x02\t\x03\x12\x03#\x15\x17\n\n\n\x02\x04\x03\x12\x04&\0/\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03&\x08\x13\n\x0b\n\x04\x04\x03\x02\0\x12\x03'\x04\
    \x1a\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03'\x04\x0c\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03'\r\x15\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03'\x18\x19\
    \n\x0b\n\x04\x04\x03\x02\x01\x12\x03(\x04\x14\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03(\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03(\x0b\x0f\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03(\x12\x13\n\x0b\n\x04\x04\x03\
    \x02\x02\x12\x03)\x04\x1f\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03)\x04\n\
    \n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03)\x0b\x1a\n\x0c\n\x05\x04\x03\
    \x02\x02\x03\x12\x03)\x1d\x1e\n\x0c\n\x04\x04\x03\x04\0\x12\x04*\x04-\
    \x05\n\x0c\n\x05\x04\x03\x04\0\x01\x12\x03*\t\x14\n\r\n\x06\x04\x03\x04\
    \0\x02\0\x12\x03+\x08\x12\n\x0e\n\x07\x04\x03\x04\0\x02\0\x01\x12\x03+\
    \x08\r\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03+\x10\x11\n\r\n\x06\
    \x04\x03\x04\0\x02\x01\x12\x03,\x08\x15\n\x0e\n\x07\x04\x03\x04\0\x02\
    \x01\x01\x12\x03,\x08\x10\n\x0e\n\x07\x04\x03\x04\0\x02\x01\x02\x12\x03,\
    \x13\x14\n\x0b\n\x04\x04\x03\x02\x03\x12\x03.\x04!\n\x0c\n\x05\x04\x03\
    \x02\x03\x06\x12\x03.\x04\x0f\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x03.\
    \x10\x1c\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03.\x1f\x20\n\n\n\x02\x04\
    \x04\x12\x041\06\x01\n\n\n\x03\x04\x04\x01\x12\x031\x08\x1a\n\x0b\n\x04\
    \x04\x04\x02\0\x12\x032\x04\x1a\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x032\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x032\r\x15\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x032\x18\x19\n\x0b\n\x04\x04\x04\x02\x01\x12\x033\x04\
    \x14\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x033\x04\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x033\x0b\x0f\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x033\
    \x12\x13\n\x0b\n\x04\x04\x04\x02\x02\x12\x034\x04\x1f\n\x0c\n\x05\x04\
    \x04\x02\x02\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x034\
    \x0b\x1a\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x034\x1d\x1e\n\x0b\n\x04\
    \x04\x04\x02\x03\x12\x035\x04\x17\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\
    \x035\x04\n\n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x035\x0b\x12\n\x0c\n\x05\
    \x04\x04\x02\x03\x03\x12\x035\x15\x16\n\n\n\x02\x04\x05\x12\x048\0<\x01\
    \n\n\n\x03\x04\x05\x01\x12\x038\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\
    \x039\x04\x1a\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x039\x04\x0c\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x039\r\x15\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x039\
    \x18\x19\n\x0b\n\x04\x04\x05\x02\x01\x12\x03:\x04\x14\n\x0c\n\x05\x04\
    \x05\x02\x01\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03:\
    \x0b\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03:\x12\x13\n\x0b\n\x04\
    \x04\x05\x02\x02\x12\x03;\x04\"\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03;\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03;\x0b\x1d\n\x0c\n\x05\x04\
    \x05\x02\x02\x03\x12\x03;\x20!\n\n\n\x02\x04\x06\x12\x04>\0C\x01\n\n\n\
    \x03\x04\x06\x01\x12\x03>\x08\x10\n\x0b\n\x04\x04\x06\x02\0\x12\x03?\x04\
    \x1a\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03?\x04\x0c\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x03?\r\x15\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03?\x18\x19\
    \n\x0b\n\x04\x04\x06\x02\x01\x12\x03@\x04\x14\n\x0c\n\x05\x04\x06\x02\
    \x01\x05\x12\x03@\x04\n\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03@\x0b\x0f\
    \n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03@\x12\x13\n\x0b\n\x04\x04\x06\
    \x02\x02\x12\x03A\x04\x1a\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03A\x04\n\
    \n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03A\x0b\x15\n\x0c\n\x05\x04\x06\
    \x02\x02\x03\x12\x03A\x18\x19\n\x0b\n\x04\x04\x06\x02\x03\x12\x03B\x04\
    \x14\n\x0c\n\x05\x04\x06\x02\x03\x05\x12\x03B\x04\n\n\x0c\n\x05\x04\x06\
    \x02\x03\x01\x12\x03B\x0b\x0f\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03B\
    \x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(AuthData::generated_message_descriptor_data());
            messages.push(DataHeader::generated_message_descriptor_data());
            messages.push(PositionData::generated_message_descriptor_data());
            messages.push(ProfileData::generated_message_descriptor_data());
            messages.push(ProfileRequestData::generated_message_descriptor_data());
            messages.push(ProfileResponseData::generated_message_descriptor_data());
            messages.push(ChatData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(Category::generated_enum_descriptor_data());
            enums.push(profile_data::ProfileType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
