// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/OnPointerDownResult.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBOnPointerDownResult)
pub struct PBOnPointerDownResult {
    // message fields
    // @@protoc_insertion_point(field:PBOnPointerDownResult.button)
    pub button: ::protobuf::EnumOrUnknown<super::ActionButton::ActionButton>,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.meshName)
    pub meshName: ::std::string::String,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.origin)
    pub origin: ::protobuf::MessageField<super::Vector3::Vector3>,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.direction)
    pub direction: ::protobuf::MessageField<super::Vector3::Vector3>,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.point)
    pub point: ::protobuf::MessageField<super::Vector3::Vector3>,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.normal)
    pub normal: ::protobuf::MessageField<super::Vector3::Vector3>,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.distance)
    pub distance: f32,
    // @@protoc_insertion_point(field:PBOnPointerDownResult.timestamp)
    pub timestamp: i32,
    // special fields
    // @@protoc_insertion_point(special_field:PBOnPointerDownResult.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBOnPointerDownResult {
    fn default() -> &'a PBOnPointerDownResult {
        <PBOnPointerDownResult as ::protobuf::Message>::default_instance()
    }
}

impl PBOnPointerDownResult {
    pub fn new() -> PBOnPointerDownResult {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "button",
            |m: &PBOnPointerDownResult| { &m.button },
            |m: &mut PBOnPointerDownResult| { &mut m.button },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "meshName",
            |m: &PBOnPointerDownResult| { &m.meshName },
            |m: &mut PBOnPointerDownResult| { &mut m.meshName },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector3::Vector3>(
            "origin",
            |m: &PBOnPointerDownResult| { &m.origin },
            |m: &mut PBOnPointerDownResult| { &mut m.origin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector3::Vector3>(
            "direction",
            |m: &PBOnPointerDownResult| { &m.direction },
            |m: &mut PBOnPointerDownResult| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector3::Vector3>(
            "point",
            |m: &PBOnPointerDownResult| { &m.point },
            |m: &mut PBOnPointerDownResult| { &mut m.point },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector3::Vector3>(
            "normal",
            |m: &PBOnPointerDownResult| { &m.normal },
            |m: &mut PBOnPointerDownResult| { &mut m.normal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "distance",
            |m: &PBOnPointerDownResult| { &m.distance },
            |m: &mut PBOnPointerDownResult| { &mut m.distance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &PBOnPointerDownResult| { &m.timestamp },
            |m: &mut PBOnPointerDownResult| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBOnPointerDownResult>(
            "PBOnPointerDownResult",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBOnPointerDownResult {
    const NAME: &'static str = "PBOnPointerDownResult";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.button = is.read_enum_or_unknown()?;
                },
                26 => {
                    self.meshName = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.origin)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.direction)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.point)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.normal)?;
                },
                69 => {
                    self.distance = is.read_float()?;
                },
                72 => {
                    self.timestamp = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.button != ::protobuf::EnumOrUnknown::new(super::ActionButton::ActionButton::POINTER) {
            my_size += ::protobuf::rt::int32_size(2, self.button.value());
        }
        if !self.meshName.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.meshName);
        }
        if let Some(v) = self.origin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.direction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.point.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.normal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.distance != 0. {
            my_size += 1 + 4;
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::int32_size(9, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.button != ::protobuf::EnumOrUnknown::new(super::ActionButton::ActionButton::POINTER) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.button))?;
        }
        if !self.meshName.is_empty() {
            os.write_string(3, &self.meshName)?;
        }
        if let Some(v) = self.origin.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.direction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.point.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.normal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if self.distance != 0. {
            os.write_float(8, self.distance)?;
        }
        if self.timestamp != 0 {
            os.write_int32(9, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBOnPointerDownResult {
        PBOnPointerDownResult::new()
    }

    fn clear(&mut self) {
        self.button = ::protobuf::EnumOrUnknown::new(super::ActionButton::ActionButton::POINTER);
        self.meshName.clear();
        self.origin.clear();
        self.direction.clear();
        self.point.clear();
        self.normal.clear();
        self.distance = 0.;
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBOnPointerDownResult {
        static instance: PBOnPointerDownResult = PBOnPointerDownResult {
            button: ::protobuf::EnumOrUnknown::from_i32(0),
            meshName: ::std::string::String::new(),
            origin: ::protobuf::MessageField::none(),
            direction: ::protobuf::MessageField::none(),
            point: ::protobuf::MessageField::none(),
            normal: ::protobuf::MessageField::none(),
            distance: 0.,
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBOnPointerDownResult {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBOnPointerDownResult").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBOnPointerDownResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBOnPointerDownResult {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ecs/components/OnPointerDownResult.proto\x1a\x0fcommon/id.proto\x1a\
    \x14common/Vector3.proto\x1a\x19common/ActionButton.proto\"\xa0\x02\n\
    \x15PBOnPointerDownResult\x12%\n\x06button\x18\x02\x20\x01(\x0e2\r.Actio\
    nButtonR\x06button\x12\x1a\n\x08meshName\x18\x03\x20\x01(\tR\x08meshName\
    \x12\x20\n\x06origin\x18\x04\x20\x01(\x0b2\x08.Vector3R\x06origin\x12&\n\
    \tdirection\x18\x05\x20\x01(\x0b2\x08.Vector3R\tdirection\x12\x1e\n\x05p\
    oint\x18\x06\x20\x01(\x0b2\x08.Vector3R\x05point\x12\x20\n\x06normal\x18\
    \x07\x20\x01(\x0b2\x08.Vector3R\x06normal\x12\x1a\n\x08distance\x18\x08\
    \x20\x01(\x02R\x08distance\x12\x1c\n\ttimestamp\x18\t\x20\x01(\x05R\ttim\
    estampB\x05\x80\xb5\x18\xaa\x08J\x9a\x04\n\x06\x12\x04\0\x03\x10\x01\n\
    \x08\n\x01\x0c\x12\x03\0\x03\x15\n\t\n\x02\x03\0\x12\x03\x02\0\x19\n\x08\
    \n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\x86\x03\x12\x03\x03\0!\n\t\
    \n\x02\x03\x01\x12\x03\x04\0\x1e\n\t\n\x02\x03\x02\x12\x03\x05\0#\n\n\n\
    \x02\x04\0\x12\x04\x07\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x1d\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02\x1a\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x08\x02\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\x0f\x15\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x18\x19\n\x0b\n\x04\x04\0\x02\x01\
    \x12\x03\t\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x11\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\t\x14\x15\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x02\x15\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\n\x02\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\n\n\x10\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x13\x14\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x0b\x02\x18\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\
    \x0b\x02\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\n\x13\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x0b\x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \x0c\x02\x14\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x0c\x02\t\n\x0c\n\x05\
    \x04\0\x02\x04\x01\x12\x03\x0c\n\x0f\n\x0c\n\x05\x04\0\x02\x04\x03\x12\
    \x03\x0c\x12\x13\n\x0b\n\x04\x04\0\x02\x05\x12\x03\r\x02\x15\n\x0c\n\x05\
    \x04\0\x02\x05\x06\x12\x03\r\x02\t\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\
    \r\n\x10\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\r\x13\x14\n\x0b\n\x04\x04\
    \0\x02\x06\x12\x03\x0e\x02\x15\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0e\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0e\x08\x10\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03\x0e\x13\x14\n\x0b\n\x04\x04\0\x02\x07\x12\x03\
    \x0f\x02\x16\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0f\x02\x07\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03\x0f\x08\x11\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x03\x0f\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(3);
            deps.push(super::id::file_descriptor().clone());
            deps.push(super::Vector3::file_descriptor().clone());
            deps.push(super::ActionButton::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBOnPointerDownResult::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
