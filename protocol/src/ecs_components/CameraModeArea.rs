// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/CameraModeArea.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBCameraModeArea)
pub struct PBCameraModeArea {
    // message fields
    // @@protoc_insertion_point(field:PBCameraModeArea.area)
    pub area: ::protobuf::MessageField<super::Vector3::Vector3>,
    // @@protoc_insertion_point(field:PBCameraModeArea.mode)
    pub mode: ::protobuf::EnumOrUnknown<CameraMode>,
    // special fields
    // @@protoc_insertion_point(special_field:PBCameraModeArea.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBCameraModeArea {
    fn default() -> &'a PBCameraModeArea {
        <PBCameraModeArea as ::protobuf::Message>::default_instance()
    }
}

impl PBCameraModeArea {
    pub fn new() -> PBCameraModeArea {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Vector3::Vector3>(
            "area",
            |m: &PBCameraModeArea| { &m.area },
            |m: &mut PBCameraModeArea| { &mut m.area },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mode",
            |m: &PBCameraModeArea| { &m.mode },
            |m: &mut PBCameraModeArea| { &mut m.mode },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBCameraModeArea>(
            "PBCameraModeArea",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBCameraModeArea {
    const NAME: &'static str = "PBCameraModeArea";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.area)?;
                },
                16 => {
                    self.mode = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.area.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(CameraMode::FIRST_PERSON) {
            my_size += ::protobuf::rt::int32_size(2, self.mode.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.area.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.mode != ::protobuf::EnumOrUnknown::new(CameraMode::FIRST_PERSON) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.mode))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBCameraModeArea {
        PBCameraModeArea::new()
    }

    fn clear(&mut self) {
        self.area.clear();
        self.mode = ::protobuf::EnumOrUnknown::new(CameraMode::FIRST_PERSON);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBCameraModeArea {
        static instance: PBCameraModeArea = PBCameraModeArea {
            area: ::protobuf::MessageField::none(),
            mode: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBCameraModeArea {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBCameraModeArea").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBCameraModeArea {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBCameraModeArea {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:CameraMode)
pub enum CameraMode {
    // @@protoc_insertion_point(enum_value:CameraMode.FIRST_PERSON)
    FIRST_PERSON = 0,
    // @@protoc_insertion_point(enum_value:CameraMode.THIRD_PERSON)
    THIRD_PERSON = 1,
}

impl ::protobuf::Enum for CameraMode {
    const NAME: &'static str = "CameraMode";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CameraMode> {
        match value {
            0 => ::std::option::Option::Some(CameraMode::FIRST_PERSON),
            1 => ::std::option::Option::Some(CameraMode::THIRD_PERSON),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CameraMode] = &[
        CameraMode::FIRST_PERSON,
        CameraMode::THIRD_PERSON,
    ];
}

impl ::protobuf::EnumFull for CameraMode {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CameraMode").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CameraMode {
    fn default() -> Self {
        CameraMode::FIRST_PERSON
    }
}

impl CameraMode {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CameraMode>("CameraMode")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#ecs/components/CameraModeArea.proto\x1a\x0fcommon/id.proto\x1a\x14com\
    mon/Vector3.proto\"Q\n\x10PBCameraModeArea\x12\x1c\n\x04area\x18\x01\x20\
    \x01(\x0b2\x08.Vector3R\x04area\x12\x1f\n\x04mode\x18\x02\x20\x01(\x0e2\
    \x0b.CameraModeR\x04mode*0\n\nCameraMode\x12\x10\n\x0cFIRST_PERSON\x10\0\
    \x12\x10\n\x0cTHIRD_PERSON\x10\x01B\x05\x80\xb5\x18\xaf\x08J\xaf\x02\n\
    \x06\x12\x04\0\0\x0e\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x02\0\x19\n\x08\n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\
    \x86\x03\x12\x03\x03\0!\n\t\n\x02\x03\x01\x12\x03\x04\0\x1e\n\n\n\x02\
    \x05\0\x12\x04\x06\0\t\x01\n\n\n\x03\x05\0\x01\x12\x03\x06\x05\x0f\n\x0b\
    \n\x04\x05\0\x02\0\x12\x03\x07\x02\x13\n\x0c\n\x05\x05\0\x02\0\x01\x12\
    \x03\x07\x02\x0e\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x07\x11\x12\n\x0b\n\
    \x04\x05\0\x02\x01\x12\x03\x08\x02\x13\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x03\x08\x02\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x08\x11\x12\n\n\n\
    \x02\x04\0\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x18\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02\x13\n\x0c\n\x05\x04\0\x02\0\x06\
    \x12\x03\x0c\x02\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\n\x0e\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0c\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\r\x02\x16\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\r\x02\x0c\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\r\r\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\r\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::id::file_descriptor().clone());
            deps.push(super::Vector3::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBCameraModeArea::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(CameraMode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
