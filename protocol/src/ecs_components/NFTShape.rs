// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/NFTShape.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBNFTShape)
pub struct PBNFTShape {
    // message fields
    // @@protoc_insertion_point(field:PBNFTShape.with_collisions)
    pub with_collisions: bool,
    // @@protoc_insertion_point(field:PBNFTShape.is_pointer_blocker)
    pub is_pointer_blocker: bool,
    // @@protoc_insertion_point(field:PBNFTShape.visible)
    pub visible: bool,
    // @@protoc_insertion_point(field:PBNFTShape.src)
    pub src: ::std::string::String,
    // @@protoc_insertion_point(field:PBNFTShape.asset_id)
    pub asset_id: ::std::string::String,
    // @@protoc_insertion_point(field:PBNFTShape.style)
    pub style: i32,
    // @@protoc_insertion_point(field:PBNFTShape.color)
    pub color: ::protobuf::MessageField<super::Color3::Color3>,
    // special fields
    // @@protoc_insertion_point(special_field:PBNFTShape.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBNFTShape {
    fn default() -> &'a PBNFTShape {
        <PBNFTShape as ::protobuf::Message>::default_instance()
    }
}

impl PBNFTShape {
    pub fn new() -> PBNFTShape {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "with_collisions",
            |m: &PBNFTShape| { &m.with_collisions },
            |m: &mut PBNFTShape| { &mut m.with_collisions },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_pointer_blocker",
            |m: &PBNFTShape| { &m.is_pointer_blocker },
            |m: &mut PBNFTShape| { &mut m.is_pointer_blocker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "visible",
            |m: &PBNFTShape| { &m.visible },
            |m: &mut PBNFTShape| { &mut m.visible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "src",
            |m: &PBNFTShape| { &m.src },
            |m: &mut PBNFTShape| { &mut m.src },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "asset_id",
            |m: &PBNFTShape| { &m.asset_id },
            |m: &mut PBNFTShape| { &mut m.asset_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "style",
            |m: &PBNFTShape| { &m.style },
            |m: &mut PBNFTShape| { &mut m.style },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "color",
            |m: &PBNFTShape| { &m.color },
            |m: &mut PBNFTShape| { &mut m.color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBNFTShape>(
            "PBNFTShape",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBNFTShape {
    const NAME: &'static str = "PBNFTShape";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.with_collisions = is.read_bool()?;
                },
                16 => {
                    self.is_pointer_blocker = is.read_bool()?;
                },
                24 => {
                    self.visible = is.read_bool()?;
                },
                34 => {
                    self.src = is.read_string()?;
                },
                42 => {
                    self.asset_id = is.read_string()?;
                },
                48 => {
                    self.style = is.read_int32()?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.color)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.with_collisions != false {
            my_size += 1 + 1;
        }
        if self.is_pointer_blocker != false {
            my_size += 1 + 1;
        }
        if self.visible != false {
            my_size += 1 + 1;
        }
        if !self.src.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.src);
        }
        if !self.asset_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.asset_id);
        }
        if self.style != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.style);
        }
        if let Some(v) = self.color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.with_collisions != false {
            os.write_bool(1, self.with_collisions)?;
        }
        if self.is_pointer_blocker != false {
            os.write_bool(2, self.is_pointer_blocker)?;
        }
        if self.visible != false {
            os.write_bool(3, self.visible)?;
        }
        if !self.src.is_empty() {
            os.write_string(4, &self.src)?;
        }
        if !self.asset_id.is_empty() {
            os.write_string(5, &self.asset_id)?;
        }
        if self.style != 0 {
            os.write_int32(6, self.style)?;
        }
        if let Some(v) = self.color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBNFTShape {
        PBNFTShape::new()
    }

    fn clear(&mut self) {
        self.with_collisions = false;
        self.is_pointer_blocker = false;
        self.visible = false;
        self.src.clear();
        self.asset_id.clear();
        self.style = 0;
        self.color.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBNFTShape {
        static instance: PBNFTShape = PBNFTShape {
            with_collisions: false,
            is_pointer_blocker: false,
            visible: false,
            src: ::std::string::String::new(),
            asset_id: ::std::string::String::new(),
            style: 0,
            color: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBNFTShape {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBNFTShape").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBNFTShape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBNFTShape {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1decs/components/NFTShape.proto\x1a\x0fcommon/id.proto\x1a\x13common\
    /Color3.proto\"\xdf\x01\n\nPBNFTShape\x12'\n\x0fwith_collisions\x18\x01\
    \x20\x01(\x08R\x0ewithCollisions\x12,\n\x12is_pointer_blocker\x18\x02\
    \x20\x01(\x08R\x10isPointerBlocker\x12\x18\n\x07visible\x18\x03\x20\x01(\
    \x08R\x07visible\x12\x10\n\x03src\x18\x04\x20\x01(\tR\x03src\x12\x19\n\
    \x08asset_id\x18\x05\x20\x01(\tR\x07assetId\x12\x14\n\x05style\x18\x06\
    \x20\x01(\x05R\x05style\x12\x1d\n\x05color\x18\x07\x20\x01(\x0b2\x07.Col\
    or3R\x05colorB\x05\x80\xb5\x18\x90\x08J\xd8\x03\n\x06\x12\x04\0\0\x0f\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x19\n\
    \x08\n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\x86\x03\x12\x03\x03\0!\
    \n\t\n\x02\x03\x01\x12\x03\x05\0\x1d\n\n\n\x02\x04\0\x12\x04\x07\0\x0f\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x08\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x06\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x08\x07\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x08\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x1e\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\t\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\t\x07\x19\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x1c\x1d\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\n\x02\x13\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\n\x02\x06\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\x07\x0e\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\n\x11\x12\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x0b\x02\x11\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x0b\t\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0b\x0f\x10\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0c\x02\x16\n\x0c\
    \n\x05\x04\0\x02\x04\x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\x0c\t\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0c\x14\x15\
    \n\x0b\n\x04\x04\0\x02\x05\x12\x03\r\x02\x12\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\r\x08\r\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03\r\x10\x11\n\x0b\n\x04\x04\0\x02\x06\
    \x12\x03\x0e\x02\x13\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x0e\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0e\t\x0e\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\x0e\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::id::file_descriptor().clone());
            deps.push(super::Color3::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBNFTShape::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
