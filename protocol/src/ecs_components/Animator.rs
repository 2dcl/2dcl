// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/Animator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBAnimator)
pub struct PBAnimator {
    // message fields
    // @@protoc_insertion_point(field:PBAnimator.states)
    pub states: ::std::vec::Vec<PBAnimationState>,
    // special fields
    // @@protoc_insertion_point(special_field:PBAnimator.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBAnimator {
    fn default() -> &'a PBAnimator {
        <PBAnimator as ::protobuf::Message>::default_instance()
    }
}

impl PBAnimator {
    pub fn new() -> PBAnimator {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "states",
            |m: &PBAnimator| { &m.states },
            |m: &mut PBAnimator| { &mut m.states },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBAnimator>(
            "PBAnimator",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBAnimator {
    const NAME: &'static str = "PBAnimator";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.states.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.states {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBAnimator {
        PBAnimator::new()
    }

    fn clear(&mut self) {
        self.states.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBAnimator {
        static instance: PBAnimator = PBAnimator {
            states: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBAnimator {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBAnimator").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBAnimator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBAnimator {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBAnimationState)
pub struct PBAnimationState {
    // message fields
    // @@protoc_insertion_point(field:PBAnimationState.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:PBAnimationState.clip)
    pub clip: ::std::string::String,
    // @@protoc_insertion_point(field:PBAnimationState.playing)
    pub playing: bool,
    // @@protoc_insertion_point(field:PBAnimationState.weight)
    pub weight: f32,
    // @@protoc_insertion_point(field:PBAnimationState.speed)
    pub speed: f32,
    // @@protoc_insertion_point(field:PBAnimationState.loop)
    pub loop_: bool,
    // @@protoc_insertion_point(field:PBAnimationState.should_reset)
    pub should_reset: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PBAnimationState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBAnimationState {
    fn default() -> &'a PBAnimationState {
        <PBAnimationState as ::protobuf::Message>::default_instance()
    }
}

impl PBAnimationState {
    pub fn new() -> PBAnimationState {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PBAnimationState| { &m.name },
            |m: &mut PBAnimationState| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "clip",
            |m: &PBAnimationState| { &m.clip },
            |m: &mut PBAnimationState| { &mut m.clip },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "playing",
            |m: &PBAnimationState| { &m.playing },
            |m: &mut PBAnimationState| { &mut m.playing },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "weight",
            |m: &PBAnimationState| { &m.weight },
            |m: &mut PBAnimationState| { &mut m.weight },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "speed",
            |m: &PBAnimationState| { &m.speed },
            |m: &mut PBAnimationState| { &mut m.speed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "loop",
            |m: &PBAnimationState| { &m.loop_ },
            |m: &mut PBAnimationState| { &mut m.loop_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "should_reset",
            |m: &PBAnimationState| { &m.should_reset },
            |m: &mut PBAnimationState| { &mut m.should_reset },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBAnimationState>(
            "PBAnimationState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBAnimationState {
    const NAME: &'static str = "PBAnimationState";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.clip = is.read_string()?;
                },
                24 => {
                    self.playing = is.read_bool()?;
                },
                37 => {
                    self.weight = is.read_float()?;
                },
                45 => {
                    self.speed = is.read_float()?;
                },
                48 => {
                    self.loop_ = is.read_bool()?;
                },
                56 => {
                    self.should_reset = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.clip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.clip);
        }
        if self.playing != false {
            my_size += 1 + 1;
        }
        if self.weight != 0. {
            my_size += 1 + 4;
        }
        if self.speed != 0. {
            my_size += 1 + 4;
        }
        if self.loop_ != false {
            my_size += 1 + 1;
        }
        if self.should_reset != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.clip.is_empty() {
            os.write_string(2, &self.clip)?;
        }
        if self.playing != false {
            os.write_bool(3, self.playing)?;
        }
        if self.weight != 0. {
            os.write_float(4, self.weight)?;
        }
        if self.speed != 0. {
            os.write_float(5, self.speed)?;
        }
        if self.loop_ != false {
            os.write_bool(6, self.loop_)?;
        }
        if self.should_reset != false {
            os.write_bool(7, self.should_reset)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBAnimationState {
        PBAnimationState::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.clip.clear();
        self.playing = false;
        self.weight = 0.;
        self.speed = 0.;
        self.loop_ = false;
        self.should_reset = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBAnimationState {
        static instance: PBAnimationState = PBAnimationState {
            name: ::std::string::String::new(),
            clip: ::std::string::String::new(),
            playing: false,
            weight: 0.,
            speed: 0.,
            loop_: false,
            should_reset: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBAnimationState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBAnimationState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBAnimationState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBAnimationState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1decs/components/Animator.proto\x1a\x0fcommon/id.proto\"7\n\nPBAnima\
    tor\x12)\n\x06states\x18\x01\x20\x03(\x0b2\x11.PBAnimationStateR\x06stat\
    es\"\xb9\x01\n\x10PBAnimationState\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x12\n\x04clip\x18\x02\x20\x01(\tR\x04clip\x12\x18\n\x07play\
    ing\x18\x03\x20\x01(\x08R\x07playing\x12\x16\n\x06weight\x18\x04\x20\x01\
    (\x02R\x06weight\x12\x14\n\x05speed\x18\x05\x20\x01(\x02R\x05speed\x12\
    \x12\n\x04loop\x18\x06\x20\x01(\x08R\x04loop\x12!\n\x0cshould_reset\x18\
    \x07\x20\x01(\x08R\x0bshouldResetB\x05\x80\xb5\x18\x92\x08J\xaa\x04\n\
    \x06\x12\x04\0\x03\x11\x01\n\x08\n\x01\x0c\x12\x03\0\x03\x15\n\t\n\x02\
    \x03\0\x12\x03\x02\0\x19\n\x08\n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\
    \xd0\x86\x03\x12\x03\x03\0!\n\n\n\x02\x04\0\x12\x04\x05\0\x07\x01\n\n\n\
    \x03\x04\0\x01\x12\x03\x05\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\x06\
    \x03(\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x06\x03\x0b\n\x0c\n\x05\x04\0\
    \x02\0\x06\x12\x03\x06\x0c\x1c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\
    \x1d#\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06&'\n\n\n\x02\x04\x01\x12\
    \x04\t\0\x11\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x18\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\n\x02\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x02\
    \x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\t\r\n\x0c\n\x05\x04\x01\x02\
    \0\x03\x12\x03\n\x10\x11\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x02\x12\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x0b\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0b\
    \x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0c\x02\x13\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03\x0c\x02\x06\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03\x0c\x07\x0e\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0c\x11\x12\n\
    \x0b\n\x04\x04\x01\x02\x03\x12\x03\r\x02\x13\n\x0c\n\x05\x04\x01\x02\x03\
    \x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\r\x08\x0e\
    \n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\r\x11\x12\n\x0b\n\x04\x04\x01\
    \x02\x04\x12\x03\x0e\x02\x12\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x0e\
    \x02\x07\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\x03\x0e\x08\r\n\x0c\n\x05\
    \x04\x01\x02\x04\x03\x12\x03\x0e\x10\x11\n\x0b\n\x04\x04\x01\x02\x05\x12\
    \x03\x0f\x02\x10\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x0f\x02\x06\n\
    \x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x0f\x07\x0b\n\x0c\n\x05\x04\x01\
    \x02\x05\x03\x12\x03\x0f\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x06\x12\x03\x10\
    \x02\x18\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x10\x02\x06\n\x0c\n\x05\
    \x04\x01\x02\x06\x01\x12\x03\x10\x07\x13\n\x0c\n\x05\x04\x01\x02\x06\x03\
    \x12\x03\x10\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PBAnimator::generated_message_descriptor_data());
            messages.push(PBAnimationState::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
