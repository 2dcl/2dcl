// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/AvatarShape.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBAvatarShape)
pub struct PBAvatarShape {
    // message fields
    // @@protoc_insertion_point(field:PBAvatarShape.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:PBAvatarShape.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:PBAvatarShape.body_shape)
    pub body_shape: ::std::string::String,
    // @@protoc_insertion_point(field:PBAvatarShape.skin_color)
    pub skin_color: ::protobuf::MessageField<super::Color3::Color3>,
    // @@protoc_insertion_point(field:PBAvatarShape.hair_color)
    pub hair_color: ::protobuf::MessageField<super::Color3::Color3>,
    // @@protoc_insertion_point(field:PBAvatarShape.eye_color)
    pub eye_color: ::protobuf::MessageField<super::Color3::Color3>,
    // @@protoc_insertion_point(field:PBAvatarShape.wearables)
    pub wearables: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:PBAvatarShape.expression_trigger_id)
    pub expression_trigger_id: ::std::string::String,
    // @@protoc_insertion_point(field:PBAvatarShape.expression_trigger_timestamp)
    pub expression_trigger_timestamp: i64,
    // @@protoc_insertion_point(field:PBAvatarShape.sticker_trigger_id)
    pub sticker_trigger_id: ::std::string::String,
    // @@protoc_insertion_point(field:PBAvatarShape.sticker_trigger_timestamp)
    pub sticker_trigger_timestamp: i64,
    // @@protoc_insertion_point(field:PBAvatarShape.talking)
    pub talking: bool,
    // special fields
    // @@protoc_insertion_point(special_field:PBAvatarShape.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBAvatarShape {
    fn default() -> &'a PBAvatarShape {
        <PBAvatarShape as ::protobuf::Message>::default_instance()
    }
}

impl PBAvatarShape {
    pub fn new() -> PBAvatarShape {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &PBAvatarShape| { &m.id },
            |m: &mut PBAvatarShape| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &PBAvatarShape| { &m.name },
            |m: &mut PBAvatarShape| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body_shape",
            |m: &PBAvatarShape| { &m.body_shape },
            |m: &mut PBAvatarShape| { &mut m.body_shape },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "skin_color",
            |m: &PBAvatarShape| { &m.skin_color },
            |m: &mut PBAvatarShape| { &mut m.skin_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "hair_color",
            |m: &PBAvatarShape| { &m.hair_color },
            |m: &mut PBAvatarShape| { &mut m.hair_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "eye_color",
            |m: &PBAvatarShape| { &m.eye_color },
            |m: &mut PBAvatarShape| { &mut m.eye_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "wearables",
            |m: &PBAvatarShape| { &m.wearables },
            |m: &mut PBAvatarShape| { &mut m.wearables },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expression_trigger_id",
            |m: &PBAvatarShape| { &m.expression_trigger_id },
            |m: &mut PBAvatarShape| { &mut m.expression_trigger_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "expression_trigger_timestamp",
            |m: &PBAvatarShape| { &m.expression_trigger_timestamp },
            |m: &mut PBAvatarShape| { &mut m.expression_trigger_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sticker_trigger_id",
            |m: &PBAvatarShape| { &m.sticker_trigger_id },
            |m: &mut PBAvatarShape| { &mut m.sticker_trigger_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sticker_trigger_timestamp",
            |m: &PBAvatarShape| { &m.sticker_trigger_timestamp },
            |m: &mut PBAvatarShape| { &mut m.sticker_trigger_timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "talking",
            |m: &PBAvatarShape| { &m.talking },
            |m: &mut PBAvatarShape| { &mut m.talking },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBAvatarShape>(
            "PBAvatarShape",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBAvatarShape {
    const NAME: &'static str = "PBAvatarShape";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.body_shape = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.skin_color)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.hair_color)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.eye_color)?;
                },
                58 => {
                    self.wearables.push(is.read_string()?);
                },
                66 => {
                    self.expression_trigger_id = is.read_string()?;
                },
                72 => {
                    self.expression_trigger_timestamp = is.read_int64()?;
                },
                82 => {
                    self.sticker_trigger_id = is.read_string()?;
                },
                88 => {
                    self.sticker_trigger_timestamp = is.read_int64()?;
                },
                96 => {
                    self.talking = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.body_shape.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.body_shape);
        }
        if let Some(v) = self.skin_color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.hair_color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.eye_color.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.wearables {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if !self.expression_trigger_id.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.expression_trigger_id);
        }
        if self.expression_trigger_timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(9, self.expression_trigger_timestamp);
        }
        if !self.sticker_trigger_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.sticker_trigger_id);
        }
        if self.sticker_trigger_timestamp != 0 {
            my_size += ::protobuf::rt::int64_size(11, self.sticker_trigger_timestamp);
        }
        if self.talking != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.body_shape.is_empty() {
            os.write_string(3, &self.body_shape)?;
        }
        if let Some(v) = self.skin_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        if let Some(v) = self.hair_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        }
        if let Some(v) = self.eye_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        for v in &self.wearables {
            os.write_string(7, &v)?;
        };
        if !self.expression_trigger_id.is_empty() {
            os.write_string(8, &self.expression_trigger_id)?;
        }
        if self.expression_trigger_timestamp != 0 {
            os.write_int64(9, self.expression_trigger_timestamp)?;
        }
        if !self.sticker_trigger_id.is_empty() {
            os.write_string(10, &self.sticker_trigger_id)?;
        }
        if self.sticker_trigger_timestamp != 0 {
            os.write_int64(11, self.sticker_trigger_timestamp)?;
        }
        if self.talking != false {
            os.write_bool(12, self.talking)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBAvatarShape {
        PBAvatarShape::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.body_shape.clear();
        self.skin_color.clear();
        self.hair_color.clear();
        self.eye_color.clear();
        self.wearables.clear();
        self.expression_trigger_id.clear();
        self.expression_trigger_timestamp = 0;
        self.sticker_trigger_id.clear();
        self.sticker_trigger_timestamp = 0;
        self.talking = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBAvatarShape {
        static instance: PBAvatarShape = PBAvatarShape {
            id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            body_shape: ::std::string::String::new(),
            skin_color: ::protobuf::MessageField::none(),
            hair_color: ::protobuf::MessageField::none(),
            eye_color: ::protobuf::MessageField::none(),
            wearables: ::std::vec::Vec::new(),
            expression_trigger_id: ::std::string::String::new(),
            expression_trigger_timestamp: 0,
            sticker_trigger_id: ::std::string::String::new(),
            sticker_trigger_timestamp: 0,
            talking: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBAvatarShape {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBAvatarShape").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBAvatarShape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBAvatarShape {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20ecs/components/AvatarShape.proto\x1a\x0fcommon/id.proto\x1a\x13com\
    mon/Color3.proto\"\xe0\x03\n\rPBAvatarShape\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1d\n\n\
    body_shape\x18\x03\x20\x01(\tR\tbodyShape\x12&\n\nskin_color\x18\x04\x20\
    \x01(\x0b2\x07.Color3R\tskinColor\x12&\n\nhair_color\x18\x05\x20\x01(\
    \x0b2\x07.Color3R\thairColor\x12$\n\teye_color\x18\x06\x20\x01(\x0b2\x07\
    .Color3R\x08eyeColor\x12\x1c\n\twearables\x18\x07\x20\x03(\tR\twearables\
    \x122\n\x15expression_trigger_id\x18\x08\x20\x01(\tR\x13expressionTrigge\
    rId\x12@\n\x1cexpression_trigger_timestamp\x18\t\x20\x01(\x03R\x1aexpres\
    sionTriggerTimestamp\x12,\n\x12sticker_trigger_id\x18\n\x20\x01(\tR\x10s\
    tickerTriggerId\x12:\n\x19sticker_trigger_timestamp\x18\x0b\x20\x01(\x03\
    R\x17stickerTriggerTimestamp\x12\x18\n\x07talking\x18\x0c\x20\x01(\x08R\
    \x07talkingB\x05\x80\xb5\x18\xb8\x08J\xf9\x05\n\x06\x12\x04\0\0\x13\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x19\n\x08\
    \n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\x86\x03\x12\x03\x03\0!\n\t\
    \n\x02\x03\x01\x12\x03\x04\0\x1d\n\n\n\x02\x04\0\x12\x04\x06\0\x13\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x06\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x07\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x02\x08\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x07\t\x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x07\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x02\x12\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x08\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\t\x02\x18\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\t\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\t\x13\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\t\x16\x17\n\x0b\n\x04\x04\0\x02\x03\x12\x03\n\
    \x02\x18\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\n\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x03\x01\x12\x03\n\t\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\n\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0b\x02\x18\n\x0c\n\x05\x04\0\
    \x02\x04\x06\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x0b\t\x13\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b\x16\x17\n\x0b\n\x04\
    \x04\0\x02\x05\x12\x03\x0c\x02\x17\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03\
    \x0c\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0c\t\x12\n\x0c\n\x05\
    \x04\0\x02\x05\x03\x12\x03\x0c\x15\x16\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \r\x02\x20\n\x0c\n\x05\x04\0\x02\x06\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\
    \0\x02\x06\x05\x12\x03\r\x0b\x11\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\r\
    \x12\x1b\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\r\x1e\x1f\n\x0b\n\x04\x04\
    \0\x02\x07\x12\x03\x0e\x02#\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x0e\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x0e\t\x1e\n\x0c\n\x05\x04\
    \0\x02\x07\x03\x12\x03\x0e!\"\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x0f\x02)\
    \n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\x0f\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x08\x01\x12\x03\x0f\x08$\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x0f'(\n\
    \x0b\n\x04\x04\0\x02\t\x12\x03\x10\x02!\n\x0c\n\x05\x04\0\x02\t\x05\x12\
    \x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x10\t\x1b\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03\x10\x1e\x20\n\x0b\n\x04\x04\0\x02\n\x12\x03\
    \x11\x02'\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x11\x02\x07\n\x0c\n\x05\
    \x04\0\x02\n\x01\x12\x03\x11\x08!\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\
    \x11$&\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x12\x02\x14\n\x0c\n\x05\x04\0\
    \x02\x0b\x05\x12\x03\x12\x02\x06\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\
    \x12\x07\x0e\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x12\x11\x13b\x06proto\
    3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::id::file_descriptor().clone());
            deps.push(super::Color3::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBAvatarShape::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
