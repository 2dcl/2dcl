// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/UiTransform.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBUiTransform)
pub struct PBUiTransform {
    // message fields
    // @@protoc_insertion_point(field:PBUiTransform.position_type)
    pub position_type: ::protobuf::EnumOrUnknown<YGPositionType>,
    // @@protoc_insertion_point(field:PBUiTransform.align_content)
    pub align_content: ::protobuf::EnumOrUnknown<YGAlign>,
    // @@protoc_insertion_point(field:PBUiTransform.align_items)
    pub align_items: ::protobuf::EnumOrUnknown<YGAlign>,
    // @@protoc_insertion_point(field:PBUiTransform.align_self)
    pub align_self: ::protobuf::EnumOrUnknown<YGAlign>,
    // @@protoc_insertion_point(field:PBUiTransform.flex_direction)
    pub flex_direction: ::protobuf::EnumOrUnknown<YGFlexDirection>,
    // @@protoc_insertion_point(field:PBUiTransform.flex_wrap)
    pub flex_wrap: ::protobuf::EnumOrUnknown<YGWrap>,
    // @@protoc_insertion_point(field:PBUiTransform.justify_content)
    pub justify_content: ::protobuf::EnumOrUnknown<YGJustify>,
    // @@protoc_insertion_point(field:PBUiTransform.overflow)
    pub overflow: ::protobuf::EnumOrUnknown<YGOverflow>,
    // @@protoc_insertion_point(field:PBUiTransform.display)
    pub display: ::protobuf::EnumOrUnknown<YGDisplay>,
    // @@protoc_insertion_point(field:PBUiTransform.direction)
    pub direction: ::protobuf::EnumOrUnknown<YGDirection>,
    // @@protoc_insertion_point(field:PBUiTransform.flex)
    pub flex: f32,
    // @@protoc_insertion_point(field:PBUiTransform.flex_basis_unit)
    pub flex_basis_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.flex_basis)
    pub flex_basis: f32,
    // @@protoc_insertion_point(field:PBUiTransform.flex_grow)
    pub flex_grow: f32,
    // @@protoc_insertion_point(field:PBUiTransform.flex_shrink)
    pub flex_shrink: f32,
    // @@protoc_insertion_point(field:PBUiTransform.width_unit)
    pub width_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.width)
    pub width: f32,
    // @@protoc_insertion_point(field:PBUiTransform.height_unit)
    pub height_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.height)
    pub height: f32,
    // @@protoc_insertion_point(field:PBUiTransform.min_width_unit)
    pub min_width_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.min_width)
    pub min_width: f32,
    // @@protoc_insertion_point(field:PBUiTransform.min_height_unit)
    pub min_height_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.min_height)
    pub min_height: f32,
    // @@protoc_insertion_point(field:PBUiTransform.max_width_unit)
    pub max_width_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.max_width)
    pub max_width: f32,
    // @@protoc_insertion_point(field:PBUiTransform.max_height_unit)
    pub max_height_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.max_height)
    pub max_height: f32,
    // @@protoc_insertion_point(field:PBUiTransform.position_left_unit)
    pub position_left_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.position_left)
    pub position_left: f32,
    // @@protoc_insertion_point(field:PBUiTransform.position_top_unit)
    pub position_top_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.position_top)
    pub position_top: f32,
    // @@protoc_insertion_point(field:PBUiTransform.position_right_unit)
    pub position_right_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.position_right)
    pub position_right: f32,
    // @@protoc_insertion_point(field:PBUiTransform.position_bottom_unit)
    pub position_bottom_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.position_bottom)
    pub position_bottom: f32,
    ///  margin
    // @@protoc_insertion_point(field:PBUiTransform.margin_left_unit)
    pub margin_left_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.margin_left)
    pub margin_left: f32,
    // @@protoc_insertion_point(field:PBUiTransform.margin_top_unit)
    pub margin_top_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.margin_top)
    pub margin_top: f32,
    // @@protoc_insertion_point(field:PBUiTransform.margin_right_unit)
    pub margin_right_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.margin_right)
    pub margin_right: f32,
    // @@protoc_insertion_point(field:PBUiTransform.margin_bottom_unit)
    pub margin_bottom_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.margin_bottom)
    pub margin_bottom: f32,
    // @@protoc_insertion_point(field:PBUiTransform.padding_left_unit)
    pub padding_left_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.padding_left)
    pub padding_left: f32,
    // @@protoc_insertion_point(field:PBUiTransform.padding_top_unit)
    pub padding_top_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.padding_top)
    pub padding_top: f32,
    // @@protoc_insertion_point(field:PBUiTransform.padding_right_unit)
    pub padding_right_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.padding_right)
    pub padding_right: f32,
    // @@protoc_insertion_point(field:PBUiTransform.padding_bottom_unit)
    pub padding_bottom_unit: ::protobuf::EnumOrUnknown<YGUnit>,
    // @@protoc_insertion_point(field:PBUiTransform.padding_bottom)
    pub padding_bottom: f32,
    // @@protoc_insertion_point(field:PBUiTransform.border_left)
    pub border_left: f32,
    // @@protoc_insertion_point(field:PBUiTransform.border_top)
    pub border_top: f32,
    // @@protoc_insertion_point(field:PBUiTransform.border_right)
    pub border_right: f32,
    // @@protoc_insertion_point(field:PBUiTransform.border_bottom)
    pub border_bottom: f32,
    // special fields
    // @@protoc_insertion_point(special_field:PBUiTransform.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBUiTransform {
    fn default() -> &'a PBUiTransform {
        <PBUiTransform as ::protobuf::Message>::default_instance()
    }
}

impl PBUiTransform {
    pub fn new() -> PBUiTransform {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(55);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_type",
            |m: &PBUiTransform| { &m.position_type },
            |m: &mut PBUiTransform| { &mut m.position_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "align_content",
            |m: &PBUiTransform| { &m.align_content },
            |m: &mut PBUiTransform| { &mut m.align_content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "align_items",
            |m: &PBUiTransform| { &m.align_items },
            |m: &mut PBUiTransform| { &mut m.align_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "align_self",
            |m: &PBUiTransform| { &m.align_self },
            |m: &mut PBUiTransform| { &mut m.align_self },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_direction",
            |m: &PBUiTransform| { &m.flex_direction },
            |m: &mut PBUiTransform| { &mut m.flex_direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_wrap",
            |m: &PBUiTransform| { &m.flex_wrap },
            |m: &mut PBUiTransform| { &mut m.flex_wrap },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "justify_content",
            |m: &PBUiTransform| { &m.justify_content },
            |m: &mut PBUiTransform| { &mut m.justify_content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "overflow",
            |m: &PBUiTransform| { &m.overflow },
            |m: &mut PBUiTransform| { &mut m.overflow },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "display",
            |m: &PBUiTransform| { &m.display },
            |m: &mut PBUiTransform| { &mut m.display },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "direction",
            |m: &PBUiTransform| { &m.direction },
            |m: &mut PBUiTransform| { &mut m.direction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex",
            |m: &PBUiTransform| { &m.flex },
            |m: &mut PBUiTransform| { &mut m.flex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_basis_unit",
            |m: &PBUiTransform| { &m.flex_basis_unit },
            |m: &mut PBUiTransform| { &mut m.flex_basis_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_basis",
            |m: &PBUiTransform| { &m.flex_basis },
            |m: &mut PBUiTransform| { &mut m.flex_basis },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_grow",
            |m: &PBUiTransform| { &m.flex_grow },
            |m: &mut PBUiTransform| { &mut m.flex_grow },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flex_shrink",
            |m: &PBUiTransform| { &m.flex_shrink },
            |m: &mut PBUiTransform| { &mut m.flex_shrink },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width_unit",
            |m: &PBUiTransform| { &m.width_unit },
            |m: &mut PBUiTransform| { &mut m.width_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &PBUiTransform| { &m.width },
            |m: &mut PBUiTransform| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height_unit",
            |m: &PBUiTransform| { &m.height_unit },
            |m: &mut PBUiTransform| { &mut m.height_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &PBUiTransform| { &m.height },
            |m: &mut PBUiTransform| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_width_unit",
            |m: &PBUiTransform| { &m.min_width_unit },
            |m: &mut PBUiTransform| { &mut m.min_width_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_width",
            |m: &PBUiTransform| { &m.min_width },
            |m: &mut PBUiTransform| { &mut m.min_width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_height_unit",
            |m: &PBUiTransform| { &m.min_height_unit },
            |m: &mut PBUiTransform| { &mut m.min_height_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "min_height",
            |m: &PBUiTransform| { &m.min_height },
            |m: &mut PBUiTransform| { &mut m.min_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_width_unit",
            |m: &PBUiTransform| { &m.max_width_unit },
            |m: &mut PBUiTransform| { &mut m.max_width_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_width",
            |m: &PBUiTransform| { &m.max_width },
            |m: &mut PBUiTransform| { &mut m.max_width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_height_unit",
            |m: &PBUiTransform| { &m.max_height_unit },
            |m: &mut PBUiTransform| { &mut m.max_height_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "max_height",
            |m: &PBUiTransform| { &m.max_height },
            |m: &mut PBUiTransform| { &mut m.max_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_left_unit",
            |m: &PBUiTransform| { &m.position_left_unit },
            |m: &mut PBUiTransform| { &mut m.position_left_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_left",
            |m: &PBUiTransform| { &m.position_left },
            |m: &mut PBUiTransform| { &mut m.position_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_top_unit",
            |m: &PBUiTransform| { &m.position_top_unit },
            |m: &mut PBUiTransform| { &mut m.position_top_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_top",
            |m: &PBUiTransform| { &m.position_top },
            |m: &mut PBUiTransform| { &mut m.position_top },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_right_unit",
            |m: &PBUiTransform| { &m.position_right_unit },
            |m: &mut PBUiTransform| { &mut m.position_right_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_right",
            |m: &PBUiTransform| { &m.position_right },
            |m: &mut PBUiTransform| { &mut m.position_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_bottom_unit",
            |m: &PBUiTransform| { &m.position_bottom_unit },
            |m: &mut PBUiTransform| { &mut m.position_bottom_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "position_bottom",
            |m: &PBUiTransform| { &m.position_bottom },
            |m: &mut PBUiTransform| { &mut m.position_bottom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_left_unit",
            |m: &PBUiTransform| { &m.margin_left_unit },
            |m: &mut PBUiTransform| { &mut m.margin_left_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_left",
            |m: &PBUiTransform| { &m.margin_left },
            |m: &mut PBUiTransform| { &mut m.margin_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_top_unit",
            |m: &PBUiTransform| { &m.margin_top_unit },
            |m: &mut PBUiTransform| { &mut m.margin_top_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_top",
            |m: &PBUiTransform| { &m.margin_top },
            |m: &mut PBUiTransform| { &mut m.margin_top },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_right_unit",
            |m: &PBUiTransform| { &m.margin_right_unit },
            |m: &mut PBUiTransform| { &mut m.margin_right_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_right",
            |m: &PBUiTransform| { &m.margin_right },
            |m: &mut PBUiTransform| { &mut m.margin_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_bottom_unit",
            |m: &PBUiTransform| { &m.margin_bottom_unit },
            |m: &mut PBUiTransform| { &mut m.margin_bottom_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "margin_bottom",
            |m: &PBUiTransform| { &m.margin_bottom },
            |m: &mut PBUiTransform| { &mut m.margin_bottom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_left_unit",
            |m: &PBUiTransform| { &m.padding_left_unit },
            |m: &mut PBUiTransform| { &mut m.padding_left_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_left",
            |m: &PBUiTransform| { &m.padding_left },
            |m: &mut PBUiTransform| { &mut m.padding_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_top_unit",
            |m: &PBUiTransform| { &m.padding_top_unit },
            |m: &mut PBUiTransform| { &mut m.padding_top_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_top",
            |m: &PBUiTransform| { &m.padding_top },
            |m: &mut PBUiTransform| { &mut m.padding_top },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_right_unit",
            |m: &PBUiTransform| { &m.padding_right_unit },
            |m: &mut PBUiTransform| { &mut m.padding_right_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_right",
            |m: &PBUiTransform| { &m.padding_right },
            |m: &mut PBUiTransform| { &mut m.padding_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_bottom_unit",
            |m: &PBUiTransform| { &m.padding_bottom_unit },
            |m: &mut PBUiTransform| { &mut m.padding_bottom_unit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_bottom",
            |m: &PBUiTransform| { &m.padding_bottom },
            |m: &mut PBUiTransform| { &mut m.padding_bottom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "border_left",
            |m: &PBUiTransform| { &m.border_left },
            |m: &mut PBUiTransform| { &mut m.border_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "border_top",
            |m: &PBUiTransform| { &m.border_top },
            |m: &mut PBUiTransform| { &mut m.border_top },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "border_right",
            |m: &PBUiTransform| { &m.border_right },
            |m: &mut PBUiTransform| { &mut m.border_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "border_bottom",
            |m: &PBUiTransform| { &m.border_bottom },
            |m: &mut PBUiTransform| { &mut m.border_bottom },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBUiTransform>(
            "PBUiTransform",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBUiTransform {
    const NAME: &'static str = "PBUiTransform";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.position_type = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.align_content = is.read_enum_or_unknown()?;
                },
                24 => {
                    self.align_items = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.align_self = is.read_enum_or_unknown()?;
                },
                40 => {
                    self.flex_direction = is.read_enum_or_unknown()?;
                },
                48 => {
                    self.flex_wrap = is.read_enum_or_unknown()?;
                },
                56 => {
                    self.justify_content = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.overflow = is.read_enum_or_unknown()?;
                },
                72 => {
                    self.display = is.read_enum_or_unknown()?;
                },
                80 => {
                    self.direction = is.read_enum_or_unknown()?;
                },
                93 => {
                    self.flex = is.read_float()?;
                },
                104 => {
                    self.flex_basis_unit = is.read_enum_or_unknown()?;
                },
                117 => {
                    self.flex_basis = is.read_float()?;
                },
                125 => {
                    self.flex_grow = is.read_float()?;
                },
                133 => {
                    self.flex_shrink = is.read_float()?;
                },
                136 => {
                    self.width_unit = is.read_enum_or_unknown()?;
                },
                149 => {
                    self.width = is.read_float()?;
                },
                152 => {
                    self.height_unit = is.read_enum_or_unknown()?;
                },
                165 => {
                    self.height = is.read_float()?;
                },
                168 => {
                    self.min_width_unit = is.read_enum_or_unknown()?;
                },
                181 => {
                    self.min_width = is.read_float()?;
                },
                184 => {
                    self.min_height_unit = is.read_enum_or_unknown()?;
                },
                197 => {
                    self.min_height = is.read_float()?;
                },
                248 => {
                    self.max_width_unit = is.read_enum_or_unknown()?;
                },
                261 => {
                    self.max_width = is.read_float()?;
                },
                264 => {
                    self.max_height_unit = is.read_enum_or_unknown()?;
                },
                277 => {
                    self.max_height = is.read_float()?;
                },
                328 => {
                    self.position_left_unit = is.read_enum_or_unknown()?;
                },
                341 => {
                    self.position_left = is.read_float()?;
                },
                344 => {
                    self.position_top_unit = is.read_enum_or_unknown()?;
                },
                357 => {
                    self.position_top = is.read_float()?;
                },
                360 => {
                    self.position_right_unit = is.read_enum_or_unknown()?;
                },
                373 => {
                    self.position_right = is.read_float()?;
                },
                376 => {
                    self.position_bottom_unit = is.read_enum_or_unknown()?;
                },
                389 => {
                    self.position_bottom = is.read_float()?;
                },
                408 => {
                    self.margin_left_unit = is.read_enum_or_unknown()?;
                },
                421 => {
                    self.margin_left = is.read_float()?;
                },
                424 => {
                    self.margin_top_unit = is.read_enum_or_unknown()?;
                },
                437 => {
                    self.margin_top = is.read_float()?;
                },
                440 => {
                    self.margin_right_unit = is.read_enum_or_unknown()?;
                },
                453 => {
                    self.margin_right = is.read_float()?;
                },
                456 => {
                    self.margin_bottom_unit = is.read_enum_or_unknown()?;
                },
                469 => {
                    self.margin_bottom = is.read_float()?;
                },
                488 => {
                    self.padding_left_unit = is.read_enum_or_unknown()?;
                },
                501 => {
                    self.padding_left = is.read_float()?;
                },
                504 => {
                    self.padding_top_unit = is.read_enum_or_unknown()?;
                },
                517 => {
                    self.padding_top = is.read_float()?;
                },
                520 => {
                    self.padding_right_unit = is.read_enum_or_unknown()?;
                },
                533 => {
                    self.padding_right = is.read_float()?;
                },
                536 => {
                    self.padding_bottom_unit = is.read_enum_or_unknown()?;
                },
                549 => {
                    self.padding_bottom = is.read_float()?;
                },
                581 => {
                    self.border_left = is.read_float()?;
                },
                597 => {
                    self.border_top = is.read_float()?;
                },
                613 => {
                    self.border_right = is.read_float()?;
                },
                629 => {
                    self.border_bottom = is.read_float()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.position_type != ::protobuf::EnumOrUnknown::new(YGPositionType::YGPositionTypeStatic) {
            my_size += ::protobuf::rt::int32_size(1, self.position_type.value());
        }
        if self.align_content != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            my_size += ::protobuf::rt::int32_size(2, self.align_content.value());
        }
        if self.align_items != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            my_size += ::protobuf::rt::int32_size(3, self.align_items.value());
        }
        if self.align_self != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            my_size += ::protobuf::rt::int32_size(4, self.align_self.value());
        }
        if self.flex_direction != ::protobuf::EnumOrUnknown::new(YGFlexDirection::YGFlexDirectionColumn) {
            my_size += ::protobuf::rt::int32_size(5, self.flex_direction.value());
        }
        if self.flex_wrap != ::protobuf::EnumOrUnknown::new(YGWrap::YGWrapNoWrap) {
            my_size += ::protobuf::rt::int32_size(6, self.flex_wrap.value());
        }
        if self.justify_content != ::protobuf::EnumOrUnknown::new(YGJustify::YGJustifyFlexStart) {
            my_size += ::protobuf::rt::int32_size(7, self.justify_content.value());
        }
        if self.overflow != ::protobuf::EnumOrUnknown::new(YGOverflow::YGOverflowVisible) {
            my_size += ::protobuf::rt::int32_size(8, self.overflow.value());
        }
        if self.display != ::protobuf::EnumOrUnknown::new(YGDisplay::YGDisplayFlex) {
            my_size += ::protobuf::rt::int32_size(9, self.display.value());
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(YGDirection::YGDirectionInherit) {
            my_size += ::protobuf::rt::int32_size(10, self.direction.value());
        }
        if self.flex != 0. {
            my_size += 1 + 4;
        }
        if self.flex_basis_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(13, self.flex_basis_unit.value());
        }
        if self.flex_basis != 0. {
            my_size += 1 + 4;
        }
        if self.flex_grow != 0. {
            my_size += 1 + 4;
        }
        if self.flex_shrink != 0. {
            my_size += 2 + 4;
        }
        if self.width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(17, self.width_unit.value());
        }
        if self.width != 0. {
            my_size += 2 + 4;
        }
        if self.height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(19, self.height_unit.value());
        }
        if self.height != 0. {
            my_size += 2 + 4;
        }
        if self.min_width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(21, self.min_width_unit.value());
        }
        if self.min_width != 0. {
            my_size += 2 + 4;
        }
        if self.min_height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(23, self.min_height_unit.value());
        }
        if self.min_height != 0. {
            my_size += 2 + 4;
        }
        if self.max_width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(31, self.max_width_unit.value());
        }
        if self.max_width != 0. {
            my_size += 2 + 4;
        }
        if self.max_height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(33, self.max_height_unit.value());
        }
        if self.max_height != 0. {
            my_size += 2 + 4;
        }
        if self.position_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(41, self.position_left_unit.value());
        }
        if self.position_left != 0. {
            my_size += 2 + 4;
        }
        if self.position_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(43, self.position_top_unit.value());
        }
        if self.position_top != 0. {
            my_size += 2 + 4;
        }
        if self.position_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(45, self.position_right_unit.value());
        }
        if self.position_right != 0. {
            my_size += 2 + 4;
        }
        if self.position_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(47, self.position_bottom_unit.value());
        }
        if self.position_bottom != 0. {
            my_size += 2 + 4;
        }
        if self.margin_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(51, self.margin_left_unit.value());
        }
        if self.margin_left != 0. {
            my_size += 2 + 4;
        }
        if self.margin_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(53, self.margin_top_unit.value());
        }
        if self.margin_top != 0. {
            my_size += 2 + 4;
        }
        if self.margin_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(55, self.margin_right_unit.value());
        }
        if self.margin_right != 0. {
            my_size += 2 + 4;
        }
        if self.margin_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(57, self.margin_bottom_unit.value());
        }
        if self.margin_bottom != 0. {
            my_size += 2 + 4;
        }
        if self.padding_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(61, self.padding_left_unit.value());
        }
        if self.padding_left != 0. {
            my_size += 2 + 4;
        }
        if self.padding_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(63, self.padding_top_unit.value());
        }
        if self.padding_top != 0. {
            my_size += 2 + 4;
        }
        if self.padding_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(65, self.padding_right_unit.value());
        }
        if self.padding_right != 0. {
            my_size += 2 + 4;
        }
        if self.padding_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            my_size += ::protobuf::rt::int32_size(67, self.padding_bottom_unit.value());
        }
        if self.padding_bottom != 0. {
            my_size += 2 + 4;
        }
        if self.border_left != 0. {
            my_size += 2 + 4;
        }
        if self.border_top != 0. {
            my_size += 2 + 4;
        }
        if self.border_right != 0. {
            my_size += 2 + 4;
        }
        if self.border_bottom != 0. {
            my_size += 2 + 4;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.position_type != ::protobuf::EnumOrUnknown::new(YGPositionType::YGPositionTypeStatic) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.position_type))?;
        }
        if self.align_content != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.align_content))?;
        }
        if self.align_items != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.align_items))?;
        }
        if self.align_self != ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto) {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&self.align_self))?;
        }
        if self.flex_direction != ::protobuf::EnumOrUnknown::new(YGFlexDirection::YGFlexDirectionColumn) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.flex_direction))?;
        }
        if self.flex_wrap != ::protobuf::EnumOrUnknown::new(YGWrap::YGWrapNoWrap) {
            os.write_enum(6, ::protobuf::EnumOrUnknown::value(&self.flex_wrap))?;
        }
        if self.justify_content != ::protobuf::EnumOrUnknown::new(YGJustify::YGJustifyFlexStart) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.justify_content))?;
        }
        if self.overflow != ::protobuf::EnumOrUnknown::new(YGOverflow::YGOverflowVisible) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.overflow))?;
        }
        if self.display != ::protobuf::EnumOrUnknown::new(YGDisplay::YGDisplayFlex) {
            os.write_enum(9, ::protobuf::EnumOrUnknown::value(&self.display))?;
        }
        if self.direction != ::protobuf::EnumOrUnknown::new(YGDirection::YGDirectionInherit) {
            os.write_enum(10, ::protobuf::EnumOrUnknown::value(&self.direction))?;
        }
        if self.flex != 0. {
            os.write_float(11, self.flex)?;
        }
        if self.flex_basis_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(13, ::protobuf::EnumOrUnknown::value(&self.flex_basis_unit))?;
        }
        if self.flex_basis != 0. {
            os.write_float(14, self.flex_basis)?;
        }
        if self.flex_grow != 0. {
            os.write_float(15, self.flex_grow)?;
        }
        if self.flex_shrink != 0. {
            os.write_float(16, self.flex_shrink)?;
        }
        if self.width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(17, ::protobuf::EnumOrUnknown::value(&self.width_unit))?;
        }
        if self.width != 0. {
            os.write_float(18, self.width)?;
        }
        if self.height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(19, ::protobuf::EnumOrUnknown::value(&self.height_unit))?;
        }
        if self.height != 0. {
            os.write_float(20, self.height)?;
        }
        if self.min_width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(21, ::protobuf::EnumOrUnknown::value(&self.min_width_unit))?;
        }
        if self.min_width != 0. {
            os.write_float(22, self.min_width)?;
        }
        if self.min_height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(23, ::protobuf::EnumOrUnknown::value(&self.min_height_unit))?;
        }
        if self.min_height != 0. {
            os.write_float(24, self.min_height)?;
        }
        if self.max_width_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(31, ::protobuf::EnumOrUnknown::value(&self.max_width_unit))?;
        }
        if self.max_width != 0. {
            os.write_float(32, self.max_width)?;
        }
        if self.max_height_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(33, ::protobuf::EnumOrUnknown::value(&self.max_height_unit))?;
        }
        if self.max_height != 0. {
            os.write_float(34, self.max_height)?;
        }
        if self.position_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(41, ::protobuf::EnumOrUnknown::value(&self.position_left_unit))?;
        }
        if self.position_left != 0. {
            os.write_float(42, self.position_left)?;
        }
        if self.position_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(43, ::protobuf::EnumOrUnknown::value(&self.position_top_unit))?;
        }
        if self.position_top != 0. {
            os.write_float(44, self.position_top)?;
        }
        if self.position_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(45, ::protobuf::EnumOrUnknown::value(&self.position_right_unit))?;
        }
        if self.position_right != 0. {
            os.write_float(46, self.position_right)?;
        }
        if self.position_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(47, ::protobuf::EnumOrUnknown::value(&self.position_bottom_unit))?;
        }
        if self.position_bottom != 0. {
            os.write_float(48, self.position_bottom)?;
        }
        if self.margin_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(51, ::protobuf::EnumOrUnknown::value(&self.margin_left_unit))?;
        }
        if self.margin_left != 0. {
            os.write_float(52, self.margin_left)?;
        }
        if self.margin_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(53, ::protobuf::EnumOrUnknown::value(&self.margin_top_unit))?;
        }
        if self.margin_top != 0. {
            os.write_float(54, self.margin_top)?;
        }
        if self.margin_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(55, ::protobuf::EnumOrUnknown::value(&self.margin_right_unit))?;
        }
        if self.margin_right != 0. {
            os.write_float(56, self.margin_right)?;
        }
        if self.margin_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(57, ::protobuf::EnumOrUnknown::value(&self.margin_bottom_unit))?;
        }
        if self.margin_bottom != 0. {
            os.write_float(58, self.margin_bottom)?;
        }
        if self.padding_left_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(61, ::protobuf::EnumOrUnknown::value(&self.padding_left_unit))?;
        }
        if self.padding_left != 0. {
            os.write_float(62, self.padding_left)?;
        }
        if self.padding_top_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(63, ::protobuf::EnumOrUnknown::value(&self.padding_top_unit))?;
        }
        if self.padding_top != 0. {
            os.write_float(64, self.padding_top)?;
        }
        if self.padding_right_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(65, ::protobuf::EnumOrUnknown::value(&self.padding_right_unit))?;
        }
        if self.padding_right != 0. {
            os.write_float(66, self.padding_right)?;
        }
        if self.padding_bottom_unit != ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined) {
            os.write_enum(67, ::protobuf::EnumOrUnknown::value(&self.padding_bottom_unit))?;
        }
        if self.padding_bottom != 0. {
            os.write_float(68, self.padding_bottom)?;
        }
        if self.border_left != 0. {
            os.write_float(72, self.border_left)?;
        }
        if self.border_top != 0. {
            os.write_float(74, self.border_top)?;
        }
        if self.border_right != 0. {
            os.write_float(76, self.border_right)?;
        }
        if self.border_bottom != 0. {
            os.write_float(78, self.border_bottom)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBUiTransform {
        PBUiTransform::new()
    }

    fn clear(&mut self) {
        self.position_type = ::protobuf::EnumOrUnknown::new(YGPositionType::YGPositionTypeStatic);
        self.align_content = ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto);
        self.align_items = ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto);
        self.align_self = ::protobuf::EnumOrUnknown::new(YGAlign::YGAlignAuto);
        self.flex_direction = ::protobuf::EnumOrUnknown::new(YGFlexDirection::YGFlexDirectionColumn);
        self.flex_wrap = ::protobuf::EnumOrUnknown::new(YGWrap::YGWrapNoWrap);
        self.justify_content = ::protobuf::EnumOrUnknown::new(YGJustify::YGJustifyFlexStart);
        self.overflow = ::protobuf::EnumOrUnknown::new(YGOverflow::YGOverflowVisible);
        self.display = ::protobuf::EnumOrUnknown::new(YGDisplay::YGDisplayFlex);
        self.direction = ::protobuf::EnumOrUnknown::new(YGDirection::YGDirectionInherit);
        self.flex = 0.;
        self.flex_basis_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.flex_basis = 0.;
        self.flex_grow = 0.;
        self.flex_shrink = 0.;
        self.width_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.width = 0.;
        self.height_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.height = 0.;
        self.min_width_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.min_width = 0.;
        self.min_height_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.min_height = 0.;
        self.max_width_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.max_width = 0.;
        self.max_height_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.max_height = 0.;
        self.position_left_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.position_left = 0.;
        self.position_top_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.position_top = 0.;
        self.position_right_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.position_right = 0.;
        self.position_bottom_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.position_bottom = 0.;
        self.margin_left_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.margin_left = 0.;
        self.margin_top_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.margin_top = 0.;
        self.margin_right_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.margin_right = 0.;
        self.margin_bottom_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.margin_bottom = 0.;
        self.padding_left_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.padding_left = 0.;
        self.padding_top_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.padding_top = 0.;
        self.padding_right_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.padding_right = 0.;
        self.padding_bottom_unit = ::protobuf::EnumOrUnknown::new(YGUnit::YGUnitUndefined);
        self.padding_bottom = 0.;
        self.border_left = 0.;
        self.border_top = 0.;
        self.border_right = 0.;
        self.border_bottom = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBUiTransform {
        static instance: PBUiTransform = PBUiTransform {
            position_type: ::protobuf::EnumOrUnknown::from_i32(0),
            align_content: ::protobuf::EnumOrUnknown::from_i32(0),
            align_items: ::protobuf::EnumOrUnknown::from_i32(0),
            align_self: ::protobuf::EnumOrUnknown::from_i32(0),
            flex_direction: ::protobuf::EnumOrUnknown::from_i32(0),
            flex_wrap: ::protobuf::EnumOrUnknown::from_i32(0),
            justify_content: ::protobuf::EnumOrUnknown::from_i32(0),
            overflow: ::protobuf::EnumOrUnknown::from_i32(0),
            display: ::protobuf::EnumOrUnknown::from_i32(0),
            direction: ::protobuf::EnumOrUnknown::from_i32(0),
            flex: 0.,
            flex_basis_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            flex_basis: 0.,
            flex_grow: 0.,
            flex_shrink: 0.,
            width_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            width: 0.,
            height_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            height: 0.,
            min_width_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            min_width: 0.,
            min_height_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            min_height: 0.,
            max_width_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            max_width: 0.,
            max_height_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            max_height: 0.,
            position_left_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            position_left: 0.,
            position_top_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            position_top: 0.,
            position_right_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            position_right: 0.,
            position_bottom_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            position_bottom: 0.,
            margin_left_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            margin_left: 0.,
            margin_top_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            margin_top: 0.,
            margin_right_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            margin_right: 0.,
            margin_bottom_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            margin_bottom: 0.,
            padding_left_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            padding_left: 0.,
            padding_top_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            padding_top: 0.,
            padding_right_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            padding_right: 0.,
            padding_bottom_unit: ::protobuf::EnumOrUnknown::from_i32(0),
            padding_bottom: 0.,
            border_left: 0.,
            border_top: 0.,
            border_right: 0.,
            border_bottom: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBUiTransform {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBUiTransform").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBUiTransform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBUiTransform {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGPositionType)
pub enum YGPositionType {
    // @@protoc_insertion_point(enum_value:YGPositionType.YGPositionTypeStatic)
    YGPositionTypeStatic = 0,
    // @@protoc_insertion_point(enum_value:YGPositionType.YGPositionTypeRelative)
    YGPositionTypeRelative = 1,
    // @@protoc_insertion_point(enum_value:YGPositionType.YGPositionTypeAbsolute)
    YGPositionTypeAbsolute = 2,
}

impl ::protobuf::Enum for YGPositionType {
    const NAME: &'static str = "YGPositionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGPositionType> {
        match value {
            0 => ::std::option::Option::Some(YGPositionType::YGPositionTypeStatic),
            1 => ::std::option::Option::Some(YGPositionType::YGPositionTypeRelative),
            2 => ::std::option::Option::Some(YGPositionType::YGPositionTypeAbsolute),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGPositionType] = &[
        YGPositionType::YGPositionTypeStatic,
        YGPositionType::YGPositionTypeRelative,
        YGPositionType::YGPositionTypeAbsolute,
    ];
}

impl ::protobuf::EnumFull for YGPositionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGPositionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGPositionType {
    fn default() -> Self {
        YGPositionType::YGPositionTypeStatic
    }
}

impl YGPositionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGPositionType>("YGPositionType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGAlign)
pub enum YGAlign {
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignAuto)
    YGAlignAuto = 0,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignFlexStart)
    YGAlignFlexStart = 1,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignCenter)
    YGAlignCenter = 2,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignFlexEnd)
    YGAlignFlexEnd = 3,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignStretch)
    YGAlignStretch = 4,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignBaseline)
    YGAlignBaseline = 5,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignSpaceBetween)
    YGAlignSpaceBetween = 6,
    // @@protoc_insertion_point(enum_value:YGAlign.YGAlignSpaceAround)
    YGAlignSpaceAround = 7,
}

impl ::protobuf::Enum for YGAlign {
    const NAME: &'static str = "YGAlign";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGAlign> {
        match value {
            0 => ::std::option::Option::Some(YGAlign::YGAlignAuto),
            1 => ::std::option::Option::Some(YGAlign::YGAlignFlexStart),
            2 => ::std::option::Option::Some(YGAlign::YGAlignCenter),
            3 => ::std::option::Option::Some(YGAlign::YGAlignFlexEnd),
            4 => ::std::option::Option::Some(YGAlign::YGAlignStretch),
            5 => ::std::option::Option::Some(YGAlign::YGAlignBaseline),
            6 => ::std::option::Option::Some(YGAlign::YGAlignSpaceBetween),
            7 => ::std::option::Option::Some(YGAlign::YGAlignSpaceAround),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGAlign] = &[
        YGAlign::YGAlignAuto,
        YGAlign::YGAlignFlexStart,
        YGAlign::YGAlignCenter,
        YGAlign::YGAlignFlexEnd,
        YGAlign::YGAlignStretch,
        YGAlign::YGAlignBaseline,
        YGAlign::YGAlignSpaceBetween,
        YGAlign::YGAlignSpaceAround,
    ];
}

impl ::protobuf::EnumFull for YGAlign {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGAlign").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGAlign {
    fn default() -> Self {
        YGAlign::YGAlignAuto
    }
}

impl YGAlign {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGAlign>("YGAlign")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGUnit)
pub enum YGUnit {
    // @@protoc_insertion_point(enum_value:YGUnit.YGUnitUndefined)
    YGUnitUndefined = 0,
    // @@protoc_insertion_point(enum_value:YGUnit.YGUnitPoint)
    YGUnitPoint = 1,
    // @@protoc_insertion_point(enum_value:YGUnit.YGUnitPercent)
    YGUnitPercent = 2,
    // @@protoc_insertion_point(enum_value:YGUnit.YGUnitAuto)
    YGUnitAuto = 3,
}

impl ::protobuf::Enum for YGUnit {
    const NAME: &'static str = "YGUnit";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGUnit> {
        match value {
            0 => ::std::option::Option::Some(YGUnit::YGUnitUndefined),
            1 => ::std::option::Option::Some(YGUnit::YGUnitPoint),
            2 => ::std::option::Option::Some(YGUnit::YGUnitPercent),
            3 => ::std::option::Option::Some(YGUnit::YGUnitAuto),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGUnit] = &[
        YGUnit::YGUnitUndefined,
        YGUnit::YGUnitPoint,
        YGUnit::YGUnitPercent,
        YGUnit::YGUnitAuto,
    ];
}

impl ::protobuf::EnumFull for YGUnit {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGUnit").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGUnit {
    fn default() -> Self {
        YGUnit::YGUnitUndefined
    }
}

impl YGUnit {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGUnit>("YGUnit")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGDirection)
pub enum YGDirection {
    // @@protoc_insertion_point(enum_value:YGDirection.YGDirectionInherit)
    YGDirectionInherit = 0,
    // @@protoc_insertion_point(enum_value:YGDirection.YGDirectionLTR)
    YGDirectionLTR = 1,
    // @@protoc_insertion_point(enum_value:YGDirection.YGDirectionRTL)
    YGDirectionRTL = 2,
}

impl ::protobuf::Enum for YGDirection {
    const NAME: &'static str = "YGDirection";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGDirection> {
        match value {
            0 => ::std::option::Option::Some(YGDirection::YGDirectionInherit),
            1 => ::std::option::Option::Some(YGDirection::YGDirectionLTR),
            2 => ::std::option::Option::Some(YGDirection::YGDirectionRTL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGDirection] = &[
        YGDirection::YGDirectionInherit,
        YGDirection::YGDirectionLTR,
        YGDirection::YGDirectionRTL,
    ];
}

impl ::protobuf::EnumFull for YGDirection {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGDirection").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGDirection {
    fn default() -> Self {
        YGDirection::YGDirectionInherit
    }
}

impl YGDirection {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGDirection>("YGDirection")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGFlexDirection)
pub enum YGFlexDirection {
    // @@protoc_insertion_point(enum_value:YGFlexDirection.YGFlexDirectionColumn)
    YGFlexDirectionColumn = 0,
    // @@protoc_insertion_point(enum_value:YGFlexDirection.YGFlexDirectionColumnReverse)
    YGFlexDirectionColumnReverse = 1,
    // @@protoc_insertion_point(enum_value:YGFlexDirection.YGFlexDirectionRow)
    YGFlexDirectionRow = 2,
    // @@protoc_insertion_point(enum_value:YGFlexDirection.YGFlexDirectionRowReverse)
    YGFlexDirectionRowReverse = 3,
}

impl ::protobuf::Enum for YGFlexDirection {
    const NAME: &'static str = "YGFlexDirection";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGFlexDirection> {
        match value {
            0 => ::std::option::Option::Some(YGFlexDirection::YGFlexDirectionColumn),
            1 => ::std::option::Option::Some(YGFlexDirection::YGFlexDirectionColumnReverse),
            2 => ::std::option::Option::Some(YGFlexDirection::YGFlexDirectionRow),
            3 => ::std::option::Option::Some(YGFlexDirection::YGFlexDirectionRowReverse),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGFlexDirection] = &[
        YGFlexDirection::YGFlexDirectionColumn,
        YGFlexDirection::YGFlexDirectionColumnReverse,
        YGFlexDirection::YGFlexDirectionRow,
        YGFlexDirection::YGFlexDirectionRowReverse,
    ];
}

impl ::protobuf::EnumFull for YGFlexDirection {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGFlexDirection").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGFlexDirection {
    fn default() -> Self {
        YGFlexDirection::YGFlexDirectionColumn
    }
}

impl YGFlexDirection {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGFlexDirection>("YGFlexDirection")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGWrap)
pub enum YGWrap {
    // @@protoc_insertion_point(enum_value:YGWrap.YGWrapNoWrap)
    YGWrapNoWrap = 0,
    // @@protoc_insertion_point(enum_value:YGWrap.YGWrapWrap)
    YGWrapWrap = 1,
    // @@protoc_insertion_point(enum_value:YGWrap.YGWrapWrapReverse)
    YGWrapWrapReverse = 2,
}

impl ::protobuf::Enum for YGWrap {
    const NAME: &'static str = "YGWrap";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGWrap> {
        match value {
            0 => ::std::option::Option::Some(YGWrap::YGWrapNoWrap),
            1 => ::std::option::Option::Some(YGWrap::YGWrapWrap),
            2 => ::std::option::Option::Some(YGWrap::YGWrapWrapReverse),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGWrap] = &[
        YGWrap::YGWrapNoWrap,
        YGWrap::YGWrapWrap,
        YGWrap::YGWrapWrapReverse,
    ];
}

impl ::protobuf::EnumFull for YGWrap {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGWrap").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGWrap {
    fn default() -> Self {
        YGWrap::YGWrapNoWrap
    }
}

impl YGWrap {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGWrap>("YGWrap")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGJustify)
pub enum YGJustify {
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifyFlexStart)
    YGJustifyFlexStart = 0,
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifyCenter)
    YGJustifyCenter = 1,
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifyFlexEnd)
    YGJustifyFlexEnd = 2,
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifySpaceBetween)
    YGJustifySpaceBetween = 3,
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifySpaceAround)
    YGJustifySpaceAround = 4,
    // @@protoc_insertion_point(enum_value:YGJustify.YGJustifySpaceEvenly)
    YGJustifySpaceEvenly = 5,
}

impl ::protobuf::Enum for YGJustify {
    const NAME: &'static str = "YGJustify";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGJustify> {
        match value {
            0 => ::std::option::Option::Some(YGJustify::YGJustifyFlexStart),
            1 => ::std::option::Option::Some(YGJustify::YGJustifyCenter),
            2 => ::std::option::Option::Some(YGJustify::YGJustifyFlexEnd),
            3 => ::std::option::Option::Some(YGJustify::YGJustifySpaceBetween),
            4 => ::std::option::Option::Some(YGJustify::YGJustifySpaceAround),
            5 => ::std::option::Option::Some(YGJustify::YGJustifySpaceEvenly),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGJustify] = &[
        YGJustify::YGJustifyFlexStart,
        YGJustify::YGJustifyCenter,
        YGJustify::YGJustifyFlexEnd,
        YGJustify::YGJustifySpaceBetween,
        YGJustify::YGJustifySpaceAround,
        YGJustify::YGJustifySpaceEvenly,
    ];
}

impl ::protobuf::EnumFull for YGJustify {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGJustify").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGJustify {
    fn default() -> Self {
        YGJustify::YGJustifyFlexStart
    }
}

impl YGJustify {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGJustify>("YGJustify")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGOverflow)
pub enum YGOverflow {
    // @@protoc_insertion_point(enum_value:YGOverflow.YGOverflowVisible)
    YGOverflowVisible = 0,
    // @@protoc_insertion_point(enum_value:YGOverflow.YGOverflowHidden)
    YGOverflowHidden = 1,
    // @@protoc_insertion_point(enum_value:YGOverflow.YGOverflowScroll)
    YGOverflowScroll = 2,
}

impl ::protobuf::Enum for YGOverflow {
    const NAME: &'static str = "YGOverflow";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGOverflow> {
        match value {
            0 => ::std::option::Option::Some(YGOverflow::YGOverflowVisible),
            1 => ::std::option::Option::Some(YGOverflow::YGOverflowHidden),
            2 => ::std::option::Option::Some(YGOverflow::YGOverflowScroll),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGOverflow] = &[
        YGOverflow::YGOverflowVisible,
        YGOverflow::YGOverflowHidden,
        YGOverflow::YGOverflowScroll,
    ];
}

impl ::protobuf::EnumFull for YGOverflow {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGOverflow").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGOverflow {
    fn default() -> Self {
        YGOverflow::YGOverflowVisible
    }
}

impl YGOverflow {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGOverflow>("YGOverflow")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGDisplay)
pub enum YGDisplay {
    // @@protoc_insertion_point(enum_value:YGDisplay.YGDisplayFlex)
    YGDisplayFlex = 0,
    // @@protoc_insertion_point(enum_value:YGDisplay.YGDisplayNone)
    YGDisplayNone = 1,
}

impl ::protobuf::Enum for YGDisplay {
    const NAME: &'static str = "YGDisplay";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGDisplay> {
        match value {
            0 => ::std::option::Option::Some(YGDisplay::YGDisplayFlex),
            1 => ::std::option::Option::Some(YGDisplay::YGDisplayNone),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGDisplay] = &[
        YGDisplay::YGDisplayFlex,
        YGDisplay::YGDisplayNone,
    ];
}

impl ::protobuf::EnumFull for YGDisplay {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGDisplay").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGDisplay {
    fn default() -> Self {
        YGDisplay::YGDisplayFlex
    }
}

impl YGDisplay {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGDisplay>("YGDisplay")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:YGEdge)
pub enum YGEdge {
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeLeft)
    YGEdgeLeft = 0,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeTop)
    YGEdgeTop = 1,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeRight)
    YGEdgeRight = 2,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeBottom)
    YGEdgeBottom = 3,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeStart)
    YGEdgeStart = 4,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeEnd)
    YGEdgeEnd = 5,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeHorizontal)
    YGEdgeHorizontal = 6,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeVertical)
    YGEdgeVertical = 7,
    // @@protoc_insertion_point(enum_value:YGEdge.YGEdgeAll)
    YGEdgeAll = 8,
}

impl ::protobuf::Enum for YGEdge {
    const NAME: &'static str = "YGEdge";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<YGEdge> {
        match value {
            0 => ::std::option::Option::Some(YGEdge::YGEdgeLeft),
            1 => ::std::option::Option::Some(YGEdge::YGEdgeTop),
            2 => ::std::option::Option::Some(YGEdge::YGEdgeRight),
            3 => ::std::option::Option::Some(YGEdge::YGEdgeBottom),
            4 => ::std::option::Option::Some(YGEdge::YGEdgeStart),
            5 => ::std::option::Option::Some(YGEdge::YGEdgeEnd),
            6 => ::std::option::Option::Some(YGEdge::YGEdgeHorizontal),
            7 => ::std::option::Option::Some(YGEdge::YGEdgeVertical),
            8 => ::std::option::Option::Some(YGEdge::YGEdgeAll),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [YGEdge] = &[
        YGEdge::YGEdgeLeft,
        YGEdge::YGEdgeTop,
        YGEdge::YGEdgeRight,
        YGEdge::YGEdgeBottom,
        YGEdge::YGEdgeStart,
        YGEdge::YGEdgeEnd,
        YGEdge::YGEdgeHorizontal,
        YGEdge::YGEdgeVertical,
        YGEdge::YGEdgeAll,
    ];
}

impl ::protobuf::EnumFull for YGEdge {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("YGEdge").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for YGEdge {
    fn default() -> Self {
        YGEdge::YGEdgeLeft
    }
}

impl YGEdge {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<YGEdge>("YGEdge")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20ecs/components/UiTransform.proto\x1a\x0fcommon/id.proto\"\x8f\x12\
    \n\rPBUiTransform\x124\n\rposition_type\x18\x01\x20\x01(\x0e2\x0f.YGPosi\
    tionTypeR\x0cpositionType\x12-\n\ralign_content\x18\x02\x20\x01(\x0e2\
    \x08.YGAlignR\x0calignContent\x12)\n\x0balign_items\x18\x03\x20\x01(\x0e\
    2\x08.YGAlignR\nalignItems\x12'\n\nalign_self\x18\x04\x20\x01(\x0e2\x08.\
    YGAlignR\talignSelf\x127\n\x0eflex_direction\x18\x05\x20\x01(\x0e2\x10.Y\
    GFlexDirectionR\rflexDirection\x12$\n\tflex_wrap\x18\x06\x20\x01(\x0e2\
    \x07.YGWrapR\x08flexWrap\x123\n\x0fjustify_content\x18\x07\x20\x01(\x0e2\
    \n.YGJustifyR\x0ejustifyContent\x12'\n\x08overflow\x18\x08\x20\x01(\x0e2\
    \x0b.YGOverflowR\x08overflow\x12$\n\x07display\x18\t\x20\x01(\x0e2\n.YGD\
    isplayR\x07display\x12*\n\tdirection\x18\n\x20\x01(\x0e2\x0c.YGDirection\
    R\tdirection\x12\x12\n\x04flex\x18\x0b\x20\x01(\x02R\x04flex\x12/\n\x0ff\
    lex_basis_unit\x18\r\x20\x01(\x0e2\x07.YGUnitR\rflexBasisUnit\x12\x1d\n\
    \nflex_basis\x18\x0e\x20\x01(\x02R\tflexBasis\x12\x1b\n\tflex_grow\x18\
    \x0f\x20\x01(\x02R\x08flexGrow\x12\x1f\n\x0bflex_shrink\x18\x10\x20\x01(\
    \x02R\nflexShrink\x12&\n\nwidth_unit\x18\x11\x20\x01(\x0e2\x07.YGUnitR\t\
    widthUnit\x12\x14\n\x05width\x18\x12\x20\x01(\x02R\x05width\x12(\n\x0bhe\
    ight_unit\x18\x13\x20\x01(\x0e2\x07.YGUnitR\nheightUnit\x12\x16\n\x06hei\
    ght\x18\x14\x20\x01(\x02R\x06height\x12-\n\x0emin_width_unit\x18\x15\x20\
    \x01(\x0e2\x07.YGUnitR\x0cminWidthUnit\x12\x1b\n\tmin_width\x18\x16\x20\
    \x01(\x02R\x08minWidth\x12/\n\x0fmin_height_unit\x18\x17\x20\x01(\x0e2\
    \x07.YGUnitR\rminHeightUnit\x12\x1d\n\nmin_height\x18\x18\x20\x01(\x02R\
    \tminHeight\x12-\n\x0emax_width_unit\x18\x1f\x20\x01(\x0e2\x07.YGUnitR\
    \x0cmaxWidthUnit\x12\x1b\n\tmax_width\x18\x20\x20\x01(\x02R\x08maxWidth\
    \x12/\n\x0fmax_height_unit\x18!\x20\x01(\x0e2\x07.YGUnitR\rmaxHeightUnit\
    \x12\x1d\n\nmax_height\x18\"\x20\x01(\x02R\tmaxHeight\x125\n\x12position\
    _left_unit\x18)\x20\x01(\x0e2\x07.YGUnitR\x10positionLeftUnit\x12#\n\rpo\
    sition_left\x18*\x20\x01(\x02R\x0cpositionLeft\x123\n\x11position_top_un\
    it\x18+\x20\x01(\x0e2\x07.YGUnitR\x0fpositionTopUnit\x12!\n\x0cposition_\
    top\x18,\x20\x01(\x02R\x0bpositionTop\x127\n\x13position_right_unit\x18-\
    \x20\x01(\x0e2\x07.YGUnitR\x11positionRightUnit\x12%\n\x0eposition_right\
    \x18.\x20\x01(\x02R\rpositionRight\x129\n\x14position_bottom_unit\x18/\
    \x20\x01(\x0e2\x07.YGUnitR\x12positionBottomUnit\x12'\n\x0fposition_bott\
    om\x180\x20\x01(\x02R\x0epositionBottom\x121\n\x10margin_left_unit\x183\
    \x20\x01(\x0e2\x07.YGUnitR\x0emarginLeftUnit\x12\x1f\n\x0bmargin_left\
    \x184\x20\x01(\x02R\nmarginLeft\x12/\n\x0fmargin_top_unit\x185\x20\x01(\
    \x0e2\x07.YGUnitR\rmarginTopUnit\x12\x1d\n\nmargin_top\x186\x20\x01(\x02\
    R\tmarginTop\x123\n\x11margin_right_unit\x187\x20\x01(\x0e2\x07.YGUnitR\
    \x0fmarginRightUnit\x12!\n\x0cmargin_right\x188\x20\x01(\x02R\x0bmarginR\
    ight\x125\n\x12margin_bottom_unit\x189\x20\x01(\x0e2\x07.YGUnitR\x10marg\
    inBottomUnit\x12#\n\rmargin_bottom\x18:\x20\x01(\x02R\x0cmarginBottom\
    \x123\n\x11padding_left_unit\x18=\x20\x01(\x0e2\x07.YGUnitR\x0fpaddingLe\
    ftUnit\x12!\n\x0cpadding_left\x18>\x20\x01(\x02R\x0bpaddingLeft\x121\n\
    \x10padding_top_unit\x18?\x20\x01(\x0e2\x07.YGUnitR\x0epaddingTopUnit\
    \x12\x1f\n\x0bpadding_top\x18@\x20\x01(\x02R\npaddingTop\x125\n\x12paddi\
    ng_right_unit\x18A\x20\x01(\x0e2\x07.YGUnitR\x10paddingRightUnit\x12#\n\
    \rpadding_right\x18B\x20\x01(\x02R\x0cpaddingRight\x127\n\x13padding_bot\
    tom_unit\x18C\x20\x01(\x0e2\x07.YGUnitR\x11paddingBottomUnit\x12%\n\x0ep\
    adding_bottom\x18D\x20\x01(\x02R\rpaddingBottom\x12\x1f\n\x0bborder_left\
    \x18H\x20\x01(\x02R\nborderLeft\x12\x1d\n\nborder_top\x18J\x20\x01(\x02R\
    \tborderTop\x12!\n\x0cborder_right\x18L\x20\x01(\x02R\x0bborderRight\x12\
    #\n\rborder_bottom\x18N\x20\x01(\x02R\x0cborderBottomJ\x04\x08(\x10)J\
    \x04\x08G\x10HJ\x04\x08I\x10JJ\x04\x08K\x10LJ\x04\x08M\x10N*b\n\x0eYGPos\
    itionType\x12\x18\n\x14YGPositionTypeStatic\x10\0\x12\x1a\n\x16YGPositio\
    nTypeRelative\x10\x01\x12\x1a\n\x16YGPositionTypeAbsolute\x10\x02*\xb1\
    \x01\n\x07YGAlign\x12\x0f\n\x0bYGAlignAuto\x10\0\x12\x14\n\x10YGAlignFle\
    xStart\x10\x01\x12\x11\n\rYGAlignCenter\x10\x02\x12\x12\n\x0eYGAlignFlex\
    End\x10\x03\x12\x12\n\x0eYGAlignStretch\x10\x04\x12\x13\n\x0fYGAlignBase\
    line\x10\x05\x12\x17\n\x13YGAlignSpaceBetween\x10\x06\x12\x16\n\x12YGAli\
    gnSpaceAround\x10\x07*Q\n\x06YGUnit\x12\x13\n\x0fYGUnitUndefined\x10\0\
    \x12\x0f\n\x0bYGUnitPoint\x10\x01\x12\x11\n\rYGUnitPercent\x10\x02\x12\
    \x0e\n\nYGUnitAuto\x10\x03*M\n\x0bYGDirection\x12\x16\n\x12YGDirectionIn\
    herit\x10\0\x12\x12\n\x0eYGDirectionLTR\x10\x01\x12\x12\n\x0eYGDirection\
    RTL\x10\x02*\x85\x01\n\x0fYGFlexDirection\x12\x19\n\x15YGFlexDirectionCo\
    lumn\x10\0\x12\x20\n\x1cYGFlexDirectionColumnReverse\x10\x01\x12\x16\n\
    \x12YGFlexDirectionRow\x10\x02\x12\x1d\n\x19YGFlexDirectionRowReverse\
    \x10\x03*A\n\x06YGWrap\x12\x10\n\x0cYGWrapNoWrap\x10\0\x12\x0e\n\nYGWrap\
    Wrap\x10\x01\x12\x15\n\x11YGWrapWrapReverse\x10\x02*\x9d\x01\n\tYGJustif\
    y\x12\x16\n\x12YGJustifyFlexStart\x10\0\x12\x13\n\x0fYGJustifyCenter\x10\
    \x01\x12\x14\n\x10YGJustifyFlexEnd\x10\x02\x12\x19\n\x15YGJustifySpaceBe\
    tween\x10\x03\x12\x18\n\x14YGJustifySpaceAround\x10\x04\x12\x18\n\x14YGJ\
    ustifySpaceEvenly\x10\x05*O\n\nYGOverflow\x12\x15\n\x11YGOverflowVisible\
    \x10\0\x12\x14\n\x10YGOverflowHidden\x10\x01\x12\x14\n\x10YGOverflowScro\
    ll\x10\x02*1\n\tYGDisplay\x12\x11\n\rYGDisplayFlex\x10\0\x12\x11\n\rYGDi\
    splayNone\x10\x01*\xa3\x01\n\x06YGEdge\x12\x0e\n\nYGEdgeLeft\x10\0\x12\r\
    \n\tYGEdgeTop\x10\x01\x12\x0f\n\x0bYGEdgeRight\x10\x02\x12\x10\n\x0cYGEd\
    geBottom\x10\x03\x12\x0f\n\x0bYGEdgeStart\x10\x04\x12\r\n\tYGEdgeEnd\x10\
    \x05\x12\x14\n\x10YGEdgeHorizontal\x10\x06\x12\x12\n\x0eYGEdgeVertical\
    \x10\x07\x12\r\n\tYGEdgeAll\x10\x08B\x05\x80\xb5\x18\x9a\x08J\xe9,\n\x07\
    \x12\x05\0\0\x9c\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x02\0\x19\n\x08\n\x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\
    \x86\x03\x12\x03\x03\0!\n\n\n\x02\x05\0\x12\x04\x05\0\t\x01\n\n\n\x03\
    \x05\0\x01\x12\x03\x05\x05\x13\n\x0b\n\x04\x05\0\x02\0\x12\x03\x06\x02\
    \x1b\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x06\x02\x16\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03\x06\x19\x1a\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x07\x02\
    \x1d\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x07\x02\x18\n\x0c\n\x05\x05\0\
    \x02\x01\x02\x12\x03\x07\x1b\x1c\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x08\
    \x02\x1d\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x08\x02\x18\n\x0c\n\x05\
    \x05\0\x02\x02\x02\x12\x03\x08\x1b\x1c\n\n\n\x02\x05\x01\x12\x04\x0b\0\
    \x14\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0b\x05\x0c\n\x0b\n\x04\x05\x01\
    \x02\0\x12\x03\x0c\x02\x12\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\x0c\x02\
    \r\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x0c\x10\x11\n\x0b\n\x04\x05\x01\
    \x02\x01\x12\x03\r\x02\x17\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03\r\x02\
    \x12\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\r\x15\x16\n\x0b\n\x04\x05\
    \x01\x02\x02\x12\x03\x0e\x02\x14\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03\
    \x0e\x02\x0f\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x03\x0e\x12\x13\n\x0b\n\
    \x04\x05\x01\x02\x03\x12\x03\x0f\x02\x15\n\x0c\n\x05\x05\x01\x02\x03\x01\
    \x12\x03\x0f\x02\x10\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03\x0f\x13\x14\
    \n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x10\x02\x15\n\x0c\n\x05\x05\x01\x02\
    \x04\x01\x12\x03\x10\x02\x10\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\x03\x10\
    \x13\x14\n\x0b\n\x04\x05\x01\x02\x05\x12\x03\x11\x02\x16\n\x0c\n\x05\x05\
    \x01\x02\x05\x01\x12\x03\x11\x02\x11\n\x0c\n\x05\x05\x01\x02\x05\x02\x12\
    \x03\x11\x14\x15\n\x0b\n\x04\x05\x01\x02\x06\x12\x03\x12\x02\x1a\n\x0c\n\
    \x05\x05\x01\x02\x06\x01\x12\x03\x12\x02\x15\n\x0c\n\x05\x05\x01\x02\x06\
    \x02\x12\x03\x12\x18\x19\n\x0b\n\x04\x05\x01\x02\x07\x12\x03\x13\x02\x19\
    \n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x03\x13\x02\x14\n\x0c\n\x05\x05\x01\
    \x02\x07\x02\x12\x03\x13\x17\x18\n\n\n\x02\x05\x02\x12\x04\x16\0\x1b\x01\
    \n\n\n\x03\x05\x02\x01\x12\x03\x16\x05\x0b\n\x0b\n\x04\x05\x02\x02\0\x12\
    \x03\x17\x02\x16\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\x17\x02\x11\n\x0c\
    \n\x05\x05\x02\x02\0\x02\x12\x03\x17\x14\x15\n\x0b\n\x04\x05\x02\x02\x01\
    \x12\x03\x18\x02\x12\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03\x18\x02\r\n\
    \x0c\n\x05\x05\x02\x02\x01\x02\x12\x03\x18\x10\x11\n\x0b\n\x04\x05\x02\
    \x02\x02\x12\x03\x19\x02\x14\n\x0c\n\x05\x05\x02\x02\x02\x01\x12\x03\x19\
    \x02\x0f\n\x0c\n\x05\x05\x02\x02\x02\x02\x12\x03\x19\x12\x13\n\x0b\n\x04\
    \x05\x02\x02\x03\x12\x03\x1a\x02\x11\n\x0c\n\x05\x05\x02\x02\x03\x01\x12\
    \x03\x1a\x02\x0c\n\x0c\n\x05\x05\x02\x02\x03\x02\x12\x03\x1a\x0f\x10\n\n\
    \n\x02\x05\x03\x12\x04\x1d\0!\x01\n\n\n\x03\x05\x03\x01\x12\x03\x1d\x05\
    \x10\n\x0b\n\x04\x05\x03\x02\0\x12\x03\x1e\x02\x19\n\x0c\n\x05\x05\x03\
    \x02\0\x01\x12\x03\x1e\x02\x14\n\x0c\n\x05\x05\x03\x02\0\x02\x12\x03\x1e\
    \x17\x18\n\x0b\n\x04\x05\x03\x02\x01\x12\x03\x1f\x02\x15\n\x0c\n\x05\x05\
    \x03\x02\x01\x01\x12\x03\x1f\x02\x10\n\x0c\n\x05\x05\x03\x02\x01\x02\x12\
    \x03\x1f\x13\x14\n\x0b\n\x04\x05\x03\x02\x02\x12\x03\x20\x02\x15\n\x0c\n\
    \x05\x05\x03\x02\x02\x01\x12\x03\x20\x02\x10\n\x0c\n\x05\x05\x03\x02\x02\
    \x02\x12\x03\x20\x13\x14\n\n\n\x02\x05\x04\x12\x04#\0(\x01\n\n\n\x03\x05\
    \x04\x01\x12\x03#\x05\x14\n\x0b\n\x04\x05\x04\x02\0\x12\x03$\x02\x1c\n\
    \x0c\n\x05\x05\x04\x02\0\x01\x12\x03$\x02\x17\n\x0c\n\x05\x05\x04\x02\0\
    \x02\x12\x03$\x1a\x1b\n\x0b\n\x04\x05\x04\x02\x01\x12\x03%\x02#\n\x0c\n\
    \x05\x05\x04\x02\x01\x01\x12\x03%\x02\x1e\n\x0c\n\x05\x05\x04\x02\x01\
    \x02\x12\x03%!\"\n\x0b\n\x04\x05\x04\x02\x02\x12\x03&\x02\x19\n\x0c\n\
    \x05\x05\x04\x02\x02\x01\x12\x03&\x02\x14\n\x0c\n\x05\x05\x04\x02\x02\
    \x02\x12\x03&\x17\x18\n\x0b\n\x04\x05\x04\x02\x03\x12\x03'\x02\x20\n\x0c\
    \n\x05\x05\x04\x02\x03\x01\x12\x03'\x02\x1b\n\x0c\n\x05\x05\x04\x02\x03\
    \x02\x12\x03'\x1e\x1f\n\n\n\x02\x05\x05\x12\x04*\0.\x01\n\n\n\x03\x05\
    \x05\x01\x12\x03*\x05\x0b\n\x0b\n\x04\x05\x05\x02\0\x12\x03+\x02\x13\n\
    \x0c\n\x05\x05\x05\x02\0\x01\x12\x03+\x02\x0e\n\x0c\n\x05\x05\x05\x02\0\
    \x02\x12\x03+\x11\x12\n\x0b\n\x04\x05\x05\x02\x01\x12\x03,\x02\x11\n\x0c\
    \n\x05\x05\x05\x02\x01\x01\x12\x03,\x02\x0c\n\x0c\n\x05\x05\x05\x02\x01\
    \x02\x12\x03,\x0f\x10\n\x0b\n\x04\x05\x05\x02\x02\x12\x03-\x02\x18\n\x0c\
    \n\x05\x05\x05\x02\x02\x01\x12\x03-\x02\x13\n\x0c\n\x05\x05\x05\x02\x02\
    \x02\x12\x03-\x16\x17\n\n\n\x02\x05\x06\x12\x040\07\x01\n\n\n\x03\x05\
    \x06\x01\x12\x030\x05\x0e\n\x0b\n\x04\x05\x06\x02\0\x12\x031\x02\x19\n\
    \x0c\n\x05\x05\x06\x02\0\x01\x12\x031\x02\x14\n\x0c\n\x05\x05\x06\x02\0\
    \x02\x12\x031\x17\x18\n\x0b\n\x04\x05\x06\x02\x01\x12\x032\x02\x16\n\x0c\
    \n\x05\x05\x06\x02\x01\x01\x12\x032\x02\x11\n\x0c\n\x05\x05\x06\x02\x01\
    \x02\x12\x032\x14\x15\n\x0b\n\x04\x05\x06\x02\x02\x12\x033\x02\x17\n\x0c\
    \n\x05\x05\x06\x02\x02\x01\x12\x033\x02\x12\n\x0c\n\x05\x05\x06\x02\x02\
    \x02\x12\x033\x15\x16\n\x0b\n\x04\x05\x06\x02\x03\x12\x034\x02\x1c\n\x0c\
    \n\x05\x05\x06\x02\x03\x01\x12\x034\x02\x17\n\x0c\n\x05\x05\x06\x02\x03\
    \x02\x12\x034\x1a\x1b\n\x0b\n\x04\x05\x06\x02\x04\x12\x035\x02\x1b\n\x0c\
    \n\x05\x05\x06\x02\x04\x01\x12\x035\x02\x16\n\x0c\n\x05\x05\x06\x02\x04\
    \x02\x12\x035\x19\x1a\n\x0b\n\x04\x05\x06\x02\x05\x12\x036\x02\x1b\n\x0c\
    \n\x05\x05\x06\x02\x05\x01\x12\x036\x02\x16\n\x0c\n\x05\x05\x06\x02\x05\
    \x02\x12\x036\x19\x1a\n\n\n\x02\x05\x07\x12\x049\0=\x01\n\n\n\x03\x05\
    \x07\x01\x12\x039\x05\x0f\n\x0b\n\x04\x05\x07\x02\0\x12\x03:\x02\x18\n\
    \x0c\n\x05\x05\x07\x02\0\x01\x12\x03:\x02\x13\n\x0c\n\x05\x05\x07\x02\0\
    \x02\x12\x03:\x16\x17\n\x0b\n\x04\x05\x07\x02\x01\x12\x03;\x02\x17\n\x0c\
    \n\x05\x05\x07\x02\x01\x01\x12\x03;\x02\x12\n\x0c\n\x05\x05\x07\x02\x01\
    \x02\x12\x03;\x15\x16\n\x0b\n\x04\x05\x07\x02\x02\x12\x03<\x02\x17\n\x0c\
    \n\x05\x05\x07\x02\x02\x01\x12\x03<\x02\x12\n\x0c\n\x05\x05\x07\x02\x02\
    \x02\x12\x03<\x15\x16\n\n\n\x02\x05\x08\x12\x04?\0B\x01\n\n\n\x03\x05\
    \x08\x01\x12\x03?\x05\x0e\n\x0b\n\x04\x05\x08\x02\0\x12\x03@\x02\x14\n\
    \x0c\n\x05\x05\x08\x02\0\x01\x12\x03@\x02\x0f\n\x0c\n\x05\x05\x08\x02\0\
    \x02\x12\x03@\x12\x13\n\x0b\n\x04\x05\x08\x02\x01\x12\x03A\x02\x14\n\x0c\
    \n\x05\x05\x08\x02\x01\x01\x12\x03A\x02\x0f\n\x0c\n\x05\x05\x08\x02\x01\
    \x02\x12\x03A\x12\x13\n\n\n\x02\x05\t\x12\x04D\0N\x01\n\n\n\x03\x05\t\
    \x01\x12\x03D\x05\x0b\n\x0b\n\x04\x05\t\x02\0\x12\x03E\x02\x11\n\x0c\n\
    \x05\x05\t\x02\0\x01\x12\x03E\x02\x0c\n\x0c\n\x05\x05\t\x02\0\x02\x12\
    \x03E\x0f\x10\n\x0b\n\x04\x05\t\x02\x01\x12\x03F\x02\x10\n\x0c\n\x05\x05\
    \t\x02\x01\x01\x12\x03F\x02\x0b\n\x0c\n\x05\x05\t\x02\x01\x02\x12\x03F\
    \x0e\x0f\n\x0b\n\x04\x05\t\x02\x02\x12\x03G\x02\x12\n\x0c\n\x05\x05\t\
    \x02\x02\x01\x12\x03G\x02\r\n\x0c\n\x05\x05\t\x02\x02\x02\x12\x03G\x10\
    \x11\n\x0b\n\x04\x05\t\x02\x03\x12\x03H\x02\x13\n\x0c\n\x05\x05\t\x02\
    \x03\x01\x12\x03H\x02\x0e\n\x0c\n\x05\x05\t\x02\x03\x02\x12\x03H\x11\x12\
    \n\x0b\n\x04\x05\t\x02\x04\x12\x03I\x02\x12\n\x0c\n\x05\x05\t\x02\x04\
    \x01\x12\x03I\x02\r\n\x0c\n\x05\x05\t\x02\x04\x02\x12\x03I\x10\x11\n\x0b\
    \n\x04\x05\t\x02\x05\x12\x03J\x02\x10\n\x0c\n\x05\x05\t\x02\x05\x01\x12\
    \x03J\x02\x0b\n\x0c\n\x05\x05\t\x02\x05\x02\x12\x03J\x0e\x0f\n\x0b\n\x04\
    \x05\t\x02\x06\x12\x03K\x02\x17\n\x0c\n\x05\x05\t\x02\x06\x01\x12\x03K\
    \x02\x12\n\x0c\n\x05\x05\t\x02\x06\x02\x12\x03K\x15\x16\n\x0b\n\x04\x05\
    \t\x02\x07\x12\x03L\x02\x15\n\x0c\n\x05\x05\t\x02\x07\x01\x12\x03L\x02\
    \x10\n\x0c\n\x05\x05\t\x02\x07\x02\x12\x03L\x13\x14\n\x0b\n\x04\x05\t\
    \x02\x08\x12\x03M\x02\x10\n\x0c\n\x05\x05\t\x02\x08\x01\x12\x03M\x02\x0b\
    \n\x0c\n\x05\x05\t\x02\x08\x02\x12\x03M\x0e\x0f\n\x0b\n\x02\x04\0\x12\
    \x05P\0\x9c\x01\x01\n\n\n\x03\x04\0\x01\x12\x03P\x08\x15\n\x0b\n\x04\x04\
    \0\x02\0\x12\x03Q\x02#\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03Q\x02\x10\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03Q\x11\x1e\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03Q!\"\n\x0b\n\x04\x04\0\x02\x01\x12\x03S\x02\x1c\n\x0c\n\x05\x04\
    \0\x02\x01\x06\x12\x03S\x02\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03S\n\
    \x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03S\x1a\x1b\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03T\x02\x1a\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03T\x02\t\n\
    \x0c\n\x05\x04\0\x02\x02\x01\x12\x03T\n\x15\n\x0c\n\x05\x04\0\x02\x02\
    \x03\x12\x03T\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03U\x02\x19\n\x0c\n\
    \x05\x04\0\x02\x03\x06\x12\x03U\x02\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03U\n\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03U\x17\x18\n\x0b\n\x04\
    \x04\0\x02\x04\x12\x03V\x02%\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03V\x02\
    \x11\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03V\x12\x20\n\x0c\n\x05\x04\0\
    \x02\x04\x03\x12\x03V#$\n\x0b\n\x04\x04\0\x02\x05\x12\x03W\x02\x17\n\x0c\
    \n\x05\x04\0\x02\x05\x06\x12\x03W\x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03W\t\x12\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03W\x15\x16\n\x0b\n\
    \x04\x04\0\x02\x06\x12\x03X\x02\x20\n\x0c\n\x05\x04\0\x02\x06\x06\x12\
    \x03X\x02\x0b\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03X\x0c\x1b\n\x0c\n\x05\
    \x04\0\x02\x06\x03\x12\x03X\x1e\x1f\n\x0b\n\x04\x04\0\x02\x07\x12\x03Z\
    \x02\x1a\n\x0c\n\x05\x04\0\x02\x07\x06\x12\x03Z\x02\x0c\n\x0c\n\x05\x04\
    \0\x02\x07\x01\x12\x03Z\r\x15\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03Z\x18\
    \x19\n\x0b\n\x04\x04\0\x02\x08\x12\x03[\x02\x18\n\x0c\n\x05\x04\0\x02\
    \x08\x06\x12\x03[\x02\x0b\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03[\x0c\x13\
    \n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03[\x16\x17\n\x0b\n\x04\x04\0\x02\t\
    \x12\x03\\\x02\x1d\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03\\\x02\r\n\x0c\n\
    \x05\x04\0\x02\t\x01\x12\x03\\\x0e\x17\n\x0c\n\x05\x04\0\x02\t\x03\x12\
    \x03\\\x1a\x1c\n\x0b\n\x04\x04\0\x02\n\x12\x03^\x02\x12\n\x0c\n\x05\x04\
    \0\x02\n\x05\x12\x03^\x02\x07\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03^\x08\
    \x0c\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03^\x0f\x11\n\x0b\n\x04\x04\0\x02\
    \x0b\x12\x03`\x02\x1e\n\x0c\n\x05\x04\0\x02\x0b\x06\x12\x03`\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x0b\x01\x12\x03`\t\x18\n\x0c\n\x05\x04\0\x02\x0b\
    \x03\x12\x03`\x1b\x1d\n\x0b\n\x04\x04\0\x02\x0c\x12\x03a\x02\x18\n\x0c\n\
    \x05\x04\0\x02\x0c\x05\x12\x03a\x02\x07\n\x0c\n\x05\x04\0\x02\x0c\x01\
    \x12\x03a\x08\x12\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03a\x15\x17\n\x0b\n\
    \x04\x04\0\x02\r\x12\x03c\x02\x17\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03c\
    \x02\x07\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03c\x08\x11\n\x0c\n\x05\x04\0\
    \x02\r\x03\x12\x03c\x14\x16\n\x0b\n\x04\x04\0\x02\x0e\x12\x03d\x02\x19\n\
    \x0c\n\x05\x04\0\x02\x0e\x05\x12\x03d\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\
    \x01\x12\x03d\x08\x13\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03d\x16\x18\n\
    \x0b\n\x04\x04\0\x02\x0f\x12\x03f\x02\x19\n\x0c\n\x05\x04\0\x02\x0f\x06\
    \x12\x03f\x02\x08\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03f\t\x13\n\x0c\n\
    \x05\x04\0\x02\x0f\x03\x12\x03f\x16\x18\n\x0b\n\x04\x04\0\x02\x10\x12\
    \x03g\x02\x13\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03g\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x10\x01\x12\x03g\x08\r\n\x0c\n\x05\x04\0\x02\x10\x03\x12\x03g\
    \x10\x12\n\x0b\n\x04\x04\0\x02\x11\x12\x03h\x02\x1a\n\x0c\n\x05\x04\0\
    \x02\x11\x06\x12\x03h\x02\x08\n\x0c\n\x05\x04\0\x02\x11\x01\x12\x03h\t\
    \x14\n\x0c\n\x05\x04\0\x02\x11\x03\x12\x03h\x17\x19\n\x0b\n\x04\x04\0\
    \x02\x12\x12\x03i\x02\x14\n\x0c\n\x05\x04\0\x02\x12\x05\x12\x03i\x02\x07\
    \n\x0c\n\x05\x04\0\x02\x12\x01\x12\x03i\x08\x0e\n\x0c\n\x05\x04\0\x02\
    \x12\x03\x12\x03i\x11\x13\n\x0b\n\x04\x04\0\x02\x13\x12\x03k\x02\x1d\n\
    \x0c\n\x05\x04\0\x02\x13\x06\x12\x03k\x02\x08\n\x0c\n\x05\x04\0\x02\x13\
    \x01\x12\x03k\t\x17\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03k\x1a\x1c\n\x0b\
    \n\x04\x04\0\x02\x14\x12\x03l\x02\x17\n\x0c\n\x05\x04\0\x02\x14\x05\x12\
    \x03l\x02\x07\n\x0c\n\x05\x04\0\x02\x14\x01\x12\x03l\x08\x11\n\x0c\n\x05\
    \x04\0\x02\x14\x03\x12\x03l\x14\x16\n\x0b\n\x04\x04\0\x02\x15\x12\x03m\
    \x02\x1e\n\x0c\n\x05\x04\0\x02\x15\x06\x12\x03m\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x15\x01\x12\x03m\t\x18\n\x0c\n\x05\x04\0\x02\x15\x03\x12\x03m\x1b\
    \x1d\n\x0b\n\x04\x04\0\x02\x16\x12\x03n\x02\x18\n\x0c\n\x05\x04\0\x02\
    \x16\x05\x12\x03n\x02\x07\n\x0c\n\x05\x04\0\x02\x16\x01\x12\x03n\x08\x12\
    \n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03n\x15\x17\n\x0b\n\x04\x04\0\x02\
    \x17\x12\x03p\x02\x1d\n\x0c\n\x05\x04\0\x02\x17\x06\x12\x03p\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x17\x01\x12\x03p\t\x17\n\x0c\n\x05\x04\0\x02\x17\
    \x03\x12\x03p\x1a\x1c\n\x0b\n\x04\x04\0\x02\x18\x12\x03q\x02\x17\n\x0c\n\
    \x05\x04\0\x02\x18\x05\x12\x03q\x02\x07\n\x0c\n\x05\x04\0\x02\x18\x01\
    \x12\x03q\x08\x11\n\x0c\n\x05\x04\0\x02\x18\x03\x12\x03q\x14\x16\n\x0b\n\
    \x04\x04\0\x02\x19\x12\x03r\x02\x1e\n\x0c\n\x05\x04\0\x02\x19\x06\x12\
    \x03r\x02\x08\n\x0c\n\x05\x04\0\x02\x19\x01\x12\x03r\t\x18\n\x0c\n\x05\
    \x04\0\x02\x19\x03\x12\x03r\x1b\x1d\n\x0b\n\x04\x04\0\x02\x1a\x12\x03s\
    \x02\x18\n\x0c\n\x05\x04\0\x02\x1a\x05\x12\x03s\x02\x07\n\x0c\n\x05\x04\
    \0\x02\x1a\x01\x12\x03s\x08\x12\n\x0c\n\x05\x04\0\x02\x1a\x03\x12\x03s\
    \x15\x17\n6\n\x03\x04\0\t\x12\x03v\x02\x0e\x1a\x0e\x20non-standard\n\"\
    \x1a\x20float\x20aspect_ratio\x20=\x2040;\n\n\x0b\n\x04\x04\0\t\0\x12\
    \x03v\x0b\r\n\x0c\n\x05\x04\0\t\0\x01\x12\x03v\x0b\r\n\x0c\n\x05\x04\0\t\
    \0\x02\x12\x03v\x0b\r\n\x0b\n\x04\x04\0\x02\x1b\x12\x03x\x02!\n\x0c\n\
    \x05\x04\0\x02\x1b\x06\x12\x03x\x02\x08\n\x0c\n\x05\x04\0\x02\x1b\x01\
    \x12\x03x\t\x1b\n\x0c\n\x05\x04\0\x02\x1b\x03\x12\x03x\x1e\x20\n\x0b\n\
    \x04\x04\0\x02\x1c\x12\x03y\x02\x1b\n\x0c\n\x05\x04\0\x02\x1c\x05\x12\
    \x03y\x02\x07\n\x0c\n\x05\x04\0\x02\x1c\x01\x12\x03y\x08\x15\n\x0c\n\x05\
    \x04\0\x02\x1c\x03\x12\x03y\x18\x1a\n\x0b\n\x04\x04\0\x02\x1d\x12\x03z\
    \x02\x20\n\x0c\n\x05\x04\0\x02\x1d\x06\x12\x03z\x02\x08\n\x0c\n\x05\x04\
    \0\x02\x1d\x01\x12\x03z\t\x1a\n\x0c\n\x05\x04\0\x02\x1d\x03\x12\x03z\x1d\
    \x1f\n\x0b\n\x04\x04\0\x02\x1e\x12\x03{\x02\x1a\n\x0c\n\x05\x04\0\x02\
    \x1e\x05\x12\x03{\x02\x07\n\x0c\n\x05\x04\0\x02\x1e\x01\x12\x03{\x08\x14\
    \n\x0c\n\x05\x04\0\x02\x1e\x03\x12\x03{\x17\x19\n\x0b\n\x04\x04\0\x02\
    \x1f\x12\x03|\x02\"\n\x0c\n\x05\x04\0\x02\x1f\x06\x12\x03|\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x1f\x01\x12\x03|\t\x1c\n\x0c\n\x05\x04\0\x02\x1f\x03\
    \x12\x03|\x1f!\n\x0b\n\x04\x04\0\x02\x20\x12\x03}\x02\x1c\n\x0c\n\x05\
    \x04\0\x02\x20\x05\x12\x03}\x02\x07\n\x0c\n\x05\x04\0\x02\x20\x01\x12\
    \x03}\x08\x16\n\x0c\n\x05\x04\0\x02\x20\x03\x12\x03}\x19\x1b\n\x0b\n\x04\
    \x04\0\x02!\x12\x03~\x02#\n\x0c\n\x05\x04\0\x02!\x06\x12\x03~\x02\x08\n\
    \x0c\n\x05\x04\0\x02!\x01\x12\x03~\t\x1d\n\x0c\n\x05\x04\0\x02!\x03\x12\
    \x03~\x20\"\n\x0b\n\x04\x04\0\x02\"\x12\x03\x7f\x02\x1d\n\x0c\n\x05\x04\
    \0\x02\"\x05\x12\x03\x7f\x02\x07\n\x0c\n\x05\x04\0\x02\"\x01\x12\x03\x7f\
    \x08\x17\n\x0c\n\x05\x04\0\x02\"\x03\x12\x03\x7f\x1a\x1c\n\x16\n\x04\x04\
    \0\x02#\x12\x04\x82\x01\x02\x1f\x1a\x08\x20margin\n\n\r\n\x05\x04\0\x02#\
    \x06\x12\x04\x82\x01\x02\x08\n\r\n\x05\x04\0\x02#\x01\x12\x04\x82\x01\t\
    \x19\n\r\n\x05\x04\0\x02#\x03\x12\x04\x82\x01\x1c\x1e\n\x0c\n\x04\x04\0\
    \x02$\x12\x04\x83\x01\x02\x19\n\r\n\x05\x04\0\x02$\x05\x12\x04\x83\x01\
    \x02\x07\n\r\n\x05\x04\0\x02$\x01\x12\x04\x83\x01\x08\x13\n\r\n\x05\x04\
    \0\x02$\x03\x12\x04\x83\x01\x16\x18\n\x0c\n\x04\x04\0\x02%\x12\x04\x84\
    \x01\x02\x1e\n\r\n\x05\x04\0\x02%\x06\x12\x04\x84\x01\x02\x08\n\r\n\x05\
    \x04\0\x02%\x01\x12\x04\x84\x01\t\x18\n\r\n\x05\x04\0\x02%\x03\x12\x04\
    \x84\x01\x1b\x1d\n\x0c\n\x04\x04\0\x02&\x12\x04\x85\x01\x02\x18\n\r\n\
    \x05\x04\0\x02&\x05\x12\x04\x85\x01\x02\x07\n\r\n\x05\x04\0\x02&\x01\x12\
    \x04\x85\x01\x08\x12\n\r\n\x05\x04\0\x02&\x03\x12\x04\x85\x01\x15\x17\n\
    \x0c\n\x04\x04\0\x02'\x12\x04\x86\x01\x02\x20\n\r\n\x05\x04\0\x02'\x06\
    \x12\x04\x86\x01\x02\x08\n\r\n\x05\x04\0\x02'\x01\x12\x04\x86\x01\t\x1a\
    \n\r\n\x05\x04\0\x02'\x03\x12\x04\x86\x01\x1d\x1f\n\x0c\n\x04\x04\0\x02(\
    \x12\x04\x87\x01\x02\x1a\n\r\n\x05\x04\0\x02(\x05\x12\x04\x87\x01\x02\
    \x07\n\r\n\x05\x04\0\x02(\x01\x12\x04\x87\x01\x08\x14\n\r\n\x05\x04\0\
    \x02(\x03\x12\x04\x87\x01\x17\x19\n\x0c\n\x04\x04\0\x02)\x12\x04\x88\x01\
    \x02!\n\r\n\x05\x04\0\x02)\x06\x12\x04\x88\x01\x02\x08\n\r\n\x05\x04\0\
    \x02)\x01\x12\x04\x88\x01\t\x1b\n\r\n\x05\x04\0\x02)\x03\x12\x04\x88\x01\
    \x1e\x20\n\x0c\n\x04\x04\0\x02*\x12\x04\x89\x01\x02\x1b\n\r\n\x05\x04\0\
    \x02*\x05\x12\x04\x89\x01\x02\x07\n\r\n\x05\x04\0\x02*\x01\x12\x04\x89\
    \x01\x08\x15\n\r\n\x05\x04\0\x02*\x03\x12\x04\x89\x01\x18\x1a\n\x0c\n\
    \x04\x04\0\x02+\x12\x04\x8b\x01\x02\x20\n\r\n\x05\x04\0\x02+\x06\x12\x04\
    \x8b\x01\x02\x08\n\r\n\x05\x04\0\x02+\x01\x12\x04\x8b\x01\t\x1a\n\r\n\
    \x05\x04\0\x02+\x03\x12\x04\x8b\x01\x1d\x1f\n\x0c\n\x04\x04\0\x02,\x12\
    \x04\x8c\x01\x02\x1a\n\r\n\x05\x04\0\x02,\x05\x12\x04\x8c\x01\x02\x07\n\
    \r\n\x05\x04\0\x02,\x01\x12\x04\x8c\x01\x08\x14\n\r\n\x05\x04\0\x02,\x03\
    \x12\x04\x8c\x01\x17\x19\n\x0c\n\x04\x04\0\x02-\x12\x04\x8d\x01\x02\x1f\
    \n\r\n\x05\x04\0\x02-\x06\x12\x04\x8d\x01\x02\x08\n\r\n\x05\x04\0\x02-\
    \x01\x12\x04\x8d\x01\t\x19\n\r\n\x05\x04\0\x02-\x03\x12\x04\x8d\x01\x1c\
    \x1e\n\x0c\n\x04\x04\0\x02.\x12\x04\x8e\x01\x02\x19\n\r\n\x05\x04\0\x02.\
    \x05\x12\x04\x8e\x01\x02\x07\n\r\n\x05\x04\0\x02.\x01\x12\x04\x8e\x01\
    \x08\x13\n\r\n\x05\x04\0\x02.\x03\x12\x04\x8e\x01\x16\x18\n\x0c\n\x04\
    \x04\0\x02/\x12\x04\x8f\x01\x02!\n\r\n\x05\x04\0\x02/\x06\x12\x04\x8f\
    \x01\x02\x08\n\r\n\x05\x04\0\x02/\x01\x12\x04\x8f\x01\t\x1b\n\r\n\x05\
    \x04\0\x02/\x03\x12\x04\x8f\x01\x1e\x20\n\x0c\n\x04\x04\0\x020\x12\x04\
    \x90\x01\x02\x1b\n\r\n\x05\x04\0\x020\x05\x12\x04\x90\x01\x02\x07\n\r\n\
    \x05\x04\0\x020\x01\x12\x04\x90\x01\x08\x15\n\r\n\x05\x04\0\x020\x03\x12\
    \x04\x90\x01\x18\x1a\n\x0c\n\x04\x04\0\x021\x12\x04\x91\x01\x02\"\n\r\n\
    \x05\x04\0\x021\x06\x12\x04\x91\x01\x02\x08\n\r\n\x05\x04\0\x021\x01\x12\
    \x04\x91\x01\t\x1c\n\r\n\x05\x04\0\x021\x03\x12\x04\x91\x01\x1f!\n\x0c\n\
    \x04\x04\0\x022\x12\x04\x92\x01\x02\x1c\n\r\n\x05\x04\0\x022\x05\x12\x04\
    \x92\x01\x02\x07\n\r\n\x05\x04\0\x022\x01\x12\x04\x92\x01\x08\x16\n\r\n\
    \x05\x04\0\x022\x03\x12\x04\x92\x01\x19\x1b\n,\n\x03\x04\0\t\x12\x04\x94\
    \x01\x02\x0e\"\x1f\x20YGUnit\x20border_left_unit\x20=\x2071;\n\n\x0c\n\
    \x04\x04\0\t\x01\x12\x04\x94\x01\x0b\r\n\r\n\x05\x04\0\t\x01\x01\x12\x04\
    \x94\x01\x0b\r\n\r\n\x05\x04\0\t\x01\x02\x12\x04\x94\x01\x0b\r\n\x0c\n\
    \x04\x04\0\x023\x12\x04\x95\x01\x02\x19\n\r\n\x05\x04\0\x023\x05\x12\x04\
    \x95\x01\x02\x07\n\r\n\x05\x04\0\x023\x01\x12\x04\x95\x01\x08\x13\n\r\n\
    \x05\x04\0\x023\x03\x12\x04\x95\x01\x16\x18\n+\n\x03\x04\0\t\x12\x04\x96\
    \x01\x02\x0e\"\x1e\x20YGUnit\x20border_top_unit\x20=\x2073;\n\n\x0c\n\
    \x04\x04\0\t\x02\x12\x04\x96\x01\x0b\r\n\r\n\x05\x04\0\t\x02\x01\x12\x04\
    \x96\x01\x0b\r\n\r\n\x05\x04\0\t\x02\x02\x12\x04\x96\x01\x0b\r\n\x0c\n\
    \x04\x04\0\x024\x12\x04\x97\x01\x02\x18\n\r\n\x05\x04\0\x024\x05\x12\x04\
    \x97\x01\x02\x07\n\r\n\x05\x04\0\x024\x01\x12\x04\x97\x01\x08\x12\n\r\n\
    \x05\x04\0\x024\x03\x12\x04\x97\x01\x15\x17\n-\n\x03\x04\0\t\x12\x04\x98\
    \x01\x02\x0e\"\x20\x20YGUnit\x20border_right_unit\x20=\x2075;\n\n\x0c\n\
    \x04\x04\0\t\x03\x12\x04\x98\x01\x0b\r\n\r\n\x05\x04\0\t\x03\x01\x12\x04\
    \x98\x01\x0b\r\n\r\n\x05\x04\0\t\x03\x02\x12\x04\x98\x01\x0b\r\n\x0c\n\
    \x04\x04\0\x025\x12\x04\x99\x01\x02\x1a\n\r\n\x05\x04\0\x025\x05\x12\x04\
    \x99\x01\x02\x07\n\r\n\x05\x04\0\x025\x01\x12\x04\x99\x01\x08\x14\n\r\n\
    \x05\x04\0\x025\x03\x12\x04\x99\x01\x17\x19\n.\n\x03\x04\0\t\x12\x04\x9a\
    \x01\x02\x0e\"!\x20YGUnit\x20border_bottom_unit\x20=\x2077;\n\n\x0c\n\
    \x04\x04\0\t\x04\x12\x04\x9a\x01\x0b\r\n\r\n\x05\x04\0\t\x04\x01\x12\x04\
    \x9a\x01\x0b\r\n\r\n\x05\x04\0\t\x04\x02\x12\x04\x9a\x01\x0b\r\n\x0c\n\
    \x04\x04\0\x026\x12\x04\x9b\x01\x02\x1b\n\r\n\x05\x04\0\x026\x05\x12\x04\
    \x9b\x01\x02\x07\n\r\n\x05\x04\0\x026\x01\x12\x04\x9b\x01\x08\x15\n\r\n\
    \x05\x04\0\x026\x03\x12\x04\x9b\x01\x18\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::id::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBUiTransform::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(10);
            enums.push(YGPositionType::generated_enum_descriptor_data());
            enums.push(YGAlign::generated_enum_descriptor_data());
            enums.push(YGUnit::generated_enum_descriptor_data());
            enums.push(YGDirection::generated_enum_descriptor_data());
            enums.push(YGFlexDirection::generated_enum_descriptor_data());
            enums.push(YGWrap::generated_enum_descriptor_data());
            enums.push(YGJustify::generated_enum_descriptor_data());
            enums.push(YGOverflow::generated_enum_descriptor_data());
            enums.push(YGDisplay::generated_enum_descriptor_data());
            enums.push(YGEdge::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
