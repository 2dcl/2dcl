// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/common/ActionButton.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ActionButton)
pub enum ActionButton {
    // @@protoc_insertion_point(enum_value:ActionButton.POINTER)
    POINTER = 0,
    // @@protoc_insertion_point(enum_value:ActionButton.PRIMARY)
    PRIMARY = 1,
    // @@protoc_insertion_point(enum_value:ActionButton.SECONDARY)
    SECONDARY = 2,
    // @@protoc_insertion_point(enum_value:ActionButton.ANY)
    ANY = 3,
    // @@protoc_insertion_point(enum_value:ActionButton.FORWARD)
    FORWARD = 4,
    // @@protoc_insertion_point(enum_value:ActionButton.BACKWARD)
    BACKWARD = 5,
    // @@protoc_insertion_point(enum_value:ActionButton.RIGHT)
    RIGHT = 6,
    // @@protoc_insertion_point(enum_value:ActionButton.LEFT)
    LEFT = 7,
    // @@protoc_insertion_point(enum_value:ActionButton.JUMP)
    JUMP = 8,
    // @@protoc_insertion_point(enum_value:ActionButton.WALK)
    WALK = 9,
    // @@protoc_insertion_point(enum_value:ActionButton.ACTION_3)
    ACTION_3 = 10,
    // @@protoc_insertion_point(enum_value:ActionButton.ACTION_4)
    ACTION_4 = 11,
    // @@protoc_insertion_point(enum_value:ActionButton.ACTION_5)
    ACTION_5 = 12,
    // @@protoc_insertion_point(enum_value:ActionButton.ACTION_6)
    ACTION_6 = 13,
}

impl ::protobuf::Enum for ActionButton {
    const NAME: &'static str = "ActionButton";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ActionButton> {
        match value {
            0 => ::std::option::Option::Some(ActionButton::POINTER),
            1 => ::std::option::Option::Some(ActionButton::PRIMARY),
            2 => ::std::option::Option::Some(ActionButton::SECONDARY),
            3 => ::std::option::Option::Some(ActionButton::ANY),
            4 => ::std::option::Option::Some(ActionButton::FORWARD),
            5 => ::std::option::Option::Some(ActionButton::BACKWARD),
            6 => ::std::option::Option::Some(ActionButton::RIGHT),
            7 => ::std::option::Option::Some(ActionButton::LEFT),
            8 => ::std::option::Option::Some(ActionButton::JUMP),
            9 => ::std::option::Option::Some(ActionButton::WALK),
            10 => ::std::option::Option::Some(ActionButton::ACTION_3),
            11 => ::std::option::Option::Some(ActionButton::ACTION_4),
            12 => ::std::option::Option::Some(ActionButton::ACTION_5),
            13 => ::std::option::Option::Some(ActionButton::ACTION_6),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ActionButton] = &[
        ActionButton::POINTER,
        ActionButton::PRIMARY,
        ActionButton::SECONDARY,
        ActionButton::ANY,
        ActionButton::FORWARD,
        ActionButton::BACKWARD,
        ActionButton::RIGHT,
        ActionButton::LEFT,
        ActionButton::JUMP,
        ActionButton::WALK,
        ActionButton::ACTION_3,
        ActionButton::ACTION_4,
        ActionButton::ACTION_5,
        ActionButton::ACTION_6,
    ];
}

impl ::protobuf::EnumFull for ActionButton {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ActionButton").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ActionButton {
    fn default() -> Self {
        ActionButton::POINTER
    }
}

impl ActionButton {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ActionButton>("ActionButton")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(ecs/components/common/ActionButton.proto*\xbc\x01\n\x0cActionButton\
    \x12\x0b\n\x07POINTER\x10\0\x12\x0b\n\x07PRIMARY\x10\x01\x12\r\n\tSECOND\
    ARY\x10\x02\x12\x07\n\x03ANY\x10\x03\x12\x0b\n\x07FORWARD\x10\x04\x12\
    \x0c\n\x08BACKWARD\x10\x05\x12\t\n\x05RIGHT\x10\x06\x12\x08\n\x04LEFT\
    \x10\x07\x12\x08\n\x04JUMP\x10\x08\x12\x08\n\x04WALK\x10\t\x12\x0c\n\x08\
    ACTION_3\x10\n\x12\x0c\n\x08ACTION_4\x10\x0b\x12\x0c\n\x08ACTION_5\x10\
    \x0c\x12\x0c\n\x08ACTION_6\x10\rJ\xe8\x04\n\x06\x12\x04\0\0\x11\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\x02\0\x11\x01\n\n\
    \n\x03\x05\0\x01\x12\x03\x02\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x03\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x03\x02\t\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03\x03\x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x04\x02\
    \x0e\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x04\x02\t\n\x0c\n\x05\x05\0\
    \x02\x01\x02\x12\x03\x04\x0c\r\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x05\x02\
    \x10\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x05\x02\x0b\n\x0c\n\x05\x05\0\
    \x02\x02\x02\x12\x03\x05\x0e\x0f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x06\
    \x02\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x06\x02\x05\n\x0c\n\x05\x05\
    \0\x02\x03\x02\x12\x03\x06\x08\t\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x07\
    \x02\x0e\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x07\x02\t\n\x0c\n\x05\x05\
    \0\x02\x04\x02\x12\x03\x07\x0c\r\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x08\
    \x02\x0f\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x08\x02\n\n\x0c\n\x05\x05\
    \0\x02\x05\x02\x12\x03\x08\r\x0e\n\x0b\n\x04\x05\0\x02\x06\x12\x03\t\x02\
    \x0c\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\t\x02\x07\n\x0c\n\x05\x05\0\
    \x02\x06\x02\x12\x03\t\n\x0b\n\x0b\n\x04\x05\0\x02\x07\x12\x03\n\x02\x0b\
    \n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\n\x02\x06\n\x0c\n\x05\x05\0\x02\
    \x07\x02\x12\x03\n\t\n\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x0b\x02\x0b\n\
    \x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x0b\x02\x06\n\x0c\n\x05\x05\0\x02\
    \x08\x02\x12\x03\x0b\t\n\n\x0b\n\x04\x05\0\x02\t\x12\x03\x0c\x02\x0b\n\
    \x0c\n\x05\x05\0\x02\t\x01\x12\x03\x0c\x02\x06\n\x0c\n\x05\x05\0\x02\t\
    \x02\x12\x03\x0c\t\n\n\x0b\n\x04\x05\0\x02\n\x12\x03\r\x02\x10\n\x0c\n\
    \x05\x05\0\x02\n\x01\x12\x03\r\x02\n\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\
    \r\r\x0f\n\x0b\n\x04\x05\0\x02\x0b\x12\x03\x0e\x02\x10\n\x0c\n\x05\x05\0\
    \x02\x0b\x01\x12\x03\x0e\x02\n\n\x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\x0e\
    \r\x0f\n\x0b\n\x04\x05\0\x02\x0c\x12\x03\x0f\x02\x10\n\x0c\n\x05\x05\0\
    \x02\x0c\x01\x12\x03\x0f\x02\n\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03\x0f\
    \r\x0f\n\x0b\n\x04\x05\0\x02\r\x12\x03\x10\x02\x10\n\x0c\n\x05\x05\0\x02\
    \r\x01\x12\x03\x10\x02\n\n\x0c\n\x05\x05\0\x02\r\x02\x12\x03\x10\r\x0fb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(0);
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(ActionButton::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
