// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ecs/components/TextShape.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:PBTextShape)
pub struct PBTextShape {
    // message fields
    // @@protoc_insertion_point(field:PBTextShape.text)
    pub text: ::std::string::String,
    // @@protoc_insertion_point(field:PBTextShape.visible)
    pub visible: bool,
    // @@protoc_insertion_point(field:PBTextShape.font)
    pub font: ::std::string::String,
    // @@protoc_insertion_point(field:PBTextShape.opacity)
    pub opacity: f32,
    // @@protoc_insertion_point(field:PBTextShape.font_Size)
    pub font_Size: f32,
    // @@protoc_insertion_point(field:PBTextShape.font_autoSize)
    pub font_autoSize: bool,
    // @@protoc_insertion_point(field:PBTextShape.h_text_align)
    pub h_text_align: ::std::string::String,
    // @@protoc_insertion_point(field:PBTextShape.v_text_align)
    pub v_text_align: ::std::string::String,
    // @@protoc_insertion_point(field:PBTextShape.width)
    pub width: f32,
    // @@protoc_insertion_point(field:PBTextShape.height)
    pub height: f32,
    // @@protoc_insertion_point(field:PBTextShape.padding_top)
    pub padding_top: f32,
    // @@protoc_insertion_point(field:PBTextShape.padding_right)
    pub padding_right: f32,
    // @@protoc_insertion_point(field:PBTextShape.padding_bottom)
    pub padding_bottom: f32,
    // @@protoc_insertion_point(field:PBTextShape.padding_left)
    pub padding_left: f32,
    // @@protoc_insertion_point(field:PBTextShape.line_spacing)
    pub line_spacing: f32,
    // @@protoc_insertion_point(field:PBTextShape.line_count)
    pub line_count: i32,
    // @@protoc_insertion_point(field:PBTextShape.text_wrapping)
    pub text_wrapping: bool,
    // @@protoc_insertion_point(field:PBTextShape.shadow_blur)
    pub shadow_blur: f32,
    // @@protoc_insertion_point(field:PBTextShape.shadow_offsetX)
    pub shadow_offsetX: f32,
    // @@protoc_insertion_point(field:PBTextShape.shadow_offsetY)
    pub shadow_offsetY: f32,
    // @@protoc_insertion_point(field:PBTextShape.outline_width)
    pub outline_width: f32,
    // @@protoc_insertion_point(field:PBTextShape.shadow_color)
    pub shadow_color: ::protobuf::MessageField<super::Color3::Color3>,
    // @@protoc_insertion_point(field:PBTextShape.outline_color)
    pub outline_color: ::protobuf::MessageField<super::Color3::Color3>,
    // @@protoc_insertion_point(field:PBTextShape.text_color)
    pub text_color: ::protobuf::MessageField<super::Color3::Color3>,
    // special fields
    // @@protoc_insertion_point(special_field:PBTextShape.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PBTextShape {
    fn default() -> &'a PBTextShape {
        <PBTextShape as ::protobuf::Message>::default_instance()
    }
}

impl PBTextShape {
    pub fn new() -> PBTextShape {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(24);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text",
            |m: &PBTextShape| { &m.text },
            |m: &mut PBTextShape| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "visible",
            |m: &PBTextShape| { &m.visible },
            |m: &mut PBTextShape| { &mut m.visible },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "font",
            |m: &PBTextShape| { &m.font },
            |m: &mut PBTextShape| { &mut m.font },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "opacity",
            |m: &PBTextShape| { &m.opacity },
            |m: &mut PBTextShape| { &mut m.opacity },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "font_Size",
            |m: &PBTextShape| { &m.font_Size },
            |m: &mut PBTextShape| { &mut m.font_Size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "font_autoSize",
            |m: &PBTextShape| { &m.font_autoSize },
            |m: &mut PBTextShape| { &mut m.font_autoSize },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "h_text_align",
            |m: &PBTextShape| { &m.h_text_align },
            |m: &mut PBTextShape| { &mut m.h_text_align },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "v_text_align",
            |m: &PBTextShape| { &m.v_text_align },
            |m: &mut PBTextShape| { &mut m.v_text_align },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &PBTextShape| { &m.width },
            |m: &mut PBTextShape| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &PBTextShape| { &m.height },
            |m: &mut PBTextShape| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_top",
            |m: &PBTextShape| { &m.padding_top },
            |m: &mut PBTextShape| { &mut m.padding_top },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_right",
            |m: &PBTextShape| { &m.padding_right },
            |m: &mut PBTextShape| { &mut m.padding_right },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_bottom",
            |m: &PBTextShape| { &m.padding_bottom },
            |m: &mut PBTextShape| { &mut m.padding_bottom },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "padding_left",
            |m: &PBTextShape| { &m.padding_left },
            |m: &mut PBTextShape| { &mut m.padding_left },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line_spacing",
            |m: &PBTextShape| { &m.line_spacing },
            |m: &mut PBTextShape| { &mut m.line_spacing },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "line_count",
            |m: &PBTextShape| { &m.line_count },
            |m: &mut PBTextShape| { &mut m.line_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "text_wrapping",
            |m: &PBTextShape| { &m.text_wrapping },
            |m: &mut PBTextShape| { &mut m.text_wrapping },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shadow_blur",
            |m: &PBTextShape| { &m.shadow_blur },
            |m: &mut PBTextShape| { &mut m.shadow_blur },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shadow_offsetX",
            |m: &PBTextShape| { &m.shadow_offsetX },
            |m: &mut PBTextShape| { &mut m.shadow_offsetX },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "shadow_offsetY",
            |m: &PBTextShape| { &m.shadow_offsetY },
            |m: &mut PBTextShape| { &mut m.shadow_offsetY },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "outline_width",
            |m: &PBTextShape| { &m.outline_width },
            |m: &mut PBTextShape| { &mut m.outline_width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "shadow_color",
            |m: &PBTextShape| { &m.shadow_color },
            |m: &mut PBTextShape| { &mut m.shadow_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "outline_color",
            |m: &PBTextShape| { &m.outline_color },
            |m: &mut PBTextShape| { &mut m.outline_color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::Color3::Color3>(
            "text_color",
            |m: &PBTextShape| { &m.text_color },
            |m: &mut PBTextShape| { &mut m.text_color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PBTextShape>(
            "PBTextShape",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PBTextShape {
    const NAME: &'static str = "PBTextShape";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = is.read_string()?;
                },
                16 => {
                    self.visible = is.read_bool()?;
                },
                26 => {
                    self.font = is.read_string()?;
                },
                37 => {
                    self.opacity = is.read_float()?;
                },
                45 => {
                    self.font_Size = is.read_float()?;
                },
                48 => {
                    self.font_autoSize = is.read_bool()?;
                },
                58 => {
                    self.h_text_align = is.read_string()?;
                },
                66 => {
                    self.v_text_align = is.read_string()?;
                },
                77 => {
                    self.width = is.read_float()?;
                },
                85 => {
                    self.height = is.read_float()?;
                },
                93 => {
                    self.padding_top = is.read_float()?;
                },
                101 => {
                    self.padding_right = is.read_float()?;
                },
                109 => {
                    self.padding_bottom = is.read_float()?;
                },
                117 => {
                    self.padding_left = is.read_float()?;
                },
                125 => {
                    self.line_spacing = is.read_float()?;
                },
                128 => {
                    self.line_count = is.read_int32()?;
                },
                136 => {
                    self.text_wrapping = is.read_bool()?;
                },
                149 => {
                    self.shadow_blur = is.read_float()?;
                },
                157 => {
                    self.shadow_offsetX = is.read_float()?;
                },
                165 => {
                    self.shadow_offsetY = is.read_float()?;
                },
                173 => {
                    self.outline_width = is.read_float()?;
                },
                178 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.shadow_color)?;
                },
                186 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.outline_color)?;
                },
                194 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.text_color)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.text.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.text);
        }
        if self.visible != false {
            my_size += 1 + 1;
        }
        if !self.font.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.font);
        }
        if self.opacity != 0. {
            my_size += 1 + 4;
        }
        if self.font_Size != 0. {
            my_size += 1 + 4;
        }
        if self.font_autoSize != false {
            my_size += 1 + 1;
        }
        if !self.h_text_align.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.h_text_align);
        }
        if !self.v_text_align.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.v_text_align);
        }
        if self.width != 0. {
            my_size += 1 + 4;
        }
        if self.height != 0. {
            my_size += 1 + 4;
        }
        if self.padding_top != 0. {
            my_size += 1 + 4;
        }
        if self.padding_right != 0. {
            my_size += 1 + 4;
        }
        if self.padding_bottom != 0. {
            my_size += 1 + 4;
        }
        if self.padding_left != 0. {
            my_size += 1 + 4;
        }
        if self.line_spacing != 0. {
            my_size += 1 + 4;
        }
        if self.line_count != 0 {
            my_size += ::protobuf::rt::int32_size(16, self.line_count);
        }
        if self.text_wrapping != false {
            my_size += 2 + 1;
        }
        if self.shadow_blur != 0. {
            my_size += 2 + 4;
        }
        if self.shadow_offsetX != 0. {
            my_size += 2 + 4;
        }
        if self.shadow_offsetY != 0. {
            my_size += 2 + 4;
        }
        if self.outline_width != 0. {
            my_size += 2 + 4;
        }
        if let Some(v) = self.shadow_color.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.outline_color.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.text_color.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.text.is_empty() {
            os.write_string(1, &self.text)?;
        }
        if self.visible != false {
            os.write_bool(2, self.visible)?;
        }
        if !self.font.is_empty() {
            os.write_string(3, &self.font)?;
        }
        if self.opacity != 0. {
            os.write_float(4, self.opacity)?;
        }
        if self.font_Size != 0. {
            os.write_float(5, self.font_Size)?;
        }
        if self.font_autoSize != false {
            os.write_bool(6, self.font_autoSize)?;
        }
        if !self.h_text_align.is_empty() {
            os.write_string(7, &self.h_text_align)?;
        }
        if !self.v_text_align.is_empty() {
            os.write_string(8, &self.v_text_align)?;
        }
        if self.width != 0. {
            os.write_float(9, self.width)?;
        }
        if self.height != 0. {
            os.write_float(10, self.height)?;
        }
        if self.padding_top != 0. {
            os.write_float(11, self.padding_top)?;
        }
        if self.padding_right != 0. {
            os.write_float(12, self.padding_right)?;
        }
        if self.padding_bottom != 0. {
            os.write_float(13, self.padding_bottom)?;
        }
        if self.padding_left != 0. {
            os.write_float(14, self.padding_left)?;
        }
        if self.line_spacing != 0. {
            os.write_float(15, self.line_spacing)?;
        }
        if self.line_count != 0 {
            os.write_int32(16, self.line_count)?;
        }
        if self.text_wrapping != false {
            os.write_bool(17, self.text_wrapping)?;
        }
        if self.shadow_blur != 0. {
            os.write_float(18, self.shadow_blur)?;
        }
        if self.shadow_offsetX != 0. {
            os.write_float(19, self.shadow_offsetX)?;
        }
        if self.shadow_offsetY != 0. {
            os.write_float(20, self.shadow_offsetY)?;
        }
        if self.outline_width != 0. {
            os.write_float(21, self.outline_width)?;
        }
        if let Some(v) = self.shadow_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(22, v, os)?;
        }
        if let Some(v) = self.outline_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(23, v, os)?;
        }
        if let Some(v) = self.text_color.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(24, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PBTextShape {
        PBTextShape::new()
    }

    fn clear(&mut self) {
        self.text.clear();
        self.visible = false;
        self.font.clear();
        self.opacity = 0.;
        self.font_Size = 0.;
        self.font_autoSize = false;
        self.h_text_align.clear();
        self.v_text_align.clear();
        self.width = 0.;
        self.height = 0.;
        self.padding_top = 0.;
        self.padding_right = 0.;
        self.padding_bottom = 0.;
        self.padding_left = 0.;
        self.line_spacing = 0.;
        self.line_count = 0;
        self.text_wrapping = false;
        self.shadow_blur = 0.;
        self.shadow_offsetX = 0.;
        self.shadow_offsetY = 0.;
        self.outline_width = 0.;
        self.shadow_color.clear();
        self.outline_color.clear();
        self.text_color.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PBTextShape {
        static instance: PBTextShape = PBTextShape {
            text: ::std::string::String::new(),
            visible: false,
            font: ::std::string::String::new(),
            opacity: 0.,
            font_Size: 0.,
            font_autoSize: false,
            h_text_align: ::std::string::String::new(),
            v_text_align: ::std::string::String::new(),
            width: 0.,
            height: 0.,
            padding_top: 0.,
            padding_right: 0.,
            padding_bottom: 0.,
            padding_left: 0.,
            line_spacing: 0.,
            line_count: 0,
            text_wrapping: false,
            shadow_blur: 0.,
            shadow_offsetX: 0.,
            shadow_offsetY: 0.,
            outline_width: 0.,
            shadow_color: ::protobuf::MessageField::none(),
            outline_color: ::protobuf::MessageField::none(),
            text_color: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PBTextShape {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PBTextShape").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PBTextShape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PBTextShape {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eecs/components/TextShape.proto\x1a\x0fcommon/id.proto\x1a\x13commo\
    n/Color3.proto\"\xaa\x06\n\x0bPBTextShape\x12\x12\n\x04text\x18\x01\x20\
    \x01(\tR\x04text\x12\x18\n\x07visible\x18\x02\x20\x01(\x08R\x07visible\
    \x12\x12\n\x04font\x18\x03\x20\x01(\tR\x04font\x12\x18\n\x07opacity\x18\
    \x04\x20\x01(\x02R\x07opacity\x12\x1b\n\tfont_Size\x18\x05\x20\x01(\x02R\
    \x08fontSize\x12#\n\rfont_autoSize\x18\x06\x20\x01(\x08R\x0cfontAutoSize\
    \x12\x20\n\x0ch_text_align\x18\x07\x20\x01(\tR\nhTextAlign\x12\x20\n\x0c\
    v_text_align\x18\x08\x20\x01(\tR\nvTextAlign\x12\x14\n\x05width\x18\t\
    \x20\x01(\x02R\x05width\x12\x16\n\x06height\x18\n\x20\x01(\x02R\x06heigh\
    t\x12\x1f\n\x0bpadding_top\x18\x0b\x20\x01(\x02R\npaddingTop\x12#\n\rpad\
    ding_right\x18\x0c\x20\x01(\x02R\x0cpaddingRight\x12%\n\x0epadding_botto\
    m\x18\r\x20\x01(\x02R\rpaddingBottom\x12!\n\x0cpadding_left\x18\x0e\x20\
    \x01(\x02R\x0bpaddingLeft\x12!\n\x0cline_spacing\x18\x0f\x20\x01(\x02R\
    \x0blineSpacing\x12\x1d\n\nline_count\x18\x10\x20\x01(\x05R\tlineCount\
    \x12#\n\rtext_wrapping\x18\x11\x20\x01(\x08R\x0ctextWrapping\x12\x1f\n\
    \x0bshadow_blur\x18\x12\x20\x01(\x02R\nshadowBlur\x12%\n\x0eshadow_offse\
    tX\x18\x13\x20\x01(\x02R\rshadowOffsetX\x12%\n\x0eshadow_offsetY\x18\x14\
    \x20\x01(\x02R\rshadowOffsetY\x12#\n\routline_width\x18\x15\x20\x01(\x02\
    R\x0coutlineWidth\x12*\n\x0cshadow_color\x18\x16\x20\x01(\x0b2\x07.Color\
    3R\x0bshadowColor\x12,\n\routline_color\x18\x17\x20\x01(\x0b2\x07.Color3\
    R\x0coutlineColor\x12&\n\ntext_color\x18\x18\x20\x01(\x0b2\x07.Color3R\t\
    textColorB\x05\x80\xb5\x18\x86\x08J\xff\n\n\x06\x12\x04\0\0\x20\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\0\x19\n\x08\n\
    \x01\x08\x12\x03\x03\0!\n\x0b\n\x04\x08\xd0\x86\x03\x12\x03\x03\0!\n\t\n\
    \x02\x03\x01\x12\x03\x05\0\x1d\n\n\n\x02\x04\0\x12\x04\x07\0\x20\x01\n\n\
    \n\x03\x04\0\x01\x12\x03\x07\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\
    \x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03\x08\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x10\
    \x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\t\x02\x13\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\t\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\x07\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\t\x11\x12\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\n\x02\x12\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\n\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\t\r\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\n\x10\x11\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x0b\x02\x14\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x0b\x08\x0f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0b\
    \x12\x13\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0c\x02\x16\n\x0c\n\x05\x04\0\
    \x02\x04\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x0c\x08\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0c\x14\x15\n\x0b\n\
    \x04\x04\0\x02\x05\x12\x03\r\x02\x19\n\x0c\n\x05\x04\0\x02\x05\x05\x12\
    \x03\r\x02\x06\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\r\x07\x14\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03\r\x17\x18\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03\x0e\x02\x1a\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0e\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x06\x01\x12\x03\x0e\t\x15\n\x0c\n\x05\x04\0\x02\x06\x03\
    \x12\x03\x0e\x18\x19\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0f\x02\x1a\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x0f\t\x15\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0f\x18\x19\
    \n\x0b\n\x04\x04\0\x02\x08\x12\x03\x10\x02\x12\n\x0c\n\x05\x04\0\x02\x08\
    \x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x10\x08\r\
    \n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x10\x10\x11\n\x0b\n\x04\x04\0\x02\
    \t\x12\x03\x11\x02\x14\n\x0c\n\x05\x04\0\x02\t\x05\x12\x03\x11\x02\x07\n\
    \x0c\n\x05\x04\0\x02\t\x01\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\0\x02\t\
    \x03\x12\x03\x11\x11\x13\n\x0b\n\x04\x04\0\x02\n\x12\x03\x12\x02\x19\n\
    \x0c\n\x05\x04\0\x02\n\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\n\
    \x01\x12\x03\x12\x08\x13\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x12\x16\x18\
    \n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x13\x02\x1b\n\x0c\n\x05\x04\0\x02\x0b\
    \x05\x12\x03\x13\x02\x07\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\x03\x13\x08\
    \x15\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x13\x18\x1a\n\x0b\n\x04\x04\0\
    \x02\x0c\x12\x03\x14\x02\x1c\n\x0c\n\x05\x04\0\x02\x0c\x05\x12\x03\x14\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03\x14\x08\x16\n\x0c\n\x05\
    \x04\0\x02\x0c\x03\x12\x03\x14\x19\x1b\n\x0b\n\x04\x04\0\x02\r\x12\x03\
    \x15\x02\x1a\n\x0c\n\x05\x04\0\x02\r\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\
    \x04\0\x02\r\x01\x12\x03\x15\x08\x14\n\x0c\n\x05\x04\0\x02\r\x03\x12\x03\
    \x15\x17\x19\n\x0b\n\x04\x04\0\x02\x0e\x12\x03\x16\x02\x1a\n\x0c\n\x05\
    \x04\0\x02\x0e\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\0\x02\x0e\x01\x12\
    \x03\x16\x08\x14\n\x0c\n\x05\x04\0\x02\x0e\x03\x12\x03\x16\x17\x19\n\x0b\
    \n\x04\x04\0\x02\x0f\x12\x03\x17\x02\x18\n\x0c\n\x05\x04\0\x02\x0f\x05\
    \x12\x03\x17\x02\x07\n\x0c\n\x05\x04\0\x02\x0f\x01\x12\x03\x17\x08\x12\n\
    \x0c\n\x05\x04\0\x02\x0f\x03\x12\x03\x17\x15\x17\n\x0b\n\x04\x04\0\x02\
    \x10\x12\x03\x18\x02\x1a\n\x0c\n\x05\x04\0\x02\x10\x05\x12\x03\x18\x02\
    \x06\n\x0c\n\x05\x04\0\x02\x10\x01\x12\x03\x18\x07\x14\n\x0c\n\x05\x04\0\
    \x02\x10\x03\x12\x03\x18\x17\x19\n\x0b\n\x04\x04\0\x02\x11\x12\x03\x19\
    \x02\x19\n\x0c\n\x05\x04\0\x02\x11\x05\x12\x03\x19\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x11\x01\x12\x03\x19\x08\x13\n\x0c\n\x05\x04\0\x02\x11\x03\x12\
    \x03\x19\x16\x18\n\x0b\n\x04\x04\0\x02\x12\x12\x03\x1a\x02\x1c\n\x0c\n\
    \x05\x04\0\x02\x12\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x12\x01\
    \x12\x03\x1a\x08\x16\n\x0c\n\x05\x04\0\x02\x12\x03\x12\x03\x1a\x19\x1b\n\
    \x0b\n\x04\x04\0\x02\x13\x12\x03\x1b\x02\x1c\n\x0c\n\x05\x04\0\x02\x13\
    \x05\x12\x03\x1b\x02\x07\n\x0c\n\x05\x04\0\x02\x13\x01\x12\x03\x1b\x08\
    \x16\n\x0c\n\x05\x04\0\x02\x13\x03\x12\x03\x1b\x19\x1b\n\x0b\n\x04\x04\0\
    \x02\x14\x12\x03\x1c\x02\x1b\n\x0c\n\x05\x04\0\x02\x14\x05\x12\x03\x1c\
    \x02\x07\n\x0c\n\x05\x04\0\x02\x14\x01\x12\x03\x1c\x08\x15\n\x0c\n\x05\
    \x04\0\x02\x14\x03\x12\x03\x1c\x18\x1a\n\x0b\n\x04\x04\0\x02\x15\x12\x03\
    \x1d\x02\x1b\n\x0c\n\x05\x04\0\x02\x15\x06\x12\x03\x1d\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x15\x01\x12\x03\x1d\t\x15\n\x0c\n\x05\x04\0\x02\x15\x03\
    \x12\x03\x1d\x18\x1a\n\x0b\n\x04\x04\0\x02\x16\x12\x03\x1e\x02\x1c\n\x0c\
    \n\x05\x04\0\x02\x16\x06\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\0\x02\x16\
    \x01\x12\x03\x1e\t\x16\n\x0c\n\x05\x04\0\x02\x16\x03\x12\x03\x1e\x19\x1b\
    \n\x0b\n\x04\x04\0\x02\x17\x12\x03\x1f\x02\x19\n\x0c\n\x05\x04\0\x02\x17\
    \x06\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\0\x02\x17\x01\x12\x03\x1f\t\x13\
    \n\x0c\n\x05\x04\0\x02\x17\x03\x12\x03\x1f\x16\x18b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::id::file_descriptor().clone());
            deps.push(super::Color3::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(PBTextShape::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
