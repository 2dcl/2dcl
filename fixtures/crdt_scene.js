/*! "node_modules/@dcl/amd/dist/amd.js" 54adfc25d5d794c206ea8d4053e909a60032b05d7ca6356f6d71788b97968d76 */ eval("\"use strict\";\n// A naive attempt at getting the global `this`. Donâ€™t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    let anonymousQueue = [];\n    let cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (let x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports = typeof factory === 'function' ? factory.apply(globalObject, deps) || exports : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror == 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        let handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule == toModule || depth == 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            let path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        let from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        let inQueue = {};\n        for (let i in registeredModules) {\n            inQueue[i] = false;\n        }\n        let queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            let element = queue.shift();\n            let dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    let dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    let dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        let dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies + ' has not been defined. Please include it as a dependency in ' + parentModule + \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    let _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            let exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (let i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (let i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ == 'require' || $ == 'exports' || $ == 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles.map(($) => '\\n  - ' + $.join(' -> ')).join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules.map(($) => '\\n  - ' + $.name).join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern = /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=dcl://node_modules/@dcl/amd/dist/amd.js")
/*! "node_modules/decentraland-ecs/dist/src/index.js" ca2a61936fb98916ca7cfc71d9ec329ac9c778f2e47ae5d47c5f74f278f942a3 */ eval("(function (exports) {\n  'use strict';\n\n  /**\r\n   * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities\r\n   * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\r\n   * @public\r\n   */\r\n  var Attachable = /** @class */ (function () {\r\n      function Attachable() {\r\n      }\r\n      /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */\r\n      Attachable.AVATAR = { getEntityRepresentation: function (engine) { return engine.avatarEntity; } };\r\n      /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */\r\n      Attachable.FIRST_PERSON_CAMERA = { getEntityRepresentation: function (engine) { return engine.firstPersonCameraEntity; } };\r\n      return Attachable;\r\n  }());\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n  /* global Reflect, Promise */\r\n\r\n  var extendStatics = function(d, b) {\r\n      extendStatics = Object.setPrototypeOf ||\r\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n      return extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n      if (typeof b !== \"function\" && b !== null)\r\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n      extendStatics(d, b);\r\n      function __() { this.constructor = d; }\r\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\r\n\r\n  function __decorate(decorators, target, key, desc) {\r\n      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n      return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n  }\r\n\r\n  function __awaiter(thisArg, _arguments, P, generator) {\r\n      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n      return new (P || (P = Promise))(function (resolve, reject) {\r\n          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n          function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n      });\r\n  }\r\n\r\n  function __generator(thisArg, body) {\r\n      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n      function verb(n) { return function (v) { return step([n, v]); }; }\r\n      function step(op) {\r\n          if (f) throw new TypeError(\"Generator is already executing.\");\r\n          while (_) try {\r\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n              if (y = 0, t) op = [op[0] & 2, t.value];\r\n              switch (op[0]) {\r\n                  case 0: case 1: t = op; break;\r\n                  case 4: _.label++; return { value: op[1], done: false };\r\n                  case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                  case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                  default:\r\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                      if (t[2]) _.ops.pop();\r\n                      _.trys.pop(); continue;\r\n              }\r\n              op = body.call(thisArg, _);\r\n          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n      }\r\n  }\r\n\r\n  function __values(o) {\r\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n      if (m) return m.call(o);\r\n      if (o && typeof o.length === \"number\") return {\r\n          next: function () {\r\n              if (o && i >= o.length) o = void 0;\r\n              return { value: o && o[i++], done: !o };\r\n          }\r\n      };\r\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n  }\r\n\r\n  function __read(o, n) {\r\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n      if (!m) return o;\r\n      var i = m.call(o), r, ar = [], e;\r\n      try {\r\n          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n      }\r\n      catch (error) { e = { error: error }; }\r\n      finally {\r\n          try {\r\n              if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n          }\r\n          finally { if (e) throw e.error; }\r\n      }\r\n      return ar;\r\n  }\r\n\r\n  function __spreadArray(to, from) {\r\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n          to[j] = from[i];\r\n      return to;\r\n  }\n\n  var lastGeneratedId = 0;\r\n  /**\r\n   * Log function. Only works in debug mode, otherwise it does nothing.\r\n   * @param args - any loggable parameter\r\n   * @public\r\n   */\r\n  function log() {\r\n      var args = [];\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n          args[_i] = arguments[_i];\r\n      }\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.log.apply(dcl, __spreadArray([], __read(args)));\r\n      }\r\n      else {\r\n          // tslint:disable-next-line:no-console\r\n          console.log.apply(console, __spreadArray(['DEBUG:'], __read(args)));\r\n      }\r\n  }\r\n  /**\r\n   * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\r\n   * @param error - string or Error object.\r\n   * @param data - any debug information.\r\n   * @public\r\n   */\r\n  function error(error, data) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.error(error, data);\r\n      }\r\n      else {\r\n          // tslint:disable-next-line:no-console\r\n          console.error('ERROR:', error, data);\r\n      }\r\n  }\r\n  /**\r\n   * Generates a new prefixed id\r\n   * @public\r\n   */\r\n  function newId(type) {\r\n      lastGeneratedId++;\r\n      if (type.length === 0)\r\n          throw new Error('newId(type: string): type cannot be empty');\r\n      return type + lastGeneratedId.toString(36);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  function uuid() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n          var r = (Math.random() * 16) | 0;\r\n          var v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n          return v.toString(16);\r\n      });\r\n  }\r\n  /**\r\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\r\n   * @param size - the number of element to construct and put in the array\r\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\r\n   * @returns a new array filled with new objects\r\n   * @internal\r\n   */\r\n  function buildArray(size, itemBuilder) {\r\n      var a = [];\r\n      for (var i = 0; i < size; ++i) {\r\n          a.push(itemBuilder());\r\n      }\r\n      return a;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function openExternalURL(url) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.openExternalUrl(url);\r\n      }\r\n      else {\r\n          error('ERROR: openExternalURL dcl is undefined');\r\n      }\r\n  }\r\n  /**\r\n   * Popup NFT info dialog\r\n   * @param scr - 'ethereum://contractAddress/tokenID'\r\n   * @param comment - optional. add a comment.\r\n   * @public\r\n   */\r\n  function openNFTDialog(scr, comment) {\r\n      if (comment === void 0) { comment = null; }\r\n      if (typeof dcl !== 'undefined') {\r\n          var regex = /ethereum:\\/\\/(.+)\\/(.+)/;\r\n          var matches = scr.match(regex);\r\n          if (!matches || matches.length < 3) {\r\n              return;\r\n          }\r\n          dcl.openNFTDialog(matches[1], matches[2], comment);\r\n      }\r\n      else {\r\n          error('ERROR: openNFTDialog dcl is undefined');\r\n      }\r\n  }\n\n  var eventNameSymbol = '__event_name__';\r\n  var takenEventNames = [];\r\n  function getEventNameFromConstructor(ctor) {\r\n      if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\r\n          throw new Error('The EventConstructor is not registered');\r\n      }\r\n      return ctor[eventNameSymbol];\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var EventManager = /** @class */ (function () {\r\n      function EventManager() {\r\n          this.listeners = {};\r\n      }\r\n      EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              listeners = this.listeners[eventName] = [];\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  throw new Error('The provided listener is already registered');\r\n              }\r\n          }\r\n          listeners.push({\r\n              listener: listener,\r\n              fn: listenerFunction\r\n          });\r\n          return this;\r\n      };\r\n      EventManager.prototype.removeListener = function (listener, eventClass) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              return false;\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  listeners.splice(i, 1);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      EventManager.prototype.fireEvent = function (event) {\r\n          var eventName = getEventNameFromConstructor(event.constructor);\r\n          var listeners = this.listeners[eventName];\r\n          if (listeners) {\r\n              for (var i = 0; i < listeners.length; i++) {\r\n                  try {\r\n                      var l = listeners[i];\r\n                      l.fn.call(l.listener, event);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an instance of Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      return EventManager;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function EventConstructor() {\r\n      var eventName = newId('EV');\r\n      if (takenEventNames.indexOf(eventName) !== -1) {\r\n          throw new Error(\"The event name \" + eventName + \" is already taken\");\r\n      }\r\n      takenEventNames.push(eventName);\r\n      return function (target) {\r\n          target[eventNameSymbol] = eventName;\r\n          return target;\r\n      };\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentRemoved = /** @class */ (function () {\r\n      function ComponentRemoved(entity, componentName, component) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      ComponentRemoved = __decorate([\r\n          EventConstructor()\r\n      ], ComponentRemoved);\r\n      return ComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ComponentAdded = /** @class */ (function () {\r\n      function ComponentAdded(entity, componentName, classId) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      ComponentAdded = __decorate([\r\n          EventConstructor()\r\n      ], ComponentAdded);\r\n      return ComponentAdded;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ParentChanged = /** @class */ (function () {\r\n      function ParentChanged(entity, parent) {\r\n          this.entity = entity;\r\n          this.parent = parent;\r\n          // stub\r\n      }\r\n      ParentChanged = __decorate([\r\n          EventConstructor()\r\n      ], ParentChanged);\r\n      return ParentChanged;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.UIValueType = void 0;\r\n  (function (UIValueType) {\r\n      UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\r\n      UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\r\n  })(exports.UIValueType || (exports.UIValueType = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIValue = /** @class */ (function () {\r\n      function UIValue(value) {\r\n          this.type = exports.UIValueType.PIXELS;\r\n          if (typeof value === 'string') {\r\n              var valueAsString = value;\r\n              if (valueAsString.indexOf('px') > -1) {\r\n                  this.type = exports.UIValueType.PIXELS;\r\n              }\r\n              else if (valueAsString.indexOf('%') > -1) {\r\n                  this.type = exports.UIValueType.PERCENT;\r\n              }\r\n              this.value = parseFloat(valueAsString);\r\n          }\r\n          else {\r\n              this.value = value;\r\n          }\r\n      }\r\n      UIValue.prototype.toString = function () {\r\n          var result = this.value.toString();\r\n          if (this.type === exports.UIValueType.PERCENT) {\r\n              result += '%';\r\n          }\r\n          else {\r\n              result += 'px';\r\n          }\r\n          return result;\r\n      };\r\n      return UIValue;\r\n  }());\n\n  var componentSymbol = '__name__symbol_';\r\n  var componentClassIdSymbol = '__classId__symbol_';\r\n  var componentIdSymbol = '__component__id_';\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentCreated = /** @class */ (function () {\r\n      function DisposableComponentCreated(componentId, componentName, classId) {\r\n          this.componentId = componentId;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      DisposableComponentCreated = __decorate([\r\n          EventConstructor()\r\n      ], DisposableComponentCreated);\r\n      return DisposableComponentCreated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentRemoved = /** @class */ (function () {\r\n      function DisposableComponentRemoved(componentId) {\r\n          this.componentId = componentId;\r\n          // stub\r\n      }\r\n      DisposableComponentRemoved = __decorate([\r\n          EventConstructor()\r\n      ], DisposableComponentRemoved);\r\n      return DisposableComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentUpdated = /** @class */ (function () {\r\n      function DisposableComponentUpdated(componentId, component) {\r\n          this.componentId = componentId;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      DisposableComponentUpdated = __decorate([\r\n          EventConstructor()\r\n      ], DisposableComponentUpdated);\r\n      return DisposableComponentUpdated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function Component(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \" + target.originalClassName + \" with: \" + componentName);\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function DisposableComponent(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \" + target.originalClassName + \" with: \" + componentName);\r\n          }\r\n          if (typeof classId !== 'number' || isNaN(classId)) {\r\n              throw new Error(\"classId: \" + classId + \" is an invalid integer\");\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              if (!DisposableComponent.engine) {\r\n                  throw new Error('You need to set a DisposableComponent.engine before creating disposable components');\r\n              }\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              var id = newId('C');\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              Object.defineProperty(ret, componentIdSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: id\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              if (DisposableComponent.engine) {\r\n                  DisposableComponent.engine.registerComponent(ret);\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.isDisposableComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /** @internal */\r\n  (function (DisposableComponent) {\r\n      /** @internal */\r\n      // tslint:disable-next-line:whitespace\r\n      DisposableComponent.engine = null;\r\n  })(DisposableComponent || (DisposableComponent = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentName(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentSymbol]) {\r\n          return component[componentSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentClassId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentClassIdSymbol]) {\r\n          return component[componentClassIdSymbol];\r\n      }\r\n      if (!component[componentSymbol]) {\r\n          throw new TypeError(component + ' is not a registered component.');\r\n      }\r\n      return null;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentIdSymbol]) {\r\n          return component[componentIdSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered disposable component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var ObservableComponent = /** @class */ (function () {\r\n      function ObservableComponent() {\r\n          // @internal\r\n          this.dirty = false;\r\n          // @internal\r\n          this.data = {};\r\n          this.subscriptions = [];\r\n      }\r\n      ObservableComponent.component = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          this.data[propertyKey] = getComponentId(value);\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.field = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      this.data[propertyKey] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.uiValue = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey].toString();\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      var finalValue = new UIValue(value);\r\n                      this.data[propertyKey] = finalValue;\r\n                      if (finalValue !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, finalValue, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.readonly = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      if (propertyKey in this.data === false) {\r\n                          throw new Error(\"The field \" + propertyKey + \" is uninitialized\");\r\n                      }\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      if (propertyKey in this.data) {\r\n                          throw new Error(\"The field \" + propertyKey + \" is readonly\");\r\n                      }\r\n                      this.data[propertyKey] = value;\r\n                      this.dirty = true;\r\n                  },\r\n                  enumerable: true,\r\n                  configurable: false\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.prototype.onChange = function (fn) {\r\n          this.subscriptions.push(fn);\r\n          return this;\r\n      };\r\n      ObservableComponent.prototype.toJSON = function () {\r\n          return this.data;\r\n      };\r\n      return ObservableComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function isDisposableComponent(component) {\r\n      return componentIdSymbol in component;\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentGroup = /** @class */ (function () {\r\n      function ComponentGroup() {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          this.entities = [];\r\n          this.active = false;\r\n          this._requiresNames = [];\r\n          // validate requires list\r\n          if (!requires) {\r\n              throw new Error('ComponentGroup: Could not load the requires list');\r\n          }\r\n          if (!(requires instanceof Array)) {\r\n              throw new Error('ComponentGroup: requires list is not an Array');\r\n          }\r\n          Object.defineProperty(this, 'requires', {\r\n              get: function () {\r\n                  return requires.slice();\r\n              }\r\n          });\r\n          Object.defineProperty(this, 'requiresNames', {\r\n              get: function () {\r\n                  return this._requiresNames.slice();\r\n              }\r\n          });\r\n          var _loop_1 = function (ix) {\r\n              var component = requires[ix];\r\n              var name = null;\r\n              if (!component) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \" + ix + \" is invalid\");\r\n              }\r\n              try {\r\n                  name = getComponentName(component);\r\n              }\r\n              catch (e) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \" + ix + \" is not registered as a @Component. Remember to provide the class of the component, not the name\");\r\n              }\r\n              if (this_1._requiresNames.some(function ($) { return $ === name; })) {\r\n                  throw new Error(\"ComponentGroup: the required component list has a repeated name \" + name);\r\n              }\r\n              this_1._requiresNames.push(name);\r\n          };\r\n          var this_1 = this;\r\n          for (var ix = 0; ix < requires.length; ix++) {\r\n              _loop_1(ix);\r\n          }\r\n      }\r\n      ComponentGroup.prototype.hasEntity = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return false;\r\n          return this.entities.indexOf(entity) !== -1;\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.addEntity = function (entity) {\r\n          if (!entity.isAddedToEngine()) {\r\n              throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');\r\n          }\r\n          if (this.entities.indexOf(entity) === -1) {\r\n              this.entities.push(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.removeEntity = function (entity) {\r\n          var id = this.entities.indexOf(entity);\r\n          if (id !== -1) {\r\n              this.entities.splice(id, 1);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.componentRemoved = function (entity, component) {\r\n          if (this._requiresNames.indexOf(component) !== -1) {\r\n              this.removeEntity(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.meetsRequirements = function (entity) {\r\n          for (var i = 0; i < this._requiresNames.length; i++) {\r\n              var componentName = this._requiresNames[i];\r\n              if (!(componentName in entity.components)) {\r\n                  return false;\r\n              }\r\n          }\r\n          return true;\r\n      };\r\n      return ComponentGroup;\r\n  }());\n\n  // tslint:disable:no-use-before-declare\r\n  /**\r\n   * @public\r\n   */\r\n  var Entity = /** @class */ (function () {\r\n      function Entity(name) {\r\n          this.name = name;\r\n          this.children = {};\r\n          this.eventManager = null;\r\n          this.alive = false;\r\n          this.uuid = newId('E');\r\n          this.components = {};\r\n          // @internal\r\n          this.engine = null;\r\n          // @internal\r\n          this._parent = null;\r\n          // stub\r\n      }\r\n      /**\r\n       * Adds or replaces a component in the entity.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponentOrReplace = function (component) {\r\n          if (typeof component === 'function') {\r\n              throw new Error('You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          if (typeof component !== 'object') {\r\n              throw new Error(\"You passed a \" + typeof component + \", an instance of component is expected\");\r\n          }\r\n          var componentName = getComponentName(component);\r\n          if (this.components[componentName]) {\r\n              if (this.components[componentName] === component) {\r\n                  return component;\r\n              }\r\n              this.removeComponent(this.components[componentName], false);\r\n          }\r\n          return this.addComponent(component);\r\n      };\r\n      Entity.prototype.hasComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'object' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#has(component): component is not a class, name or instance');\r\n          }\r\n          if (component == null)\r\n              return false;\r\n          var componentName = typeOfComponent === 'string' ? component : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return false;\r\n          }\r\n          if (typeOfComponent === 'object') {\r\n              return storedComponent === component;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              return storedComponent instanceof component;\r\n          }\r\n          return true;\r\n      };\r\n      Entity.prototype.getComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#get(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string' ? component : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              throw new Error(\"Can not get component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  throw new Error(\"Can not get component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\" (by instance)\");\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      Entity.prototype.getComponentOrNull = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#getOrNull(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string' ? component : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return null;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  return null;\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      /**\r\n       * Gets a component, if it doesn't exist, it creates the component and returns it.\r\n       * @param component - component class\r\n       */\r\n      Entity.prototype.getComponentOrCreate = function (component) {\r\n          if (typeof component !== 'function') {\r\n              throw new Error('Entity#getOrCreate(component): component is not a class');\r\n          }\r\n          var ret = this.getComponentOrNull(component);\r\n          if (!ret) {\r\n              ret = new component();\r\n              // Safe-guard to only add registered components to entities\r\n              getComponentName(ret);\r\n              this.addComponentOrReplace(ret);\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Adds a component. If the component already exist, it throws an Error.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponent = function (component) {\r\n          if (typeof component !== 'object') {\r\n              throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          var componentName = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          if (this.components[componentName]) {\r\n              throw new Error(\"A component of type \\\"\" + componentName + \"\\\" is already present in entity \\\"\" + this.identifier + \"\\\"\");\r\n          }\r\n          this.components[componentName] = component;\r\n          if (this.eventManager) {\r\n              this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));\r\n          }\r\n          var storedComponent = component;\r\n          if (typeof storedComponent.addedToEntity === 'function') {\r\n              storedComponent.addedToEntity(this);\r\n          }\r\n          return component;\r\n      };\r\n      Entity.prototype.removeComponent = function (component, triggerRemovedEvent) {\r\n          if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function' && typeOfComponent !== 'object') {\r\n              throw new Error('Entity#remove(component): component is not a class, class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string' ? component : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              log(\"Entity Warning: Trying to remove inexisting component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n              return;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  delete this.components[componentName];\r\n                  if (storedComponent) {\r\n                      if (triggerRemovedEvent && this.eventManager) {\r\n                          this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n                      }\r\n                      if (typeof storedComponent.removedFromEntity === 'function') {\r\n                          storedComponent.removedFromEntity(this);\r\n                      }\r\n                  }\r\n                  return;\r\n              }\r\n              else {\r\n                  log(\"Entity Warning: Trying to remove wrong (by constructor) component \\\"\" + componentName + \"\\\" from entity \\\"\" + this.identifier + \"\\\"\");\r\n                  return;\r\n              }\r\n          }\r\n          delete this.components[componentName];\r\n          if (storedComponent) {\r\n              if (triggerRemovedEvent && this.eventManager) {\r\n                  this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n              }\r\n              if (typeof storedComponent.removedFromEntity === 'function') {\r\n                  storedComponent.removedFromEntity(this);\r\n              }\r\n          }\r\n          return;\r\n      };\r\n      /**\r\n       * Returns true if the entity is already added to the engine.\r\n       * Returns false if no engine was defined.\r\n       */\r\n      Entity.prototype.isAddedToEngine = function () {\r\n          if (this.engine && (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Sets the parent entity\r\n       */\r\n      Entity.prototype.setParent = function (_parent) {\r\n          var newParent;\r\n          // Check if parent is of type Attachable\r\n          if (_parent && 'getEntityRepresentation' in _parent) {\r\n              if (!this.engine) {\r\n                  throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");\r\n              }\r\n              newParent = _parent.getEntityRepresentation(this.engine);\r\n          }\r\n          else {\r\n              // @ts-ignore\r\n              newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\r\n          }\r\n          var currentParent = this.getParent();\r\n          if (newParent === this) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\" + this.identifier + \"\\\": An entity can't set itself as a its own parent\");\r\n          }\r\n          if (newParent === currentParent) {\r\n              return this;\r\n          }\r\n          var circularAncestor = this.getCircularAncestor(newParent);\r\n          if (circularAncestor) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\" + this.identifier + \"\\\": Circular parent references are not allowed (See entity \\\"\" + circularAncestor + \"\\\")\");\r\n          }\r\n          if (currentParent) {\r\n              delete currentParent.children[this.uuid];\r\n          }\r\n          // Make sure that the parent and child are both on the engine, or off the engine, together\r\n          if (newParent !== null && newParent.uuid !== '0') {\r\n              if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\r\n                  // tslint:disable-next-line:semicolon\r\n                  this.engine.removeEntity(this);\r\n              }\r\n              if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\r\n                  // tslint:disable-next-line:semicolon\r\n                  newParent.engine.addEntity(this);\r\n              }\r\n          }\r\n          this._parent = newParent || null;\r\n          this.registerAsChild();\r\n          if (this.eventManager && this.engine) {\r\n              this.eventManager.fireEvent(new ParentChanged(this, newParent));\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the parent entity\r\n       */\r\n      Entity.prototype.getParent = function () {\r\n          return this._parent;\r\n      };\r\n      Object.defineProperty(Entity.prototype, \"identifier\", {\r\n          get: function () {\r\n              return this.name || this.uuid;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Entity.prototype.getCircularAncestor = function (ent) {\r\n          var root = this.engine ? this.engine.rootEntity : null;\r\n          var e = ent;\r\n          while (e && e !== root) {\r\n              var parent = e.getParent();\r\n              if (parent === this) {\r\n                  return e.uuid;\r\n              }\r\n              e = parent;\r\n          }\r\n          return null;\r\n      };\r\n      Entity.prototype.registerAsChild = function () {\r\n          var parent = this.getParent();\r\n          if (this.uuid && parent) {\r\n              parent.children[this.uuid] = this;\r\n          }\r\n      };\r\n      return Entity;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Engine = /** @class */ (function () {\r\n      function Engine(rootEntity) {\r\n          this.eventManager = new EventManager();\r\n          // @internal\r\n          this.systems = [];\r\n          // @internal\r\n          this.entityLists = {};\r\n          // @internal\r\n          this.addedSystems = [];\r\n          this._entities = {};\r\n          this._disposableComponents = {};\r\n          this._componentGroups = {};\r\n          // systems that doesn't require any component or handle their own logic\r\n          this.simpleSystems = [];\r\n          this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);\r\n          this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);\r\n          this.rootEntity = rootEntity;\r\n          this.firstPersonCameraEntity = new Entity();\r\n          this.firstPersonCameraEntity.uuid = 'FirstPersonCameraEntityReference';\r\n          this.addEntity(this.firstPersonCameraEntity);\r\n          this.avatarEntity = new Entity();\r\n          this.avatarEntity.uuid = 'AvatarEntityReference';\r\n          this.addEntity(this.avatarEntity);\r\n      }\r\n      Object.defineProperty(Engine.prototype, \"entities\", {\r\n          get: function () {\r\n              return this._entities;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Engine.prototype, \"disposableComponents\", {\r\n          get: function () {\r\n              return this._disposableComponents;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Engine.prototype.addEntity = function (entity) {\r\n          var parent = entity.getParent();\r\n          if (entity.isAddedToEngine()) {\r\n              return entity;\r\n          }\r\n          entity.eventManager = this.eventManager;\r\n          entity.engine = this;\r\n          this._entities[entity.uuid] = entity;\r\n          this.checkRequirementsAndAdd(entity);\r\n          if (!parent) {\r\n              entity.setParent(this.rootEntity);\r\n          }\r\n          else {\r\n              if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\r\n                  log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' + parent.uuid);\r\n              }\r\n          }\r\n          entity.alive = true;\r\n          for (var i in entity.children) {\r\n              var child = entity.children[i];\r\n              if (child) {\r\n                  if (!child.isAddedToEngine()) {\r\n                      this.addEntity(child);\r\n                  }\r\n              }\r\n          }\r\n          return entity;\r\n      };\r\n      Engine.prototype.removeEntity = function (entity) {\r\n          var id = entity.uuid;\r\n          if (entity.isAddedToEngine()) {\r\n              for (var componentName in entity.components) {\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      for (var groupIndex in componentGroups) {\r\n                          componentGroups[groupIndex].removeEntity(entity);\r\n                      }\r\n                  }\r\n                  delete this.entityLists[componentName][id];\r\n              }\r\n              for (var i = 0; i < this.simpleSystems.length; i++) {\r\n                  var system = this.simpleSystems[i];\r\n                  if (system.onRemoveEntity) {\r\n                      system.onRemoveEntity(entity);\r\n                  }\r\n              }\r\n              for (var i in entity.children) {\r\n                  var child = entity.children[i];\r\n                  if (child) {\r\n                      this.removeEntity(child);\r\n                  }\r\n              }\r\n              entity.alive = false;\r\n              entity.eventManager = null;\r\n              delete this._entities[id];\r\n              return true;\r\n          }\r\n          else {\r\n              log('Engine: Trying to remove non existent entity from engine.');\r\n              if (!entity.isAddedToEngine()) {\r\n                  log(\"Engine: Entity \\\"\" + entity.uuid + \"\\\" has not been added to any engine yet.\");\r\n              }\r\n              else {\r\n                  log('Engine: Entity id: ' + id);\r\n              }\r\n              log(\"Engine: Entity's components:\");\r\n              for (var componentName in entity.components) {\r\n                  log(componentName);\r\n              }\r\n              return false;\r\n          }\r\n      };\r\n      Engine.prototype.addSystem = function (system, priority) {\r\n          if (priority === void 0) { priority = 0; }\r\n          if (this.addedSystems.indexOf(system) !== -1) {\r\n              log('Engine: Trying to add a system that is already added. Aborting');\r\n              return system;\r\n          }\r\n          if (this.systems.length > 0) {\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var entry = this.systems[i];\r\n                  var isLast = i === this.systems.length - 1;\r\n                  if (entry.priority > priority) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n                  else if (isLast) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i + 1, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.addedSystems.push(system);\r\n              this.systems.splice(1, 0, { system: system, priority: priority });\r\n          }\r\n          this.registerSystem(system);\r\n          return system;\r\n      };\r\n      Engine.prototype.removeSystem = function (system) {\r\n          var idx = this.addedSystems.indexOf(system);\r\n          if (idx !== -1) {\r\n              system.active = false;\r\n              if (system.deactivate) {\r\n                  system.deactivate();\r\n              }\r\n              this.addedSystems.splice(idx, 1);\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var sys = this.systems[i].system;\r\n                  if (sys === system) {\r\n                      this.systems.splice(i, 1);\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.update = function (dt) {\r\n          for (var i in this.systems) {\r\n              var system = this.systems[i].system;\r\n              if (system.active && system.update) {\r\n                  try {\r\n                      system.update(dt);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      Engine.prototype.getEntitiesWithComponent = function (component) {\r\n          var componentName = typeof component === 'string' ? component : getComponentName(component);\r\n          if (componentName in this.entityLists) {\r\n              return this.entityLists[componentName];\r\n          }\r\n          else {\r\n              return (this.entityLists[componentName] = {});\r\n          }\r\n      };\r\n      Engine.prototype.registerComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          var name = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          this._disposableComponents[id] = component;\r\n          if (classId !== null) {\r\n              this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));\r\n              this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));\r\n          }\r\n      };\r\n      Engine.prototype.disposeComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          if (delete this._disposableComponents[id]) {\r\n              this.eventManager.fireEvent(new DisposableComponentRemoved(id));\r\n              if (component.onDispose) {\r\n                  component.onDispose();\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.updateComponent = function (component) {\r\n          this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));\r\n      };\r\n      Engine.prototype.getComponentGroup = function () {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          var componentGroup = undefined;\r\n          // Return an already created component-group if it already exists\r\n          if (requires.length > 0) {\r\n              // 1. get component groups for first require\r\n              var componentGroups = this._componentGroups[getComponentName(requires[0])];\r\n              if (componentGroups) {\r\n                  var components = requires.slice();\r\n                  // 2. search for a component group that has all the same requirements\r\n                  for (var i = 0; i < componentGroups.length; i++) {\r\n                      var traversedComponentGroup = componentGroups[i];\r\n                      if (components.length === traversedComponentGroup.requires.length) {\r\n                          for (var j = 0; j < components.length; j++) {\r\n                              if (traversedComponentGroup.requires.indexOf(components[j]) === -1)\r\n                                  break;\r\n                              if (j === components.length - 1) {\r\n                                  componentGroup = traversedComponentGroup;\r\n                              }\r\n                          }\r\n                          if (componentGroup)\r\n                              break;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          if (componentGroup) {\r\n              // 3. Found an existent component group with the exact same requirements\r\n              return componentGroup;\r\n          }\r\n          // Otherwise create and store it\r\n          componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires))))();\r\n          componentGroup.active = true;\r\n          var requiresNames = componentGroup.requiresNames;\r\n          for (var i = 0; i < requiresNames.length; i++) {\r\n              var componentName = requiresNames[i];\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (!componentGroups) {\r\n                  this._componentGroups[componentName] = componentGroups = [];\r\n              }\r\n              if (componentGroups.indexOf(componentGroup) === -1) {\r\n                  componentGroups.push(componentGroup);\r\n              }\r\n          }\r\n          for (var entityId in this._entities) {\r\n              this.checkRequirements(this._entities[entityId], componentGroup);\r\n          }\r\n          return componentGroup;\r\n      };\r\n      Engine.prototype.removeComponentGroup = function (componentGroup) {\r\n          if (componentGroup.active) {\r\n              componentGroup.active = false;\r\n              var requiresNames = componentGroup.requiresNames;\r\n              for (var i = 0; i < requiresNames.length; i++) {\r\n                  var componentName = requiresNames[i];\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      var idx = componentGroups.indexOf(componentGroup);\r\n                      if (idx !== -1) {\r\n                          componentGroups.splice(idx, 1);\r\n                      }\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.registerSystem = function (system) {\r\n          system.active = true;\r\n          if (system.activate) {\r\n              system.activate(this);\r\n          }\r\n          this.simpleSystems.push(system);\r\n      };\r\n      Engine.prototype.checkRequirementsAndAdd = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          for (var componentName in entity.components) {\r\n              if (!(componentName in this.entityLists)) {\r\n                  this.entityLists[componentName] = {};\r\n              }\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (componentGroups) {\r\n                  for (var systemIndex in componentGroups) {\r\n                      this.checkRequirements(entity, componentGroups[systemIndex]);\r\n                  }\r\n              }\r\n          }\r\n          for (var i = 0; i < this.simpleSystems.length; i++) {\r\n              var system = this.simpleSystems[i];\r\n              if (system.onAddEntity) {\r\n                  system.onAddEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.checkRequirements = function (entity, system) {\r\n          if (system.meetsRequirements(entity)) {\r\n              if (!system.hasEntity(entity)) {\r\n                  system.addEntity(entity);\r\n              }\r\n          }\r\n          else {\r\n              if (system.hasEntity(entity)) {\r\n                  system.removeEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentAddedHandler = function (event) {\r\n          var _a;\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          if (!this.entityLists[componentName]) {\r\n              this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\r\n          }\r\n          else {\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n          }\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentRemovedHandler = function (event) {\r\n          // In case a single component gets removed from an entity, we inform\r\n          // all systems that this entity lost this specific component.\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          delete this.entityLists[componentName][entity.uuid];\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      return Engine;\r\n  }());\n\n  var _defer = Promise.resolve().then.bind(Promise.resolve());\r\n  /**\r\n   * Executes an asynchronous task\r\n   * @param task - the task to execute\r\n   * @public\r\n   */\r\n  function executeTask(task) {\r\n      var result = _defer(task);\r\n      result.isComplete = false;\r\n      result\r\n          .then(function ($) {\r\n          result.isComplete = true;\r\n          result.result = $;\r\n          result.didFail = false;\r\n      })\r\n          .catch(function ($) {\r\n          result.isComplete = true;\r\n          result.error = $;\r\n          result.didFail = true;\r\n          error('executeTask: FAILED ' + $.toString(), $);\r\n      });\r\n      return result;\r\n  }\n\n  /**\r\n   * A class serves as a medium between the observable and its observers\r\n   * @public\r\n   */\r\n  var ObserverEventState = /** @class */ (function () {\r\n      /**\r\n       * Create a new EventState\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       */\r\n      function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.initalize(mask, skipNextObservers, target, currentTarget);\r\n      }\r\n      /**\r\n       * Initialize the current event state\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns the current event state\r\n       */\r\n      ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.mask = mask;\r\n          this.skipNextObservers = skipNextObservers;\r\n          this.target = target;\r\n          this.currentTarget = currentTarget;\r\n          return this;\r\n      };\r\n      return ObserverEventState;\r\n  }());\r\n  /**\r\n   * Represent an Observer registered to a given Observable object.\r\n   * @public\r\n   */\r\n  var Observer = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observer\r\n       * @param callback - defines the callback to call when the observer is notified\r\n       * @param mask - defines the mask of the observer (used to filter notifications)\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       */\r\n      function Observer(\r\n      /**\r\n       * Defines the callback to call when the observer is notified\r\n       */\r\n      callback, \r\n      /**\r\n       * Defines the mask of the observer (used to filter notifications)\r\n       */\r\n      mask, \r\n      /**\r\n       * Defines the current scope used to restore the JS context\r\n       */\r\n      scope) {\r\n          if (scope === void 0) { scope = null; }\r\n          this.callback = callback;\r\n          this.mask = mask;\r\n          this.scope = scope;\r\n          /**\r\n           * Gets or sets a property defining that the observer as to be unregistered after the next notification\r\n           */\r\n          this.unregisterOnNextCall = false;\r\n          /** For internal usage */\r\n          this._willBeUnregistered = false;\r\n      }\r\n      return Observer;\r\n  }());\r\n  /**\r\n   * Represent a list of observers registered to multiple Observables object.\r\n   * @public\r\n   */\r\n  var MultiObserver = /** @class */ (function () {\r\n      function MultiObserver() {\r\n          this._observers = null;\r\n          this._observables = null;\r\n      }\r\n      /**\r\n       * Raise a callback when one of the observable will notify\r\n       * @param observables - defines a list of observables to watch\r\n       * @param callback - defines the callback to call on notification\r\n       * @param mask - defines the mask used to filter notifications\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       * @returns the new MultiObserver\r\n       */\r\n      MultiObserver.Watch = function (observables, callback, mask, scope) {\r\n          var e_1, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (scope === void 0) { scope = null; }\r\n          var result = new MultiObserver();\r\n          result._observers = new Array();\r\n          result._observables = observables;\r\n          try {\r\n              for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\r\n                  var observable = observables_1_1.value;\r\n                  var observer = observable.add(callback, mask, false, scope);\r\n                  if (observer) {\r\n                      result._observers.push(observer);\r\n                  }\r\n              }\r\n          }\r\n          catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n          finally {\r\n              try {\r\n                  if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\r\n              }\r\n              finally { if (e_1) throw e_1.error; }\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Release associated resources\r\n       */\r\n      MultiObserver.prototype.dispose = function () {\r\n          if (this._observers && this._observables) {\r\n              for (var index = 0; index < this._observers.length; index++) {\r\n                  this._observables[index].remove(this._observers[index]);\r\n              }\r\n          }\r\n          this._observers = null;\r\n          this._observables = null;\r\n      };\r\n      return MultiObserver;\r\n  }());\r\n  /**\r\n   * The Observable class is a simple implementation of the Observable pattern.\r\n   *\r\n   * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\r\n   * This enable a more fine grained execution without having to rely on multiple different Observable objects.\r\n   * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\r\n   * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\r\n   *\r\n   * @public\r\n   */\r\n  var Observable = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observable\r\n       * @param onObserverAdded - defines a callback to call when a new observer is added\r\n       */\r\n      function Observable(onObserverAdded) {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n          this._eventState = new ObserverEventState(0);\r\n          if (onObserverAdded) {\r\n              this._onObserverAdded = onObserverAdded;\r\n          }\r\n      }\r\n      /**\r\n       * Create a new Observer with the specified callback\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @param mask - the mask used to filter observers\r\n       * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\r\n       * @param scope - optional scope for the callback to be called from\r\n       * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\r\n          if (mask === void 0) { mask = -1; }\r\n          if (insertFirst === void 0) { insertFirst = false; }\r\n          if (scope === void 0) { scope = null; }\r\n          if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\r\n          if (!callback) {\r\n              return null;\r\n          }\r\n          var observer = new Observer(callback, mask, scope);\r\n          observer.unregisterOnNextCall = unregisterOnFirstCall;\r\n          if (insertFirst) {\r\n              this._observers.unshift(observer);\r\n          }\r\n          else {\r\n              this._observers.push(observer);\r\n          }\r\n          if (this._onObserverAdded) {\r\n              this._onObserverAdded(observer);\r\n          }\r\n          return observer;\r\n      };\r\n      /**\r\n       * Create a new Observer with the specified callback and unregisters after the next notification\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.addOnce = function (callback) {\r\n          return this.add(callback, undefined, undefined, undefined, true);\r\n      };\r\n      /**\r\n       * Remove an Observer from the Observable object\r\n       * @param observer - the instance of the Observer to remove\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._deferUnregister(observer);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Remove a callback from the Observable object\r\n       * @param callback - the callback to remove\r\n       * @param scope - optional scope. If used only the callbacks with this scope will be removed\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.removeCallback = function (callback, scope) {\r\n          for (var index = 0; index < this._observers.length; index++) {\r\n              if (this._observers[index].callback === callback && (!scope || scope === this._observers[index].scope)) {\r\n                  this._deferUnregister(this._observers[index]);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Notify all Observers by calling their respective callback with the given data\r\n       * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\r\n       * @param eventData - defines the data to send to all observers\r\n       * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\r\n       */\r\n      Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\r\n          var e_2, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (!this._observers.length) {\r\n              return true;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          state.lastReturnValue = eventData;\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs._willBeUnregistered) {\r\n                      continue;\r\n                  }\r\n                  if (obs.mask & mask) {\r\n                      if (obs.scope) {\r\n                          state.lastReturnValue = obs.callback.apply(obs.scope, [eventData, state]);\r\n                      }\r\n                      else {\r\n                          state.lastReturnValue = obs.callback(eventData, state);\r\n                      }\r\n                      if (obs.unregisterOnNextCall) {\r\n                          this._deferUnregister(obs);\r\n                      }\r\n                  }\r\n                  if (state.skipNextObservers) {\r\n                      return false;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_2) throw e_2.error; }\r\n          }\r\n          return true;\r\n      };\r\n      /**\r\n       * Calling this will execute each callback, expecting it to be a promise or return a value.\r\n       * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\r\n       * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\r\n       * and it is crucial that all callbacks will be executed.\r\n       * The order of the callbacks is kept, callbacks are not executed parallel.\r\n       *\r\n       * @param eventData - The data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       * @param target - defines the callback target (see EventState)\r\n       * @param currentTarget - defines he current object in the bubbling phase\r\n       * @returns will return a Promise than resolves when all callbacks executed successfully.\r\n       */\r\n      Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\r\n          var _this = this;\r\n          if (mask === void 0) { mask = -1; }\r\n          // create an empty promise\r\n          var p = Promise.resolve(eventData);\r\n          // no observers? return this promise.\r\n          if (!this._observers.length) {\r\n              return p;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          // execute one callback after another (not using Promise.all, the order is important)\r\n          this._observers.forEach(function (obs) {\r\n              if (state.skipNextObservers) {\r\n                  return;\r\n              }\r\n              if (obs._willBeUnregistered) {\r\n                  return;\r\n              }\r\n              if (obs.mask & mask) {\r\n                  if (obs.scope) {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback.apply(obs.scope, [eventData, state]);\r\n                      });\r\n                  }\r\n                  else {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback(eventData, state);\r\n                      });\r\n                  }\r\n                  if (obs.unregisterOnNextCall) {\r\n                      _this._deferUnregister(obs);\r\n                  }\r\n              }\r\n          });\r\n          // return the eventData\r\n          return p.then(function () {\r\n              return eventData;\r\n          });\r\n      };\r\n      /**\r\n       * Notify a specific observer\r\n       * @param observer - defines the observer to notify\r\n       * @param eventData - defines the data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       */\r\n      Observable.prototype.notifyObserver = function (observer, eventData, mask) {\r\n          if (mask === void 0) { mask = -1; }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.skipNextObservers = false;\r\n          observer.callback(eventData, state);\r\n      };\r\n      /**\r\n       * Gets a boolean indicating if the observable has at least one observer\r\n       * @returns true is the Observable has at least one Observer registered\r\n       */\r\n      Observable.prototype.hasObservers = function () {\r\n          return this._observers.length > 0;\r\n      };\r\n      /**\r\n       * Clear the list of observers\r\n       */\r\n      Observable.prototype.clear = function () {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n      };\r\n      /**\r\n       * Clone the current observable\r\n       * @returns a new observable\r\n       */\r\n      Observable.prototype.clone = function () {\r\n          var result = new Observable();\r\n          result._observers = this._observers.slice(0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Does this observable handles observer registered with a given mask\r\n       * @param mask - defines the mask to be tested\r\n       * @returns whether or not one observer registered with the given mask is handeled\r\n       */\r\n      Observable.prototype.hasSpecificMask = function (mask) {\r\n          var e_3, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs.mask & mask || obs.mask === mask) {\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_3) throw e_3.error; }\r\n          }\r\n          return false;\r\n      };\r\n      Observable.prototype._deferUnregister = function (observer) {\r\n          var _this = this;\r\n          observer.unregisterOnNextCall = false;\r\n          observer._willBeUnregistered = true;\r\n          executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n              return [2 /*return*/, this._remove(observer)];\r\n          }); }); });\r\n      };\r\n      // This should only be called when not iterating over _observers to avoid callback skipping.\r\n      // Removes an observer from the _observer Array.\r\n      Observable.prototype._remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._observers.splice(index, 1);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      return Observable;\r\n  }());\n\n  var modulePromise;\r\n  /**\r\n   * teleport player to a destination\r\n   * @param destination - \"coordX,coordY\", \"magic\", \"crowd\"\r\n   * @public\r\n   */\r\n  function teleportTo(destination) {\r\n      // error(`teleportTo(destination) was deprecated. Please use:\r\n      // import {requestTeleport} from '@decentraland/UserActionModule'\r\n      // executeTask(async () => {\r\n      //   await requestTeleport(destination)\r\n      // })`)\r\n      callModuleRpc('requestTeleport', [destination]);\r\n  }\r\n  function ensureModule() {\r\n      if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {\r\n          modulePromise = dcl.loadModule('@decentraland/UserActionModule', {});\r\n      }\r\n      return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined';\r\n  }\r\n  function callModuleRpc(methodName, args) {\r\n      if (ensureModule()) {\r\n          modulePromise.then(function ($) {\r\n              dcl.callRpc($.rpcHandle, methodName, args);\r\n          });\r\n      }\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEvent = /** @class */ (function () {\r\n      function UUIDEvent(uuid, payload) {\r\n          this.uuid = uuid;\r\n          this.payload = payload;\r\n      }\r\n      UUIDEvent = __decorate([\r\n          EventConstructor()\r\n      ], UUIDEvent);\r\n      return UUIDEvent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var RaycastResponse = /** @class */ (function () {\r\n      function RaycastResponse(payload) {\r\n          this.payload = payload;\r\n      }\r\n      RaycastResponse = __decorate([\r\n          EventConstructor()\r\n      ], RaycastResponse);\r\n      return RaycastResponse;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEvent = /** @class */ (function () {\r\n      function PointerEvent(payload) {\r\n          this.payload = payload;\r\n      }\r\n      PointerEvent = __decorate([\r\n          EventConstructor()\r\n      ], PointerEvent);\r\n      return PointerEvent;\r\n  }());\r\n  var internalDcl;\r\n  /**\r\n   * @internal\r\n   * This function generates a callback that is passed to the Observable\r\n   * constructor to subscribe to the events of the DecentralandInterface\r\n   */\r\n  function createSubscriber(eventName) {\r\n      return function () {\r\n          if (internalDcl) {\r\n              internalDcl.subscribe(eventName);\r\n          }\r\n      };\r\n  }\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onCameraModeChangedObservable = new Observable(createSubscriber('cameraModeChanged'));\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onIdleStateChangedObservable = new Observable(createSubscriber('idleStateChanged'));\r\n  /**\r\n   * These events are triggered after your character enters the scene.\r\n   * @public\r\n   */\r\n  var onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\r\n  /** @public @deprecated Use onEnterSceneObservable instead. */\r\n  var onEnterScene = onEnterSceneObservable;\r\n  /**\r\n   * These events are triggered after your character leaves the scene.\r\n   * @public\r\n   */\r\n  var onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\r\n  /** @public @deprecated Use onLeaveSceneObservable instead. */\r\n  var onLeaveScene = onLeaveSceneObservable;\r\n  /**\r\n   * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\r\n   * @public\r\n   */\r\n  var onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPointerLockedStateChange = new Observable(createSubscriber('onPointerLock'));\r\n  /**\r\n  * @public\r\n  */\r\n  var onVideoEvent = new Observable(createSubscriber('videoEvent'));\r\n  /**\r\n  * @public\r\n  */\r\n  var onProfileChanged = new Observable(createSubscriber('profileChanged'));\r\n  /**\r\n  * @public\r\n  */\r\n  var onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\r\n  /**\r\n  * @public\r\n  */\r\n  var onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\r\n  /**\r\n  * @public\r\n  */\r\n  var onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\r\n  /**\r\n   * @internal\r\n   * This function adds _one_ listener to the onEvent event of dcl interface.\r\n   * Leveraging a switch to route events to the Observable handlers.\r\n   */\r\n  function _initEventObservables(dcl) {\r\n      // store internal reference to dcl, it is going to be used to subscribe to the events\r\n      internalDcl = dcl;\r\n      if (internalDcl) {\r\n          internalDcl.onEvent(function (event) {\r\n              switch (event.type) {\r\n                  case 'onEnterScene': {\r\n                      onEnterSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onLeaveScene': {\r\n                      onLeaveSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'cameraModeChanged': {\r\n                      onCameraModeChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'idleStateChanged': {\r\n                      onIdleStateChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'sceneStart': {\r\n                      onSceneReadyObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerExpression': {\r\n                      onPlayerExpressionObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'videoEvent': {\r\n                      var videoData = event.data;\r\n                      var component = DisposableComponent.engine.disposableComponents[videoData.componentId];\r\n                      if (component) {\r\n                          component.update(videoData);\r\n                      }\r\n                      onVideoEvent.notifyObservers(videoData);\r\n                      return;\r\n                  }\r\n                  case 'profileChanged': {\r\n                      onProfileChanged.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onPointerLock': {\r\n                      onPointerLockedStateChange.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerConnected': {\r\n                      onPlayerConnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerDisconnected': {\r\n                      onPlayerDisconnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onRealmChanged': {\r\n                      onRealmChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n              }\r\n          });\r\n      }\r\n  }\n\n  // This number is defined in the protocol ECS.SetEntityParent.3\r\n  var ROOT_ENTITY_ID = '0';\r\n  var DecentralandSynchronizationSystem = /** @class */ (function () {\r\n      function DecentralandSynchronizationSystem(dcl) {\r\n          this.dcl = dcl;\r\n          this.cachedComponents = {};\r\n      }\r\n      DecentralandSynchronizationSystem.prototype.activate = function (engine) {\r\n          var _this = this;\r\n          this.engine = engine;\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated);\r\n          engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated);\r\n          engine.eventManager.addListener(ParentChanged, this, this.parentChanged);\r\n          var rootId = engine.rootEntity.uuid;\r\n          this.dcl.addEntity(rootId);\r\n          // TODO(agus): send disposableComponents if exist\r\n          this.dcl.onUpdate(function (dt) {\r\n              engine.update(dt);\r\n              _this.presentEntities();\r\n          });\r\n          this.dcl.onEvent(function (event) {\r\n              var data = event.data;\r\n              switch (event.type) {\r\n                  case 'uuidEvent':\r\n                      engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload));\r\n                      break;\r\n                  case 'raycastResponse':\r\n                      if (data.queryType === 'HitFirst') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      else if (data.queryType === 'HitAll') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      break;\r\n                  case 'actionButtonEvent':\r\n                      engine.eventManager.fireEvent(new PointerEvent(data.payload));\r\n                      break;\r\n              }\r\n          });\r\n      };\r\n      /**\r\n       * system.onAddEntity is called by the engine when a entity is added to the\r\n       * engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\r\n          if (entity && entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              var parent = entity.getParent();\r\n              this.dcl.addEntity(entityId);\r\n              if (parent) {\r\n                  // If the entity has a parent, we send the the enparenting signal\r\n                  // otherwise the engine will know the entity is set as a child of\r\n                  // engine.rootEntity by default\r\n                  this.dcl.setParent(entityId, parent.uuid);\r\n              }\r\n              // This creates a cache dictionary to avoid send redundant information to\r\n              // the engine in order to avoid unnecessary work in the main thread.\r\n              this.cachedComponents[entityId] = {};\r\n              // this iterator sends the current components of te engine at the moment\r\n              // of addition\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null) {\r\n                      if (isDisposableComponent(component)) {\r\n                          // Send the attach component signal\r\n                          this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component));\r\n                      }\r\n                      else {\r\n                          var componentJson = JSON.stringify(component);\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\r\n                          // Update the cached copy of the sent component\r\n                          this.cachedComponents[entityId][componentName] = componentJson;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * system.onRemoveEntity is called by the engine when a entity gets removed\r\n       * from the engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\r\n          if (entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              // Send the removeEntity signal\r\n              this.dcl.removeEntity(entityId);\r\n              // Remove the caches from local memory\r\n              delete this.cachedComponents[entityId];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called at the end of every update cycle.\r\n       * It finds and sends updates in components of the engine entities.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.presentEntities = function () {\r\n          for (var i in this.engine.entities) {\r\n              var entity = this.engine.entities[i];\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null && !isDisposableComponent(component)) {\r\n                      var jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component);\r\n                      if (jsonRepresentation) {\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation);\r\n                          this.clearDirty(entity.uuid, componentName, component, jsonRepresentation);\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          for (var id in this.engine.disposableComponents) {\r\n              var component = this.engine.disposableComponents[id];\r\n              if (component instanceof ObservableComponent && component.dirty) {\r\n                  this.dcl.componentUpdated(id, JSON.stringify(component));\r\n                  component.dirty = false;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a component is added to an entity. The event\r\n       * (param 1) contains the necessary information to notify the engine about the\r\n       * component that was added and the entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (isDisposableComponent(component)) {\r\n                  this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component));\r\n              }\r\n              else if (event.classId !== null) {\r\n                  var componentJson = JSON.stringify(component);\r\n                  // Send the updated component\r\n                  this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\r\n                  // Update the cached copy of the sent component\r\n                  this.cachedComponents[event.entity.uuid][event.componentName] = componentJson;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called when a component is removed from an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\r\n              // Remove the cached component so we can send it again when re-adding\r\n              delete this.cachedComponents[event.entity.uuid][event.componentName];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is created.\r\n       * It instantiates the component in the engine, the event that updates the\r\n       * created component is fired immediatly after.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\r\n          this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is updated, once per\r\n       * update cycle and once after creation.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\r\n          this.dcl.componentDisposed(event.componentId);\r\n      };\r\n      /**\r\n       * This method is called right after a diposableComponent gets disposed. That\r\n       * process is manual.\r\n       *\r\n       * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\r\n       * it remains attached to some entities?\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\r\n          this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\r\n      };\r\n      /**\r\n       * This method is called when a parent changes in an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\r\n          this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.getJsonIfDirty = function (entityId, componentName, component) {\r\n          var jsonRepresentation = JSON.stringify(component);\r\n          return jsonRepresentation !== this.cachedComponents[entityId][componentName] && jsonRepresentation;\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.clearDirty = function (entityId, componentName, component, jsonRepresentation) {\r\n          this.cachedComponents[entityId][componentName] = jsonRepresentation;\r\n      };\r\n      return DecentralandSynchronizationSystem;\r\n  }());\n\n  /**\r\n   * Defines potential orientation for back face culling\r\n   * @public\r\n   */\r\n  exports.Orientation = void 0;\r\n  (function (Orientation) {\r\n      /**\r\n       * Clockwise\r\n       */\r\n      Orientation[Orientation[\"CW\"] = 0] = \"CW\";\r\n      /** Counter clockwise */\r\n      Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\r\n  })(exports.Orientation || (exports.Orientation = {}));\r\n  /**\r\n   * Defines supported spaces\r\n   * @public\r\n   */\r\n  exports.Space = void 0;\r\n  (function (Space) {\r\n      /** Local (object) space */\r\n      Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\r\n      /** World space */\r\n      Space[Space[\"WORLD\"] = 1] = \"WORLD\";\r\n      /** Bone space */\r\n      Space[Space[\"BONE\"] = 2] = \"BONE\";\r\n  })(exports.Space || (exports.Space = {}));\r\n  /**\r\n   * Constant used to convert a value to gamma space\r\n   * @public\r\n   */\r\n  var ToGammaSpace = 1 / 2.2;\r\n  /**\r\n   * Constant used to convert a value to linear space\r\n   * @public\r\n   */\r\n  var ToLinearSpace = 2.2;\r\n  /**\r\n   * Constant used to define the minimal number value in Babylon.js\r\n   * @public\r\n   */\r\n  var Epsilon = 0.000001;\r\n  /**\r\n   * Constant used to convert from Euler degrees to radians\r\n   * @public\r\n   */\r\n  var DEG2RAD = Math.PI / 180;\r\n  /**\r\n   * Constant used to convert from radians to Euler degrees\r\n   * @public\r\n   */\r\n  var RAD2DEG = 360 / (Math.PI * 2);\n\n  /**\r\n   * Scalar computation library\r\n   * @public\r\n   */\r\n  var Scalar = /** @class */ (function () {\r\n      function Scalar() {\r\n      }\r\n      /**\r\n       * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n       * @param a - number\r\n       * @param b - number\r\n       * @param epsilon - (default = 1.401298E-45)\r\n       * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n       */\r\n      Scalar.WithinEpsilon = function (a, b, epsilon) {\r\n          if (epsilon === void 0) { epsilon = 1.401298e-45; }\r\n          var num = a - b;\r\n          return -epsilon <= num && num <= epsilon;\r\n      };\r\n      /**\r\n       * Returns a string : the upper case translation of the number i to hexadecimal.\r\n       * @param i - number\r\n       * @returns the upper case translation of the number i to hexadecimal.\r\n       */\r\n      Scalar.ToHex = function (i) {\r\n          var str = i.toString(16);\r\n          if (i <= 15) {\r\n              return ('0' + str).toUpperCase();\r\n          }\r\n          return str.toUpperCase();\r\n      };\r\n      /**\r\n       * Returns -1 if value is negative and +1 is value is positive.\r\n       * @param _value - the value\r\n       * @returns the value itself if it's equal to zero.\r\n       */\r\n      Scalar.Sign = function (value) {\r\n          var _value = +value; // convert to a number\r\n          if (_value === 0 || isNaN(_value)) {\r\n              return _value;\r\n          }\r\n          return _value > 0 ? 1 : -1;\r\n      };\r\n      /**\r\n       * Returns the value itself if it's between min and max.\r\n       * Returns min if the value is lower than min.\r\n       * Returns max if the value is greater than max.\r\n       * @param value - the value to clmap\r\n       * @param min - the min value to clamp to (default: 0)\r\n       * @param max - the max value to clamp to (default: 1)\r\n       * @returns the clamped value\r\n       */\r\n      Scalar.Clamp = function (value, min, max) {\r\n          if (min === void 0) { min = 0; }\r\n          if (max === void 0) { max = 1; }\r\n          return Math.min(max, Math.max(min, value));\r\n      };\r\n      /**\r\n       * the log2 of value.\r\n       * @param value - the value to compute log2 of\r\n       * @returns the log2 of value.\r\n       */\r\n      Scalar.Log2 = function (value) {\r\n          return Math.log(value) * Math.LOG2E;\r\n      };\r\n      /**\r\n       * Loops the value, so that it is never larger than length and never smaller than 0.\r\n       *\r\n       * This is similar to the modulo operator but it works with floating point numbers.\r\n       * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\r\n       * With t = 5 and length = 2.5, the result would be 0.0.\r\n       * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\r\n       * @param value - the value\r\n       * @param length - the length\r\n       * @returns the looped value\r\n       */\r\n      Scalar.Repeat = function (value, length) {\r\n          return value - Math.floor(value / length) * length;\r\n      };\r\n      /**\r\n       * Normalize the value between 0.0 and 1.0 using min and max values\r\n       * @param value - value to normalize\r\n       * @param min - max to normalize between\r\n       * @param max - min to normalize between\r\n       * @returns the normalized value\r\n       */\r\n      Scalar.Normalize = function (value, min, max) {\r\n          return (value - min) / (max - min);\r\n      };\r\n      /**\r\n       * Denormalize the value from 0.0 and 1.0 using min and max values\r\n       * @param normalized - value to denormalize\r\n       * @param min - max to denormalize between\r\n       * @param max - min to denormalize between\r\n       * @returns the denormalized value\r\n       */\r\n      Scalar.Denormalize = function (normalized, min, max) {\r\n          return normalized * (max - min) + min;\r\n      };\r\n      /**\r\n       * Calculates the shortest difference between two given angles given in degrees.\r\n       * @param current - current angle in degrees\r\n       * @param target - target angle in degrees\r\n       * @returns the delta\r\n       */\r\n      Scalar.DeltaAngle = function (current, target) {\r\n          var num = Scalar.Repeat(target - current, 360.0);\r\n          if (num > 180.0) {\r\n              num -= 360.0;\r\n          }\r\n          return num;\r\n      };\r\n      /**\r\n       * PingPongs the value t, so that it is never larger than length and never smaller than 0.\r\n       * @param tx - value\r\n       * @param length - length\r\n       * @returns The returned value will move back and forth between 0 and length\r\n       */\r\n      Scalar.PingPong = function (tx, length) {\r\n          var t = Scalar.Repeat(tx, length * 2.0);\r\n          return length - Math.abs(t - length);\r\n      };\r\n      /**\r\n       * Interpolates between min and max with smoothing at the limits.\r\n       *\r\n       * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\r\n       * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\r\n       * @param from - from\r\n       * @param to - to\r\n       * @param tx - value\r\n       * @returns the smooth stepped value\r\n       */\r\n      Scalar.SmoothStep = function (from, to, tx) {\r\n          var t = Scalar.Clamp(tx);\r\n          t = -2.0 * t * t * t + 3.0 * t * t;\r\n          return to * t + from * (1.0 - t);\r\n      };\r\n      /**\r\n       * Moves a value current towards target.\r\n       *\r\n       * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\r\n       * Negative values of maxDelta pushes the value away from target.\r\n       * @param current - current value\r\n       * @param target - target value\r\n       * @param maxDelta - max distance to move\r\n       * @returns resulting value\r\n       */\r\n      Scalar.MoveTowards = function (current, target, maxDelta) {\r\n          var result = 0;\r\n          if (Math.abs(target - current) <= maxDelta) {\r\n              result = target;\r\n          }\r\n          else {\r\n              result = current + Scalar.Sign(target - current) * maxDelta;\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n       *\r\n       * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\r\n       *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\r\n       * @param current - current value\r\n       * @param target - target value\r\n       * @param maxDelta - max distance to move\r\n       * @returns resulting angle\r\n       */\r\n      Scalar.MoveTowardsAngle = function (current, target, maxDelta) {\r\n          var num = Scalar.DeltaAngle(current, target);\r\n          var result = 0;\r\n          if (-maxDelta < num && num < maxDelta) {\r\n              result = target;\r\n          }\r\n          else {\r\n              result = Scalar.MoveTowards(current, current + num, maxDelta);\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\r\n       * @param start - start value\r\n       * @param end - target value\r\n       * @param amount - amount to lerp between\r\n       * @returns the lerped value\r\n       */\r\n      Scalar.Lerp = function (start, end, amount) {\r\n          return start + (end - start) * amount;\r\n      };\r\n      /**\r\n       * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n       * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\r\n       * @param start - start value\r\n       * @param end - target value\r\n       * @param amount - amount to lerp between\r\n       * @returns the lerped value\r\n       */\r\n      Scalar.LerpAngle = function (start, end, amount) {\r\n          var num = Scalar.Repeat(end - start, 360.0);\r\n          if (num > 180.0) {\r\n              num -= 360.0;\r\n          }\r\n          return start + num * Scalar.Clamp(amount);\r\n      };\r\n      /**\r\n       * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\r\n       * @param a - start value\r\n       * @param b - target value\r\n       * @param value - value between a and b\r\n       * @returns the inverseLerp value\r\n       */\r\n      Scalar.InverseLerp = function (a, b, value) {\r\n          var result = 0;\r\n          if (a !== b) {\r\n              result = Scalar.Clamp((value - a) / (b - a));\r\n          }\r\n          else {\r\n              result = 0.0;\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\r\n       * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\r\n       * @param value1 - spline value\r\n       * @param tangent1 - spline value\r\n       * @param value2 - spline value\r\n       * @param tangent2 - spline value\r\n       * @param amount - input value\r\n       * @returns hermite result\r\n       */\r\n      Scalar.Hermite = function (value1, tangent1, value2, tangent2, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n          var part2 = -2.0 * cubed + 3.0 * squared;\r\n          var part3 = cubed - 2.0 * squared + amount;\r\n          var part4 = cubed - squared;\r\n          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\r\n      };\r\n      /**\r\n       * Returns a random float number between and min and max values\r\n       * @param min - min value of random\r\n       * @param max - max value of random\r\n       * @returns random value\r\n       */\r\n      Scalar.RandomRange = function (min, max) {\r\n          if (min === max) {\r\n              return min;\r\n          }\r\n          return Math.random() * (max - min) + min;\r\n      };\r\n      /**\r\n       * This function returns percentage of a number in a given range.\r\n       *\r\n       * RangeToPercent(40,20,60) will return 0.5 (50%)\r\n       * RangeToPercent(34,0,100) will return 0.34 (34%)\r\n       * @param num - to convert to percentage\r\n       * @param min - min range\r\n       * @param max - max range\r\n       * @returns the percentage\r\n       */\r\n      Scalar.RangeToPercent = function (num, min, max) {\r\n          return (num - min) / (max - min);\r\n      };\r\n      /**\r\n       * This function returns number that corresponds to the percentage in a given range.\r\n       *\r\n       * PercentToRange(0.34,0,100) will return 34.\r\n       * @param percent - to convert to number\r\n       * @param min - min range\r\n       * @param max - max range\r\n       * @returns the number\r\n       */\r\n      Scalar.PercentToRange = function (percent, min, max) {\r\n          return (max - min) * percent + min;\r\n      };\r\n      /**\r\n       * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\r\n       * @param angle - The angle to normalize in radian.\r\n       * @returns The converted angle.\r\n       */\r\n      Scalar.NormalizeRadians = function (angle) {\r\n          // More precise but slower version kept for reference.\r\n          // tslint:disable:no-commented-out-code\r\n          /*\r\n            // angle = angle % Tools.TwoPi;\r\n            // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\r\n      \n            //if (angle > Math.PI) {\r\n            //\tangle -= Tools.TwoPi;\r\n            //}\r\n             */\r\n          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\r\n      };\r\n      /**\r\n       * Two pi constants convenient for computation.\r\n       */\r\n      Scalar.TwoPi = Math.PI * 2;\r\n      return Scalar;\r\n  }());\n\n  /**\r\n   * Vector4 class created for EulerAngle class conversion to Quaternion\r\n   * @public\r\n   */\r\n  var Vector4 = /** @class */ (function () {\r\n      /**\r\n       * Creates a Vector4 object from the given floats.\r\n       * @param x - x value of the vector\r\n       * @param y - y value of the vector\r\n       * @param z - z value of the vector\r\n       * @param w - w value of the vector\r\n       */\r\n      function Vector4(\r\n      /** x value of the vector */\r\n      x, \r\n      /** y value of the vector */\r\n      y, \r\n      /** z value of the vector */\r\n      z, \r\n      /** w value of the vector */\r\n      w) {\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n          this.w = w;\r\n      }\r\n      // Statics\r\n      /**\r\n       * Returns a new Vector4 as the result of the addition of the two given vectors.\r\n       * @param vector1 - the first vector\r\n       * @param vector2 - the second vector\r\n       * @returns the resulting vector\r\n       */\r\n      Vector4.Add = function (vector1, vector2) {\r\n          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set from the starting index of the given array.\r\n       * @param array - the array to pull values from\r\n       * @param offset - the offset into the array to start at\r\n       * @returns the new vector\r\n       */\r\n      Vector4.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" from the starting index of the given array.\r\n       * @param array - the array to pull values from\r\n       * @param offset - the offset into the array to start at\r\n       * @param result - the vector to store the result in\r\n       */\r\n      Vector4.FromArrayToRef = function (array, offset, result) {\r\n          result.x = array[offset];\r\n          result.y = array[offset + 1];\r\n          result.z = array[offset + 2];\r\n          result.w = array[offset + 3];\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" from the starting index of the given FloatArray.\r\n       * @param array - the array to pull values from\r\n       * @param offset - the offset into the array to start at\r\n       * @param result - the vector to store the result in\r\n       */\r\n      Vector4.FromFloatArrayToRef = function (array, offset, result) {\r\n          Vector4.FromArrayToRef(array, offset, result);\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" coordinates from the given floats.\r\n       * @param x - float to set from\r\n       * @param y - float to set from\r\n       * @param z - float to set from\r\n       * @param w - float to set from\r\n       * @param result - the vector to the floats in\r\n       */\r\n      Vector4.FromFloatsToRef = function (x, y, z, w, result) {\r\n          result.x = x;\r\n          result.y = y;\r\n          result.z = z;\r\n          result.w = w;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\r\n       * @returns the new vector\r\n       */\r\n      Vector4.Zero = function () {\r\n          return new Vector4(0.0, 0.0, 0.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\r\n       * @returns the new vector\r\n       */\r\n      Vector4.One = function () {\r\n          return new Vector4(1.0, 1.0, 1.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a new normalized Vector4 from the given one.\r\n       * @param vector - the vector to normalize\r\n       * @returns the vector\r\n       */\r\n      Vector4.Normalize = function (vector) {\r\n          var result = Vector4.Zero();\r\n          Vector4.NormalizeToRef(vector, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" from the normalization of the given one.\r\n       * @param vector - the vector to normalize\r\n       * @param result - the vector to store the result in\r\n       */\r\n      Vector4.NormalizeToRef = function (vector, result) {\r\n          result.copyFrom(vector);\r\n          result.normalize();\r\n      };\r\n      /**\r\n       * Returns a vector with the minimum values from the left and right vectors\r\n       * @param left - left vector to minimize\r\n       * @param right - right vector to minimize\r\n       * @returns a new vector with the minimum of the left and right vector values\r\n       */\r\n      Vector4.Minimize = function (left, right) {\r\n          var min = new Vector4(left.x, left.y, left.z, left.w);\r\n          min.minimizeInPlace(right);\r\n          return min;\r\n      };\r\n      /**\r\n       * Returns a vector with the maximum values from the left and right vectors\r\n       * @param left - left vector to maximize\r\n       * @param right - right vector to maximize\r\n       * @returns a new vector with the maximum of the left and right vector values\r\n       */\r\n      Vector4.Maximize = function (left, right) {\r\n          var max = new Vector4(left.x, left.y, left.z, left.w);\r\n          max.maximizeInPlace(right);\r\n          return max;\r\n      };\r\n      /**\r\n       * Returns the distance (float) between the vectors \"value1\" and \"value2\".\r\n       * @param value1 - value to calulate the distance between\r\n       * @param value2 - value to calulate the distance between\r\n       * @returns the distance between the two vectors\r\n       */\r\n      Vector4.Distance = function (value1, value2) {\r\n          return Math.sqrt(Vector4.DistanceSquared(value1, value2));\r\n      };\r\n      /**\r\n       * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\r\n       * @param value1 - value to calulate the distance between\r\n       * @param value2 - value to calulate the distance between\r\n       * @returns the distance between the two vectors squared\r\n       */\r\n      Vector4.DistanceSquared = function (value1, value2) {\r\n          var x = value1.x - value2.x;\r\n          var y = value1.y - value2.y;\r\n          var z = value1.z - value2.z;\r\n          var w = value1.w - value2.w;\r\n          return x * x + y * y + z * z + w * w;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\r\n       * @param value1 - value to calulate the center between\r\n       * @param value2 - value to calulate the center between\r\n       * @returns the center between the two vectors\r\n       */\r\n      Vector4.Center = function (value1, value2) {\r\n          var center = Vector4.Add(value1, value2);\r\n          center.scaleInPlace(0.5);\r\n          return center;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\r\n       * This methods computes transformed normalized direction vectors only.\r\n       * @param vector - the vector to transform\r\n       * @param transformation - the transformation matrix to apply\r\n       * @returns the new vector\r\n       */\r\n      Vector4.TransformNormal = function (vector, transformation) {\r\n          var result = Vector4.Zero();\r\n          Vector4.TransformNormalToRef(vector, transformation, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\r\n       * This methods computes transformed normalized direction vectors only.\r\n       * @param vector - the vector to transform\r\n       * @param transformation - the transformation matrix to apply\r\n       * @param result - the vector to store the result in\r\n       */\r\n      Vector4.TransformNormalToRef = function (vector, transformation, result) {\r\n          var m = transformation.m;\r\n          var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\r\n          var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\r\n          var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\r\n          result.x = x;\r\n          result.y = y;\r\n          result.z = z;\r\n          result.w = vector.w;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\r\n       * This methods computes transformed normalized direction vectors only.\r\n       * @param x - value to transform\r\n       * @param y - value to transform\r\n       * @param z - value to transform\r\n       * @param w - value to transform\r\n       * @param transformation - the transformation matrix to apply\r\n       * @param result - the vector to store the results in\r\n       */\r\n      Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\r\n          var m = transformation.m;\r\n          result.x = x * m[0] + y * m[4] + z * m[8];\r\n          result.y = x * m[1] + y * m[5] + z * m[9];\r\n          result.z = x * m[2] + y * m[6] + z * m[10];\r\n          result.w = w;\r\n      };\r\n      /**\r\n       * Returns the string with the Vector4 coordinates.\r\n       * @returns a string containing all the vector values\r\n       */\r\n      Vector4.prototype.toString = function () {\r\n          return '{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}';\r\n      };\r\n      /**\r\n       * Returns the string \"Vector4\".\r\n       * @returns \"Vector4\"\r\n       */\r\n      Vector4.prototype.getClassName = function () {\r\n          return 'Vector4';\r\n      };\r\n      /**\r\n       * Returns the Vector4 hash code.\r\n       * @returns a unique hash code\r\n       */\r\n      Vector4.prototype.getHashCode = function () {\r\n          var hash = this.x || 0;\r\n          hash = (hash * 397) ^ (this.y || 0);\r\n          hash = (hash * 397) ^ (this.z || 0);\r\n          hash = (hash * 397) ^ (this.w || 0);\r\n          return hash;\r\n      };\r\n      // Operators\r\n      /**\r\n       * Returns a new array populated with 4 elements : the Vector4 coordinates.\r\n       * @returns the resulting array\r\n       */\r\n      Vector4.prototype.asArray = function () {\r\n          var result = new Array();\r\n          this.toArray(result, 0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Populates the given array from the given index with the Vector4 coordinates.\r\n       * @param array - array to populate\r\n       * @param index - index of the array to start at (default: 0)\r\n       * @returns the Vector4.\r\n       */\r\n      Vector4.prototype.toArray = function (array, index) {\r\n          if (index === void 0) { index = 0; }\r\n          array[index] = this.x;\r\n          array[index + 1] = this.y;\r\n          array[index + 2] = this.z;\r\n          array[index + 3] = this.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Adds the given vector to the current Vector4.\r\n       * @param otherVector - the vector to add\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.addInPlace = function (otherVector) {\r\n          this.x += otherVector.x;\r\n          this.y += otherVector.y;\r\n          this.z += otherVector.z;\r\n          this.w += otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\r\n       * @param otherVector - the vector to add\r\n       * @returns the resulting vector\r\n       */\r\n      Vector4.prototype.add = function (otherVector) {\r\n          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\r\n       * @param otherVector - the vector to add\r\n       * @param result - the vector to store the result\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.addToRef = function (otherVector, result) {\r\n          result.x = this.x + otherVector.x;\r\n          result.y = this.y + otherVector.y;\r\n          result.z = this.z + otherVector.z;\r\n          result.w = this.w + otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Subtract in place the given vector from the current Vector4.\r\n       * @param otherVector - the vector to subtract\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.subtractInPlace = function (otherVector) {\r\n          this.x -= otherVector.x;\r\n          this.y -= otherVector.y;\r\n          this.z -= otherVector.z;\r\n          this.w -= otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\r\n       * @param otherVector - the vector to add\r\n       * @returns the new vector with the result\r\n       */\r\n      Vector4.prototype.subtract = function (otherVector) {\r\n          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\r\n       * @param otherVector - the vector to subtract\r\n       * @param result - the vector to store the result\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.subtractToRef = function (otherVector, result) {\r\n          result.x = this.x - otherVector.x;\r\n          result.y = this.y - otherVector.y;\r\n          result.z = this.z - otherVector.z;\r\n          result.w = this.w - otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n       */\r\n      /**\r\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n       * @param x - value to subtract\r\n       * @param y - value to subtract\r\n       * @param z - value to subtract\r\n       * @param w - value to subtract\r\n       * @returns new vector containing the result\r\n       */\r\n      Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\r\n          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n       * @param x - value to subtract\r\n       * @param y - value to subtract\r\n       * @param z - value to subtract\r\n       * @param w - value to subtract\r\n       * @param result - the vector to store the result in\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\r\n          result.x = this.x - x;\r\n          result.y = this.y - y;\r\n          result.z = this.z - z;\r\n          result.w = this.w - w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the current Vector4 negated coordinates.\r\n       * @returns a new vector with the negated values\r\n       */\r\n      Vector4.prototype.negate = function () {\r\n          return new Vector4(-this.x, -this.y, -this.z, -this.w);\r\n      };\r\n      /**\r\n       * Multiplies the current Vector4 coordinates by scale (float).\r\n       * @param scale - the number to scale with\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.scaleInPlace = function (scale) {\r\n          this.x *= scale;\r\n          this.y *= scale;\r\n          this.z *= scale;\r\n          this.w *= scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\r\n       * @param scale - the number to scale with\r\n       * @returns a new vector with the result\r\n       */\r\n      Vector4.prototype.scale = function (scale) {\r\n          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\r\n       * @param scale - the number to scale with\r\n       * @param result - a vector to store the result in\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.scaleToRef = function (scale, result) {\r\n          result.x = this.x * scale;\r\n          result.y = this.y * scale;\r\n          result.z = this.z * scale;\r\n          result.w = this.w * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current Vector4 values by a factor and add the result to a given Vector4\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Vector4 object where to store the result\r\n       * @returns the unmodified current Vector4\r\n       */\r\n      Vector4.prototype.scaleAndAddToRef = function (scale, result) {\r\n          result.x += this.x * scale;\r\n          result.y += this.y * scale;\r\n          result.z += this.z * scale;\r\n          result.w += this.w * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\r\n       * @param otherVector - the vector to compare against\r\n       * @returns true if they are equal\r\n       */\r\n      Vector4.prototype.equals = function (otherVector) {\r\n          return (otherVector &&\r\n              this.x === otherVector.x &&\r\n              this.y === otherVector.y &&\r\n              this.z === otherVector.z &&\r\n              this.w === otherVector.w);\r\n      };\r\n      /**\r\n       * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\r\n       * @param otherVector - vector to compare against\r\n       * @param epsilon - (Default: very small number)\r\n       * @returns true if they are equal\r\n       */\r\n      Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\r\n          if (epsilon === void 0) { epsilon = Epsilon; }\r\n          return (otherVector &&\r\n              Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\r\n              Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\r\n              Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\r\n              Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\r\n      };\r\n      /**\r\n       * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\r\n       * @param x - x value to compare against\r\n       * @param y - y value to compare against\r\n       * @param z - z value to compare against\r\n       * @param w - w value to compare against\r\n       * @returns true if equal\r\n       */\r\n      Vector4.prototype.equalsToFloats = function (x, y, z, w) {\r\n          return this.x === x && this.y === y && this.z === z && this.w === w;\r\n      };\r\n      /**\r\n       * Multiplies in place the current Vector4 by the given one.\r\n       * @param otherVector - vector to multiple with\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.multiplyInPlace = function (otherVector) {\r\n          this.x *= otherVector.x;\r\n          this.y *= otherVector.y;\r\n          this.z *= otherVector.z;\r\n          this.w *= otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\r\n       * @param otherVector - vector to multiple with\r\n       * @returns resulting new vector\r\n       */\r\n      Vector4.prototype.multiply = function (otherVector) {\r\n          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\r\n       * @param otherVector - vector to multiple with\r\n       * @param result - vector to store the result\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.multiplyToRef = function (otherVector, result) {\r\n          result.x = this.x * otherVector.x;\r\n          result.y = this.y * otherVector.y;\r\n          result.z = this.z * otherVector.z;\r\n          result.w = this.w * otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\r\n       * @param x - x value multiply with\r\n       * @param y - y value multiply with\r\n       * @param z - z value multiply with\r\n       * @param w - w value multiply with\r\n       * @returns resulting new vector\r\n       */\r\n      Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\r\n          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\r\n      };\r\n      /**\r\n       * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\r\n       * @param otherVector - vector to devide with\r\n       * @returns resulting new vector\r\n       */\r\n      Vector4.prototype.divide = function (otherVector) {\r\n          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\r\n      };\r\n      /**\r\n       * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\r\n       * @param otherVector - vector to devide with\r\n       * @param result - vector to store the result\r\n       * @returns the current Vector4.\r\n       */\r\n      Vector4.prototype.divideToRef = function (otherVector, result) {\r\n          result.x = this.x / otherVector.x;\r\n          result.y = this.y / otherVector.y;\r\n          result.z = this.z / otherVector.z;\r\n          result.w = this.w / otherVector.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Divides the current Vector3 coordinates by the given ones.\r\n       * @param otherVector - vector to devide with\r\n       * @returns the updated Vector3.\r\n       */\r\n      Vector4.prototype.divideInPlace = function (otherVector) {\r\n          return this.divideToRef(otherVector, this);\r\n      };\r\n      /**\r\n       * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\r\n       * @param other - defines the second operand\r\n       * @returns the current updated Vector4\r\n       */\r\n      Vector4.prototype.minimizeInPlace = function (other) {\r\n          if (other.x < this.x) {\r\n              this.x = other.x;\r\n          }\r\n          if (other.y < this.y) {\r\n              this.y = other.y;\r\n          }\r\n          if (other.z < this.z) {\r\n              this.z = other.z;\r\n          }\r\n          if (other.w < this.w) {\r\n              this.w = other.w;\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\r\n       * @param other - defines the second operand\r\n       * @returns the current updated Vector4\r\n       */\r\n      Vector4.prototype.maximizeInPlace = function (other) {\r\n          if (other.x > this.x) {\r\n              this.x = other.x;\r\n          }\r\n          if (other.y > this.y) {\r\n              this.y = other.y;\r\n          }\r\n          if (other.z > this.z) {\r\n              this.z = other.z;\r\n          }\r\n          if (other.w > this.w) {\r\n              this.w = other.w;\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector4 from current Vector4 floored values\r\n       * @returns a new Vector4\r\n       */\r\n      Vector4.prototype.floor = function () {\r\n          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\r\n      };\r\n      /**\r\n       * Gets a new Vector4 from current Vector3 floored values\r\n       * @returns a new Vector4\r\n       */\r\n      Vector4.prototype.fract = function () {\r\n          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\r\n      };\r\n      // Properties\r\n      /**\r\n       * Returns the Vector4 length (float).\r\n       * @returns the length\r\n       */\r\n      Vector4.prototype.length = function () {\r\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\r\n      };\r\n      /**\r\n       * Returns the Vector4 squared length (float).\r\n       * @returns the length squared\r\n       */\r\n      Vector4.prototype.lengthSquared = function () {\r\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n      };\r\n      // Methods\r\n      /**\r\n       * Normalizes in place the Vector4.\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.normalize = function () {\r\n          var len = this.length();\r\n          if (len === 0) {\r\n              return this;\r\n          }\r\n          return this.scaleInPlace(1.0 / len);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\r\n       * @returns this converted to a new vector3\r\n       */\r\n      Vector4.prototype.toVector3 = function () {\r\n          return new Vector3(this.x, this.y, this.z);\r\n      };\r\n      /**\r\n       * Returns a new Vector4 copied from the current one.\r\n       * @returns the new cloned vector\r\n       */\r\n      Vector4.prototype.clone = function () {\r\n          return new Vector4(this.x, this.y, this.z, this.w);\r\n      };\r\n      /**\r\n       * Updates the current Vector4 with the given one coordinates.\r\n       * @param source - the source vector to copy from\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.copyFrom = function (source) {\r\n          this.x = source.x;\r\n          this.y = source.y;\r\n          this.z = source.z;\r\n          this.w = source.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current Vector4 coordinates with the given floats.\r\n       * @param x - float to copy from\r\n       * @param y - float to copy from\r\n       * @param z - float to copy from\r\n       * @param w - float to copy from\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.copyFromFloats = function (x, y, z, w) {\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n          this.w = w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current Vector4 coordinates with the given floats.\r\n       * @param x - float to set from\r\n       * @param y - float to set from\r\n       * @param z - float to set from\r\n       * @param w - float to set from\r\n       * @returns the updated Vector4.\r\n       */\r\n      Vector4.prototype.set = function (x, y, z, w) {\r\n          return this.copyFromFloats(x, y, z, w);\r\n      };\r\n      /**\r\n       * Copies the given float to the current Vector3 coordinates\r\n       * @param v - defines the x, y, z and w coordinates of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector4.prototype.setAll = function (v) {\r\n          this.x = this.y = this.z = this.w = v;\r\n          return this;\r\n      };\r\n      return Vector4;\r\n  }());\n\n  /**\r\n   * Class used to store matrix data (4x4)\r\n   * @public\r\n   */\r\n  var Matrix = /** @class */ (function () {\r\n      /**\r\n       * Creates an empty matrix (filled with zeros)\r\n       */\r\n      function Matrix() {\r\n          this._isIdentity = false;\r\n          this._isIdentityDirty = true;\r\n          this._isIdentity3x2 = true;\r\n          this._isIdentity3x2Dirty = true;\r\n          this._m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n          this._updateIdentityStatus(false);\r\n      }\r\n      Object.defineProperty(Matrix.prototype, \"m\", {\r\n          /**\r\n           * Gets the internal data of the matrix\r\n           */\r\n          get: function () {\r\n              return this._m;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Matrix, \"IdentityReadOnly\", {\r\n          /**\r\n           * Gets an identity matrix that must not be updated\r\n           */\r\n          get: function () {\r\n              return Matrix._identityReadOnly;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // Statics\r\n      /**\r\n       * Creates a matrix from an array\r\n       * @param array - defines the source array\r\n       * @param offset - defines an offset in the source array\r\n       * @returns a new Matrix set from the starting index of the given array\r\n       */\r\n      Matrix.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          var result = new Matrix();\r\n          Matrix.FromArrayToRef(array, offset, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Copy the content of an array into a given matrix\r\n       * @param array - defines the source array\r\n       * @param offset - defines an offset in the source array\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.FromArrayToRef = function (array, offset, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] = array[index + offset];\r\n          }\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Stores an array into a matrix after having multiplied each component by a given factor\r\n       * @param array - defines the source array\r\n       * @param offset - defines the offset in the source array\r\n       * @param scale - defines the scaling factor\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.FromFloatArrayToRefScaled = function (array, offset, scale, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] = array[index + offset] * scale;\r\n          }\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Stores a list of values (16) inside a given matrix\r\n       * @param initialM11 - defines 1st value of 1st row\r\n       * @param initialM12 - defines 2nd value of 1st row\r\n       * @param initialM13 - defines 3rd value of 1st row\r\n       * @param initialM14 - defines 4th value of 1st row\r\n       * @param initialM21 - defines 1st value of 2nd row\r\n       * @param initialM22 - defines 2nd value of 2nd row\r\n       * @param initialM23 - defines 3rd value of 2nd row\r\n       * @param initialM24 - defines 4th value of 2nd row\r\n       * @param initialM31 - defines 1st value of 3rd row\r\n       * @param initialM32 - defines 2nd value of 3rd row\r\n       * @param initialM33 - defines 3rd value of 3rd row\r\n       * @param initialM34 - defines 4th value of 3rd row\r\n       * @param initialM41 - defines 1st value of 4th row\r\n       * @param initialM42 - defines 2nd value of 4th row\r\n       * @param initialM43 - defines 3rd value of 4th row\r\n       * @param initialM44 - defines 4th value of 4th row\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\r\n          var m = result._m;\r\n          m[0] = initialM11;\r\n          m[1] = initialM12;\r\n          m[2] = initialM13;\r\n          m[3] = initialM14;\r\n          m[4] = initialM21;\r\n          m[5] = initialM22;\r\n          m[6] = initialM23;\r\n          m[7] = initialM24;\r\n          m[8] = initialM31;\r\n          m[9] = initialM32;\r\n          m[10] = initialM33;\r\n          m[11] = initialM34;\r\n          m[12] = initialM41;\r\n          m[13] = initialM42;\r\n          m[14] = initialM43;\r\n          m[15] = initialM44;\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Creates new matrix from a list of values (16)\r\n       * @param initialM11 - defines 1st value of 1st row\r\n       * @param initialM12 - defines 2nd value of 1st row\r\n       * @param initialM13 - defines 3rd value of 1st row\r\n       * @param initialM14 - defines 4th value of 1st row\r\n       * @param initialM21 - defines 1st value of 2nd row\r\n       * @param initialM22 - defines 2nd value of 2nd row\r\n       * @param initialM23 - defines 3rd value of 2nd row\r\n       * @param initialM24 - defines 4th value of 2nd row\r\n       * @param initialM31 - defines 1st value of 3rd row\r\n       * @param initialM32 - defines 2nd value of 3rd row\r\n       * @param initialM33 - defines 3rd value of 3rd row\r\n       * @param initialM34 - defines 4th value of 3rd row\r\n       * @param initialM41 - defines 1st value of 4th row\r\n       * @param initialM42 - defines 2nd value of 4th row\r\n       * @param initialM43 - defines 3rd value of 4th row\r\n       * @param initialM44 - defines 4th value of 4th row\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\r\n          var result = new Matrix();\r\n          var m = result._m;\r\n          m[0] = initialM11;\r\n          m[1] = initialM12;\r\n          m[2] = initialM13;\r\n          m[3] = initialM14;\r\n          m[4] = initialM21;\r\n          m[5] = initialM22;\r\n          m[6] = initialM23;\r\n          m[7] = initialM24;\r\n          m[8] = initialM31;\r\n          m[9] = initialM32;\r\n          m[10] = initialM33;\r\n          m[11] = initialM34;\r\n          m[12] = initialM41;\r\n          m[13] = initialM42;\r\n          m[14] = initialM43;\r\n          m[15] = initialM44;\r\n          result._markAsUpdated();\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n       * @param scale - defines the scale vector3\r\n       * @param rotation - defines the rotation quaternion\r\n       * @param translation - defines the translation vector3\r\n       * @returns a new matrix\r\n       */\r\n      Matrix.Compose = function (scale, rotation, translation) {\r\n          var result = new Matrix();\r\n          Matrix.ComposeToRef(scale, rotation, translation, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n       * @param scale - defines the scale vector3\r\n       * @param rotation - defines the rotation quaternion\r\n       * @param translation - defines the translation vector3\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.ComposeToRef = function (scale, rotation, translation, result) {\r\n          Matrix.ScalingToRef(scale.x, scale.y, scale.z, MathTmp.Matrix[1]);\r\n          rotation.toRotationMatrix(MathTmp.Matrix[0]);\r\n          MathTmp.Matrix[1].multiplyToRef(MathTmp.Matrix[0], result);\r\n          result.setTranslation(translation);\r\n      };\r\n      /**\r\n       * Creates a new identity matrix\r\n       * @returns a new identity matrix\r\n       */\r\n      Matrix.Identity = function () {\r\n          var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\r\n          identity._updateIdentityStatus(true);\r\n          return identity;\r\n      };\r\n      /**\r\n       * Creates a new identity matrix and stores the result in a given matrix\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.IdentityToRef = function (result) {\r\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          result._updateIdentityStatus(true);\r\n      };\r\n      /**\r\n       * Creates a new zero matrix\r\n       * @returns a new zero matrix\r\n       */\r\n      Matrix.Zero = function () {\r\n          var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\r\n          zero._updateIdentityStatus(false);\r\n          return zero;\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the X axis\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.RotationX = function (angle) {\r\n          var result = new Matrix();\r\n          Matrix.RotationXToRef(angle, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new matrix as the invert of a given matrix\r\n       * @param source - defines the source matrix\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.Invert = function (source) {\r\n          var result = new Matrix();\r\n          source.invertToRef(result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.RotationXToRef = function (angle, result) {\r\n          var s = Math.sin(angle);\r\n          var c = Math.cos(angle);\r\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          result._updateIdentityStatus(c === 1 && s === 0);\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.RotationY = function (angle) {\r\n          var result = new Matrix();\r\n          Matrix.RotationYToRef(angle, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.RotationYToRef = function (angle, result) {\r\n          var s = Math.sin(angle);\r\n          var c = Math.cos(angle);\r\n          Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          result._updateIdentityStatus(c === 1 && s === 0);\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.RotationZ = function (angle) {\r\n          var result = new Matrix();\r\n          Matrix.RotationZToRef(angle, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.RotationZToRef = function (angle, result) {\r\n          var s = Math.sin(angle);\r\n          var c = Math.cos(angle);\r\n          Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          result._updateIdentityStatus(c === 1 && s === 0);\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the given axis\r\n       * @param axis - defines the axis to use\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.RotationAxis = function (axis, angle) {\r\n          var result = new Matrix();\r\n          Matrix.RotationAxisToRef(axis, angle, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\r\n       * @param axis - defines the axis to use\r\n       * @param angle - defines the angle (in radians) to use\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.RotationAxisToRef = function (axis, angle, result) {\r\n          var s = Math.sin(-angle);\r\n          var c = Math.cos(-angle);\r\n          var c1 = 1 - c;\r\n          axis.normalize();\r\n          var m = result._m;\r\n          m[0] = axis.x * axis.x * c1 + c;\r\n          m[1] = axis.x * axis.y * c1 - axis.z * s;\r\n          m[2] = axis.x * axis.z * c1 + axis.y * s;\r\n          m[3] = 0.0;\r\n          m[4] = axis.y * axis.x * c1 + axis.z * s;\r\n          m[5] = axis.y * axis.y * c1 + c;\r\n          m[6] = axis.y * axis.z * c1 - axis.x * s;\r\n          m[7] = 0.0;\r\n          m[8] = axis.z * axis.x * c1 - axis.y * s;\r\n          m[9] = axis.z * axis.y * c1 + axis.x * s;\r\n          m[10] = axis.z * axis.z * c1 + c;\r\n          m[11] = 0.0;\r\n          m[12] = 0.0;\r\n          m[13] = 0.0;\r\n          m[14] = 0.0;\r\n          m[15] = 1.0;\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Creates a rotation matrix\r\n       * @param yaw - defines the yaw angle in radians (Y axis)\r\n       * @param pitch - defines the pitch angle in radians (X axis)\r\n       * @param roll - defines the roll angle in radians (X axis)\r\n       * @returns the new rotation matrix\r\n       */\r\n      Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\r\n          var result = new Matrix();\r\n          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a rotation matrix and stores it in a given matrix\r\n       * @param yaw - defines the yaw angle in radians (Y axis)\r\n       * @param pitch - defines the pitch angle in radians (X axis)\r\n       * @param roll - defines the roll angle in radians (X axis)\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\r\n          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\r\n          MathTmp.Quaternion[0].toRotationMatrix(result);\r\n      };\r\n      /**\r\n       * Creates a scaling matrix\r\n       * @param x - defines the scale factor on X axis\r\n       * @param y - defines the scale factor on Y axis\r\n       * @param z - defines the scale factor on Z axis\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.Scaling = function (x, y, z) {\r\n          var result = new Matrix();\r\n          Matrix.ScalingToRef(x, y, z, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a scaling matrix and stores it in a given matrix\r\n       * @param x - defines the scale factor on X axis\r\n       * @param y - defines the scale factor on Y axis\r\n       * @param z - defines the scale factor on Z axis\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.ScalingToRef = function (x, y, z, result) {\r\n          Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\r\n      };\r\n      /**\r\n       * Creates a translation matrix\r\n       * @param x - defines the translation on X axis\r\n       * @param y - defines the translation on Y axis\r\n       * @param z - defines the translationon Z axis\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.Translation = function (x, y, z) {\r\n          var result = new Matrix();\r\n          Matrix.TranslationToRef(x, y, z, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a translation matrix and stores it in a given matrix\r\n       * @param x - defines the translation on X axis\r\n       * @param y - defines the translation on Y axis\r\n       * @param z - defines the translationon Z axis\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.TranslationToRef = function (x, y, z, result) {\r\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\r\n          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\r\n      };\r\n      /**\r\n       * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n       * @param startValue - defines the start value\r\n       * @param endValue - defines the end value\r\n       * @param gradient - defines the gradient factor\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.Lerp = function (startValue, endValue, gradient) {\r\n          var result = new Matrix();\r\n          Matrix.LerpToRef(startValue, endValue, gradient, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n       * @param startValue - defines the start value\r\n       * @param endValue - defines the end value\r\n       * @param gradient - defines the gradient factor\r\n       * @param result - defines the Matrix object where to store data\r\n       */\r\n      Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] = startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\r\n          }\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Builds a new matrix whose values are computed by:\r\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n       * @param startValue - defines the first matrix\r\n       * @param endValue - defines the second matrix\r\n       * @param gradient - defines the gradient between the two matrices\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\r\n          var result = new Matrix();\r\n          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Update a matrix to values which are computed by:\r\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n       * @param startValue - defines the first matrix\r\n       * @param endValue - defines the second matrix\r\n       * @param gradient - defines the gradient between the two matrices\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\r\n          var startScale = MathTmp.Vector3[0];\r\n          var startRotation = MathTmp.Quaternion[0];\r\n          var startTranslation = MathTmp.Vector3[1];\r\n          startValue.decompose(startScale, startRotation, startTranslation);\r\n          var endScale = MathTmp.Vector3[2];\r\n          var endRotation = MathTmp.Quaternion[1];\r\n          var endTranslation = MathTmp.Vector3[3];\r\n          endValue.decompose(endScale, endRotation, endTranslation);\r\n          var resultScale = MathTmp.Vector3[4];\r\n          Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\r\n          var resultRotation = MathTmp.Quaternion[2];\r\n          Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\r\n          var resultTranslation = MathTmp.Vector3[5];\r\n          Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\r\n          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\r\n      };\r\n      /**\r\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n       * This function works in left handed mode\r\n       * @param eye - defines the final position of the entity\r\n       * @param target - defines where the entity should look at\r\n       * @param up - defines the up vector for the entity\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.LookAtLH = function (eye, target, up) {\r\n          var result = new Matrix();\r\n          Matrix.LookAtLHToRef(eye, target, up, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n       * This function works in left handed mode\r\n       * @param eye - defines the final position of the entity\r\n       * @param target - defines where the entity should look at\r\n       * @param up - defines the up vector for the entity\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.LookAtLHToRef = function (eye, target, up, result) {\r\n          var xAxis = MathTmp.Vector3[0];\r\n          var yAxis = MathTmp.Vector3[1];\r\n          var zAxis = MathTmp.Vector3[2];\r\n          // Z axis\r\n          target.subtractToRef(eye, zAxis);\r\n          zAxis.normalize();\r\n          // X axis\r\n          Vector3.CrossToRef(up, zAxis, xAxis);\r\n          var xSquareLength = xAxis.lengthSquared();\r\n          if (xSquareLength === 0) {\r\n              xAxis.x = 1.0;\r\n          }\r\n          else {\r\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\r\n          }\r\n          // Y axis\r\n          Vector3.CrossToRef(zAxis, xAxis, yAxis);\r\n          yAxis.normalize();\r\n          // Eye angles\r\n          var ex = -Vector3.Dot(xAxis, eye);\r\n          var ey = -Vector3.Dot(yAxis, eye);\r\n          var ez = -Vector3.Dot(zAxis, eye);\r\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\r\n      };\r\n      /**\r\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n       * This function works in right handed mode\r\n       * @param eye - defines the final position of the entity\r\n       * @param target - defines where the entity should look at\r\n       * @param up - defines the up vector for the entity\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.LookAtRH = function (eye, target, up) {\r\n          var result = new Matrix();\r\n          Matrix.LookAtRHToRef(eye, target, up, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n       * This function works in right handed mode\r\n       * @param eye - defines the final position of the entity\r\n       * @param target - defines where the entity should look at\r\n       * @param up - defines the up vector for the entity\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.LookAtRHToRef = function (eye, target, up, result) {\r\n          var xAxis = MathTmp.Vector3[0];\r\n          var yAxis = MathTmp.Vector3[1];\r\n          var zAxis = MathTmp.Vector3[2];\r\n          // Z axis\r\n          eye.subtractToRef(target, zAxis);\r\n          zAxis.normalize();\r\n          // X axis\r\n          Vector3.CrossToRef(up, zAxis, xAxis);\r\n          var xSquareLength = xAxis.lengthSquared();\r\n          if (xSquareLength === 0) {\r\n              xAxis.x = 1.0;\r\n          }\r\n          else {\r\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\r\n          }\r\n          // Y axis\r\n          Vector3.CrossToRef(zAxis, xAxis, yAxis);\r\n          yAxis.normalize();\r\n          // Eye angles\r\n          var ex = -Vector3.Dot(xAxis, eye);\r\n          var ey = -Vector3.Dot(yAxis, eye);\r\n          var ez = -Vector3.Dot(zAxis, eye);\r\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\r\n      };\r\n      /**\r\n       * Create a left-handed orthographic projection matrix\r\n       * @param width - defines the viewport width\r\n       * @param height - defines the viewport height\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a left-handed orthographic projection matrix\r\n       */\r\n      Matrix.OrthoLH = function (width, height, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Store a left-handed orthographic projection to a given matrix\r\n       * @param width - defines the viewport width\r\n       * @param height - defines the viewport height\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\r\n          var n = znear;\r\n          var f = zfar;\r\n          var a = 2.0 / width;\r\n          var b = 2.0 / height;\r\n          var c = 2.0 / (f - n);\r\n          var d = -(f + n) / (f - n);\r\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\r\n          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\r\n      };\r\n      /**\r\n       * Create a left-handed orthographic projection matrix\r\n       * @param left - defines the viewport left coordinate\r\n       * @param right - defines the viewport right coordinate\r\n       * @param bottom - defines the viewport bottom coordinate\r\n       * @param top - defines the viewport top coordinate\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a left-handed orthographic projection matrix\r\n       */\r\n      Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Stores a left-handed orthographic projection into a given matrix\r\n       * @param left - defines the viewport left coordinate\r\n       * @param right - defines the viewport right coordinate\r\n       * @param bottom - defines the viewport bottom coordinate\r\n       * @param top - defines the viewport top coordinate\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\r\n          var n = znear;\r\n          var f = zfar;\r\n          var a = 2.0 / (right - left);\r\n          var b = 2.0 / (top - bottom);\r\n          var c = 2.0 / (f - n);\r\n          var d = -(f + n) / (f - n);\r\n          var i0 = (left + right) / (left - right);\r\n          var i1 = (top + bottom) / (bottom - top);\r\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Creates a right-handed orthographic projection matrix\r\n       * @param left - defines the viewport left coordinate\r\n       * @param right - defines the viewport right coordinate\r\n       * @param bottom - defines the viewport bottom coordinate\r\n       * @param top - defines the viewport top coordinate\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a right-handed orthographic projection matrix\r\n       */\r\n      Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Stores a right-handed orthographic projection into a given matrix\r\n       * @param left - defines the viewport left coordinate\r\n       * @param right - defines the viewport right coordinate\r\n       * @param bottom - defines the viewport bottom coordinate\r\n       * @param top - defines the viewport top coordinate\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\r\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\r\n          result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\r\n      };\r\n      /**\r\n       * Creates a left-handed perspective projection matrix\r\n       * @param width - defines the viewport width\r\n       * @param height - defines the viewport height\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a left-handed perspective projection matrix\r\n       */\r\n      Matrix.PerspectiveLH = function (width, height, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          var n = znear;\r\n          var f = zfar;\r\n          var a = (2.0 * n) / width;\r\n          var b = (2.0 * n) / height;\r\n          var c = (f + n) / (f - n);\r\n          var d = (-2.0 * f * n) / (f - n);\r\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\r\n          matrix._updateIdentityStatus(false);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Creates a left-handed perspective projection matrix\r\n       * @param fov - defines the horizontal field of view\r\n       * @param aspect - defines the aspect ratio\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a left-handed perspective projection matrix\r\n       */\r\n      Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Stores a left-handed perspective projection into a given matrix\r\n       * @param fov - defines the horizontal field of view\r\n       * @param aspect - defines the aspect ratio\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\r\n       */\r\n      Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\r\n          if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\r\n          var n = znear;\r\n          var f = zfar;\r\n          var t = 1.0 / Math.tan(fov * 0.5);\r\n          var a = isVerticalFovFixed ? t / aspect : t;\r\n          var b = isVerticalFovFixed ? t : t * aspect;\r\n          var c = (f + n) / (f - n);\r\n          var d = (-2.0 * f * n) / (f - n);\r\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\r\n          result._updateIdentityStatus(false);\r\n      };\r\n      /**\r\n       * Creates a right-handed perspective projection matrix\r\n       * @param fov - defines the horizontal field of view\r\n       * @param aspect - defines the aspect ratio\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @returns a new matrix as a right-handed perspective projection matrix\r\n       */\r\n      Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\r\n          var matrix = new Matrix();\r\n          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Stores a right-handed perspective projection into a given matrix\r\n       * @param fov - defines the horizontal field of view\r\n       * @param aspect - defines the aspect ratio\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\r\n       */\r\n      Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\r\n          /* alternatively this could be expressed as:\r\n          //    m = PerspectiveFovLHToRef\r\n          //    m[10] *= -1.0;\r\n          //    m[11] *= -1.0;\r\n          */\r\n          if (isVerticalFovFixed === void 0) { isVerticalFovFixed = true; }\r\n          var n = znear;\r\n          var f = zfar;\r\n          var t = 1.0 / Math.tan(fov * 0.5);\r\n          var a = isVerticalFovFixed ? t / aspect : t;\r\n          var b = isVerticalFovFixed ? t : t * aspect;\r\n          var c = -(f + n) / (f - n);\r\n          var d = (-2 * f * n) / (f - n);\r\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\r\n          result._updateIdentityStatus(false);\r\n      };\r\n      /**\r\n       * Stores a perspective projection for WebVR info a given matrix\r\n       * @param fov - defines the field of view\r\n       * @param znear - defines the near clip plane\r\n       * @param zfar - defines the far clip plane\r\n       * @param result - defines the target matrix\r\n       * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\r\n       */\r\n      Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\r\n          if (rightHanded === void 0) { rightHanded = false; }\r\n          var rightHandedFactor = rightHanded ? -1 : 1;\r\n          var upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\r\n          var downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\r\n          var leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\r\n          var rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\r\n          var xScale = 2.0 / (leftTan + rightTan);\r\n          var yScale = 2.0 / (upTan + downTan);\r\n          var m = result._m;\r\n          m[0] = xScale;\r\n          m[1] = m[2] = m[3] = m[4] = 0.0;\r\n          m[5] = yScale;\r\n          m[6] = m[7] = 0.0;\r\n          m[8] = (leftTan - rightTan) * xScale * 0.5;\r\n          m[9] = -((upTan - downTan) * yScale * 0.5);\r\n          m[10] = -zfar / (znear - zfar);\r\n          m[11] = 1.0 * rightHandedFactor;\r\n          m[12] = m[13] = m[15] = 0.0;\r\n          m[14] = -(2.0 * zfar * znear) / (zfar - znear);\r\n          result._markAsUpdated();\r\n      };\r\n      /**\r\n       * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\r\n       * @param matrix - defines the matrix to use\r\n       * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\r\n       */\r\n      Matrix.GetAsMatrix2x2 = function (matrix) {\r\n          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\r\n      };\r\n      /**\r\n       * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\r\n       * @param matrix - defines the matrix to use\r\n       * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\r\n       */\r\n      Matrix.GetAsMatrix3x3 = function (matrix) {\r\n          return [\r\n              matrix._m[0],\r\n              matrix._m[1],\r\n              matrix._m[2],\r\n              matrix._m[4],\r\n              matrix._m[5],\r\n              matrix._m[6],\r\n              matrix._m[8],\r\n              matrix._m[9],\r\n              matrix._m[10]\r\n          ];\r\n      };\r\n      /**\r\n       * Compute the transpose of a given matrix\r\n       * @param matrix - defines the matrix to transpose\r\n       * @returns the new matrix\r\n       */\r\n      Matrix.Transpose = function (matrix) {\r\n          var result = new Matrix();\r\n          Matrix.TransposeToRef(matrix, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Compute the transpose of a matrix and store it in a target matrix\r\n       * @param matrix - defines the matrix to transpose\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.TransposeToRef = function (matrix, result) {\r\n          var rm = result._m;\r\n          var mm = matrix._m;\r\n          rm[0] = mm[0];\r\n          rm[1] = mm[4];\r\n          rm[2] = mm[8];\r\n          rm[3] = mm[12];\r\n          rm[4] = mm[1];\r\n          rm[5] = mm[5];\r\n          rm[6] = mm[9];\r\n          rm[7] = mm[13];\r\n          rm[8] = mm[2];\r\n          rm[9] = mm[6];\r\n          rm[10] = mm[10];\r\n          rm[11] = mm[14];\r\n          rm[12] = mm[3];\r\n          rm[13] = mm[7];\r\n          rm[14] = mm[11];\r\n          rm[15] = mm[15];\r\n          // identity-ness does not change when transposing\r\n          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\r\n      };\r\n      /**\r\n       * Computes a reflection matrix from a plane\r\n       * @param plane - defines the reflection plane\r\n       * @returns a new matrix\r\n       */\r\n      Matrix.Reflection = function (plane) {\r\n          var matrix = new Matrix();\r\n          Matrix.ReflectionToRef(plane, matrix);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Computes a reflection matrix from a plane\r\n       * @param plane - defines the reflection plane\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.ReflectionToRef = function (plane, result) {\r\n          plane.normalize();\r\n          var x = plane.normal.x;\r\n          var y = plane.normal.y;\r\n          var z = plane.normal.z;\r\n          var temp = -2 * x;\r\n          var temp2 = -2 * y;\r\n          var temp3 = -2 * z;\r\n          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\r\n      };\r\n      /**\r\n       * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\r\n       * @param xaxis - defines the value of the 1st axis\r\n       * @param yaxis - defines the value of the 2nd axis\r\n       * @param zaxis - defines the value of the 3rd axis\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\r\n          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n      };\r\n      /**\r\n       * Creates a rotation matrix from a quaternion and stores it in a target matrix\r\n       * @param quat - defines the quaternion to use\r\n       * @param result - defines the target matrix\r\n       */\r\n      Matrix.FromQuaternionToRef = function (quat, result) {\r\n          var xx = quat.x * quat.x;\r\n          var yy = quat.y * quat.y;\r\n          var zz = quat.z * quat.z;\r\n          var xy = quat.x * quat.y;\r\n          var zw = quat.z * quat.w;\r\n          var zx = quat.z * quat.x;\r\n          var yw = quat.y * quat.w;\r\n          var yz = quat.y * quat.z;\r\n          var xw = quat.x * quat.w;\r\n          result._m[0] = 1.0 - 2.0 * (yy + zz);\r\n          result._m[1] = 2.0 * (xy + zw);\r\n          result._m[2] = 2.0 * (zx - yw);\r\n          result._m[3] = 0.0;\r\n          result._m[4] = 2.0 * (xy - zw);\r\n          result._m[5] = 1.0 - 2.0 * (zz + xx);\r\n          result._m[6] = 2.0 * (yz + xw);\r\n          result._m[7] = 0.0;\r\n          result._m[8] = 2.0 * (zx + yw);\r\n          result._m[9] = 2.0 * (yz - xw);\r\n          result._m[10] = 1.0 - 2.0 * (yy + xx);\r\n          result._m[11] = 0.0;\r\n          result._m[12] = 0.0;\r\n          result._m[13] = 0.0;\r\n          result._m[14] = 0.0;\r\n          result._m[15] = 1.0;\r\n          result._markAsUpdated();\r\n      };\r\n      /** @internal */\r\n      Matrix.prototype._markAsUpdated = function () {\r\n          this.updateFlag = Matrix._updateFlagSeed++;\r\n          this._isIdentity = false;\r\n          this._isIdentity3x2 = false;\r\n          this._isIdentityDirty = true;\r\n          this._isIdentity3x2Dirty = true;\r\n      };\r\n      // Properties\r\n      /**\r\n       * Check if the current matrix is identity\r\n       * @returns true is the matrix is the identity matrix\r\n       */\r\n      Matrix.prototype.isIdentity = function () {\r\n          if (this._isIdentityDirty) {\r\n              this._isIdentityDirty = false;\r\n              var m = this._m;\r\n              this._isIdentity =\r\n                  m[0] === 1.0 &&\r\n                      m[1] === 0.0 &&\r\n                      m[2] === 0.0 &&\r\n                      m[3] === 0.0 &&\r\n                      m[4] === 0.0 &&\r\n                      m[5] === 1.0 &&\r\n                      m[6] === 0.0 &&\r\n                      m[7] === 0.0 &&\r\n                      m[8] === 0.0 &&\r\n                      m[9] === 0.0 &&\r\n                      m[10] === 1.0 &&\r\n                      m[11] === 0.0 &&\r\n                      m[12] === 0.0 &&\r\n                      m[13] === 0.0 &&\r\n                      m[14] === 0.0 &&\r\n                      m[15] === 1.0;\r\n          }\r\n          return this._isIdentity;\r\n      };\r\n      /**\r\n       * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\r\n       * @returns true is the matrix is the identity matrix\r\n       */\r\n      Matrix.prototype.isIdentityAs3x2 = function () {\r\n          if (this._isIdentity3x2Dirty) {\r\n              this._isIdentity3x2Dirty = false;\r\n              if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\r\n                  this._isIdentity3x2 = false;\r\n              }\r\n              else if (this._m[1] !== 0.0 ||\r\n                  this._m[2] !== 0.0 ||\r\n                  this._m[3] !== 0.0 ||\r\n                  this._m[4] !== 0.0 ||\r\n                  this._m[6] !== 0.0 ||\r\n                  this._m[7] !== 0.0 ||\r\n                  this._m[8] !== 0.0 ||\r\n                  this._m[9] !== 0.0 ||\r\n                  this._m[10] !== 0.0 ||\r\n                  this._m[11] !== 0.0 ||\r\n                  this._m[12] !== 0.0 ||\r\n                  this._m[13] !== 0.0 ||\r\n                  this._m[14] !== 0.0) {\r\n                  this._isIdentity3x2 = false;\r\n              }\r\n              else {\r\n                  this._isIdentity3x2 = true;\r\n              }\r\n          }\r\n          return this._isIdentity3x2;\r\n      };\r\n      /**\r\n       * Gets the determinant of the matrix\r\n       * @returns the matrix determinant\r\n       */\r\n      Matrix.prototype.determinant = function () {\r\n          if (this._isIdentity === true) {\r\n              return 1;\r\n          }\r\n          var m = this._m;\r\n          // tslint:disable-next-line:one-variable-per-declaration\r\n          var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\r\n          // tslint:disable-next-line:one-variable-per-declaration\r\n          var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\r\n          // tslint:disable-next-line:one-variable-per-declaration\r\n          var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\r\n          // tslint:disable-next-line:one-variable-per-declaration\r\n          var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\r\n          /*\r\n          // https://en.wikipedia.org/wiki/Laplace_expansion\r\n          // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\r\n          // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\r\n          // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\r\n          // where\r\n          //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\r\n          //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\r\n          //\r\n          // Here we do that for the 1st row.\r\n          */\r\n          // tslint:disable:variable-name\r\n          var det_22_33 = m22 * m33 - m32 * m23;\r\n          var det_21_33 = m21 * m33 - m31 * m23;\r\n          var det_21_32 = m21 * m32 - m31 * m22;\r\n          var det_20_33 = m20 * m33 - m30 * m23;\r\n          var det_20_32 = m20 * m32 - m22 * m30;\r\n          var det_20_31 = m20 * m31 - m30 * m21;\r\n          var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\r\n          var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\r\n          var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\r\n          var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\r\n          // tslint:enable:variable-name\r\n          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\r\n      };\r\n      // Methods\r\n      /**\r\n       * Returns the matrix as a FloatArray\r\n       * @returns the matrix underlying array\r\n       */\r\n      Matrix.prototype.toArray = function () {\r\n          return this._m;\r\n      };\r\n      /**\r\n       * Returns the matrix as a FloatArray\r\n       * @returns the matrix underlying array.\r\n       */\r\n      Matrix.prototype.asArray = function () {\r\n          return this._m;\r\n      };\r\n      /**\r\n       * Inverts the current matrix in place\r\n       * @returns the current inverted matrix\r\n       */\r\n      Matrix.prototype.invert = function () {\r\n          this.invertToRef(this);\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets all the matrix elements to zero\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.reset = function () {\r\n          Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\r\n          this._updateIdentityStatus(false);\r\n          return this;\r\n      };\r\n      /**\r\n       * Adds the current matrix with a second one\r\n       * @param other - defines the matrix to add\r\n       * @returns a new matrix as the addition of the current matrix and the given one\r\n       */\r\n      Matrix.prototype.add = function (other) {\r\n          var result = new Matrix();\r\n          this.addToRef(other, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given matrix \"result\" to the addition of the current matrix and the given one\r\n       * @param other - defines the matrix to add\r\n       * @param result - defines the target matrix\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.addToRef = function (other, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] = this._m[index] + other._m[index];\r\n          }\r\n          result._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Adds in place the given matrix to the current matrix\r\n       * @param other - defines the second operand\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.addToSelf = function (other) {\r\n          for (var index = 0; index < 16; index++) {\r\n              this._m[index] += other._m[index];\r\n          }\r\n          this._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the given matrix to the current inverted Matrix\r\n       * @param other - defines the target matrix\r\n       * @returns the unmodified current matrix\r\n       */\r\n      Matrix.prototype.invertToRef = function (other) {\r\n          if (this._isIdentity === true) {\r\n              Matrix.IdentityToRef(other);\r\n              return this;\r\n          }\r\n          // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\r\n          var m = this._m;\r\n          // tslint:disable:one-variable-per-declaration\r\n          var m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\r\n          var m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\r\n          var m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\r\n          var m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\r\n          // tslint:enable:one-variable-per-declaration\r\n          // tslint:disable:variable-name\r\n          var det_22_33 = m22 * m33 - m32 * m23;\r\n          var det_21_33 = m21 * m33 - m31 * m23;\r\n          var det_21_32 = m21 * m32 - m31 * m22;\r\n          var det_20_33 = m20 * m33 - m30 * m23;\r\n          var det_20_32 = m20 * m32 - m22 * m30;\r\n          var det_20_31 = m20 * m31 - m30 * m21;\r\n          var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\r\n          var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\r\n          var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\r\n          var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\r\n          var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\r\n          if (det === 0) {\r\n              // not invertible\r\n              other.copyFrom(this);\r\n              return this;\r\n          }\r\n          var detInv = 1 / det;\r\n          var det_12_33 = m12 * m33 - m32 * m13;\r\n          var det_11_33 = m11 * m33 - m31 * m13;\r\n          var det_11_32 = m11 * m32 - m31 * m12;\r\n          var det_10_33 = m10 * m33 - m30 * m13;\r\n          var det_10_32 = m10 * m32 - m30 * m12;\r\n          var det_10_31 = m10 * m31 - m30 * m11;\r\n          var det_12_23 = m12 * m23 - m22 * m13;\r\n          var det_11_23 = m11 * m23 - m21 * m13;\r\n          var det_11_22 = m11 * m22 - m21 * m12;\r\n          var det_10_23 = m10 * m23 - m20 * m13;\r\n          var det_10_22 = m10 * m22 - m20 * m12;\r\n          var det_10_21 = m10 * m21 - m20 * m11;\r\n          var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\r\n          var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\r\n          var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\r\n          var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\r\n          var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\r\n          var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\r\n          var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\r\n          var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\r\n          var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\r\n          var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\r\n          var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\r\n          var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\r\n          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\r\n          // tslint:enable:variable-name\r\n          return this;\r\n      };\r\n      /**\r\n       * add a value at the specified position in the current Matrix\r\n       * @param index - the index of the value within the matrix. between 0 and 15.\r\n       * @param value - the value to be added\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.addAtIndex = function (index, value) {\r\n          this._m[index] += value;\r\n          this._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * mutiply the specified position in the current Matrix by a value\r\n       * @param index - the index of the value within the matrix. between 0 and 15.\r\n       * @param value - the value to be added\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.multiplyAtIndex = function (index, value) {\r\n          this._m[index] *= value;\r\n          this._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Inserts the translation vector (using 3 floats) in the current matrix\r\n       * @param x - defines the 1st component of the translation\r\n       * @param y - defines the 2nd component of the translation\r\n       * @param z - defines the 3rd component of the translation\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\r\n          this._m[12] = x;\r\n          this._m[13] = y;\r\n          this._m[14] = z;\r\n          this._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Inserts the translation vector in the current matrix\r\n       * @param vector3 - defines the translation to insert\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.setTranslation = function (vector3) {\r\n          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\r\n      };\r\n      /**\r\n       * Gets the translation value of the current matrix\r\n       * @returns a new Vector3 as the extracted translation from the matrix\r\n       */\r\n      Matrix.prototype.getTranslation = function () {\r\n          return new Vector3(this._m[12], this._m[13], this._m[14]);\r\n      };\r\n      /**\r\n       * Fill a Vector3 with the extracted translation from the matrix\r\n       * @param result - defines the Vector3 where to store the translation\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.getTranslationToRef = function (result) {\r\n          result.x = this._m[12];\r\n          result.y = this._m[13];\r\n          result.z = this._m[14];\r\n          return this;\r\n      };\r\n      /**\r\n       * Remove rotation and scaling part from the matrix\r\n       * @returns the updated matrix\r\n       */\r\n      Matrix.prototype.removeRotationAndScaling = function () {\r\n          var m = this.m;\r\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\r\n          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\r\n          return this;\r\n      };\r\n      /**\r\n       * Multiply two matrices\r\n       * @param other - defines the second operand\r\n       * @returns a new matrix set with the multiplication result of the current Matrix and the given one\r\n       */\r\n      Matrix.prototype.multiply = function (other) {\r\n          var result = new Matrix();\r\n          this.multiplyToRef(other, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Copy the current matrix from the given one\r\n       * @param other - defines the source matrix\r\n       * @returns the current updated matrix\r\n       */\r\n      Matrix.prototype.copyFrom = function (other) {\r\n          other.copyToArray(this._m);\r\n          var o = other;\r\n          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\r\n          return this;\r\n      };\r\n      /**\r\n       * Populates the given array from the starting index with the current matrix values\r\n       * @param array - defines the target array\r\n       * @param offset - defines the offset in the target array where to start storing values\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.copyToArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          for (var index = 0; index < 16; index++) {\r\n              array[offset + index] = this._m[index];\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\r\n       * @param other - defines the second operand\r\n       * @param result - defines the matrix where to store the multiplication\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.multiplyToRef = function (other, result) {\r\n          if (this._isIdentity) {\r\n              result.copyFrom(other);\r\n              return this;\r\n          }\r\n          if (other._isIdentity) {\r\n              result.copyFrom(this);\r\n              return this;\r\n          }\r\n          this.multiplyToArray(other, result._m, 0);\r\n          result._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\r\n       * @param other - defines the second operand\r\n       * @param result - defines the array where to store the multiplication\r\n       * @param offset - defines the offset in the target array where to start storing values\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.multiplyToArray = function (other, result, offset) {\r\n          var m = this._m;\r\n          var otherM = other.m;\r\n          // tslint:disable:one-variable-per-declaration\r\n          var tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\r\n          var tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\r\n          var tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\r\n          var tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\r\n          var om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\r\n          var om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\r\n          var om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\r\n          var om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\r\n          // tslint:enable:one-variable-per-declaration\r\n          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\r\n          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\r\n          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\r\n          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\r\n          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\r\n          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\r\n          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\r\n          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\r\n          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\r\n          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\r\n          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\r\n          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\r\n          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\r\n          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\r\n          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\r\n          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\r\n          return this;\r\n      };\r\n      /**\r\n       * Check equality between this matrix and a second one\r\n       * @param value - defines the second matrix to compare\r\n       * @returns true is the current matrix and the given one values are strictly equal\r\n       */\r\n      Matrix.prototype.equals = function (value) {\r\n          var other = value;\r\n          if (!other) {\r\n              return false;\r\n          }\r\n          if (this._isIdentity || other._isIdentity) {\r\n              if (!this._isIdentityDirty && !other._isIdentityDirty) {\r\n                  return this._isIdentity && other._isIdentity;\r\n              }\r\n          }\r\n          var m = this.m;\r\n          var om = other.m;\r\n          return (m[0] === om[0] &&\r\n              m[1] === om[1] &&\r\n              m[2] === om[2] &&\r\n              m[3] === om[3] &&\r\n              m[4] === om[4] &&\r\n              m[5] === om[5] &&\r\n              m[6] === om[6] &&\r\n              m[7] === om[7] &&\r\n              m[8] === om[8] &&\r\n              m[9] === om[9] &&\r\n              m[10] === om[10] &&\r\n              m[11] === om[11] &&\r\n              m[12] === om[12] &&\r\n              m[13] === om[13] &&\r\n              m[14] === om[14] &&\r\n              m[15] === om[15]);\r\n      };\r\n      /**\r\n       * Clone the current matrix\r\n       * @returns a new matrix from the current matrix\r\n       */\r\n      Matrix.prototype.clone = function () {\r\n          var matrix = new Matrix();\r\n          matrix.copyFrom(this);\r\n          return matrix;\r\n      };\r\n      /**\r\n       * Returns the name of the current matrix class\r\n       * @returns the string \"Matrix\"\r\n       */\r\n      Matrix.prototype.getClassName = function () {\r\n          return 'Matrix';\r\n      };\r\n      /**\r\n       * Gets the hash code of the current matrix\r\n       * @returns the hash code\r\n       */\r\n      Matrix.prototype.getHashCode = function () {\r\n          var hash = this._m[0] || 0;\r\n          for (var i = 1; i < 16; i++) {\r\n              hash = (hash * 397) ^ (this._m[i] || 0);\r\n          }\r\n          return hash;\r\n      };\r\n      /**\r\n       * Decomposes the current Matrix into a translation, rotation and scaling components\r\n       * @param scale - defines the scale vector3 given as a reference to update\r\n       * @param rotation - defines the rotation quaternion given as a reference to update\r\n       * @param translation - defines the translation vector3 given as a reference to update\r\n       * @returns true if operation was successful\r\n       */\r\n      Matrix.prototype.decompose = function (scale, rotation, translation) {\r\n          if (this._isIdentity) {\r\n              if (translation) {\r\n                  translation.setAll(0);\r\n              }\r\n              if (scale) {\r\n                  scale.setAll(1);\r\n              }\r\n              if (rotation) {\r\n                  rotation.copyFromFloats(0, 0, 0, 1);\r\n              }\r\n              return true;\r\n          }\r\n          var m = this._m;\r\n          if (translation) {\r\n              translation.copyFromFloats(m[12], m[13], m[14]);\r\n          }\r\n          var usedScale = scale || MathTmp.Vector3[0];\r\n          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\r\n          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\r\n          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\r\n          if (this.determinant() <= 0) {\r\n              usedScale.y *= -1;\r\n          }\r\n          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\r\n              if (rotation) {\r\n                  rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\r\n              }\r\n              return false;\r\n          }\r\n          if (rotation) {\r\n              // tslint:disable-next-line:one-variable-per-declaration\r\n              var sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\r\n              Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\r\n              Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\r\n          }\r\n          return true;\r\n      };\r\n      /**\r\n       * Gets specific row of the matrix\r\n       * @param index - defines the number of the row to get\r\n       * @returns the index-th row of the current matrix as a new Vector4\r\n       */\r\n      Matrix.prototype.getRow = function (index) {\r\n          if (index < 0 || index > 3) {\r\n              return null;\r\n          }\r\n          var i = index * 4;\r\n          return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\r\n      };\r\n      /**\r\n       * Sets the index-th row of the current matrix to the vector4 values\r\n       * @param index - defines the number of the row to set\r\n       * @param row - defines the target vector4\r\n       * @returns the updated current matrix\r\n       */\r\n      Matrix.prototype.setRow = function (index, row) {\r\n          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\r\n      };\r\n      /**\r\n       * Compute the transpose of the matrix\r\n       * @returns the new transposed matrix\r\n       */\r\n      Matrix.prototype.transpose = function () {\r\n          return Matrix.Transpose(this);\r\n      };\r\n      /**\r\n       * Compute the transpose of the matrix and store it in a given matrix\r\n       * @param result - defines the target matrix\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.transposeToRef = function (result) {\r\n          Matrix.TransposeToRef(this, result);\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the index-th row of the current matrix with the given 4 x float values\r\n       * @param index - defines the row index\r\n       * @param x - defines the x component to set\r\n       * @param y - defines the y component to set\r\n       * @param z - defines the z component to set\r\n       * @param w - defines the w component to set\r\n       * @returns the updated current matrix\r\n       */\r\n      Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\r\n          if (index < 0 || index > 3) {\r\n              return this;\r\n          }\r\n          var i = index * 4;\r\n          this._m[i + 0] = x;\r\n          this._m[i + 1] = y;\r\n          this._m[i + 2] = z;\r\n          this._m[i + 3] = w;\r\n          this._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Compute a new matrix set with the current matrix values multiplied by scale (float)\r\n       * @param scale - defines the scale factor\r\n       * @returns a new matrix\r\n       */\r\n      Matrix.prototype.scale = function (scale) {\r\n          var result = new Matrix();\r\n          this.scaleToRef(scale, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Scale the current matrix values by a factor to a given result matrix\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the matrix to store the result\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.scaleToRef = function (scale, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] = this._m[index] * scale;\r\n          }\r\n          result._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current matrix values by a factor and add the result to a given matrix\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Matrix to store the result\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.scaleAndAddToRef = function (scale, result) {\r\n          for (var index = 0; index < 16; index++) {\r\n              result._m[index] += this._m[index] * scale;\r\n          }\r\n          result._markAsUpdated();\r\n          return this;\r\n      };\r\n      /**\r\n       * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\r\n       * @param ref - matrix to store the result\r\n       */\r\n      Matrix.prototype.toNormalMatrix = function (ref) {\r\n          var tmp = MathTmp.Matrix[0];\r\n          this.invertToRef(tmp);\r\n          tmp.transposeToRef(ref);\r\n          var m = ref._m;\r\n          Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\r\n      };\r\n      /**\r\n       * Gets only rotation part of the current matrix\r\n       * @returns a new matrix sets to the extracted rotation matrix from the current one\r\n       */\r\n      Matrix.prototype.getRotationMatrix = function () {\r\n          var result = new Matrix();\r\n          this.getRotationMatrixToRef(result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Extracts the rotation matrix from the current one and sets it as the given \"result\"\r\n       * @param result - defines the target matrix to store data to\r\n       * @returns the current matrix\r\n       */\r\n      Matrix.prototype.getRotationMatrixToRef = function (result) {\r\n          var scale = MathTmp.Vector3[0];\r\n          if (!this.decompose(scale)) {\r\n              Matrix.IdentityToRef(result);\r\n              return this;\r\n          }\r\n          var m = this._m;\r\n          // tslint:disable-next-line:one-variable-per-declaration\r\n          var sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\r\n          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\r\n          return this;\r\n      };\r\n      /**\r\n       * Toggles model matrix from being right handed to left handed in place and vice versa\r\n       */\r\n      Matrix.prototype.toggleModelMatrixHandInPlace = function () {\r\n          var m = this._m;\r\n          m[2] *= -1;\r\n          m[6] *= -1;\r\n          m[8] *= -1;\r\n          m[9] *= -1;\r\n          m[14] *= -1;\r\n          this._markAsUpdated();\r\n      };\r\n      /**\r\n       * Toggles projection matrix from being right handed to left handed in place and vice versa\r\n       */\r\n      Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\r\n          var m = this._m;\r\n          m[8] *= -1;\r\n          m[9] *= -1;\r\n          m[10] *= -1;\r\n          m[11] *= -1;\r\n          this._markAsUpdated();\r\n      };\r\n      /** @internal */\r\n      Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\r\n          if (isIdentityDirty === void 0) { isIdentityDirty = false; }\r\n          if (isIdentity3x2 === void 0) { isIdentity3x2 = false; }\r\n          if (isIdentity3x2Dirty === void 0) { isIdentity3x2Dirty = true; }\r\n          this.updateFlag = Matrix._updateFlagSeed++;\r\n          this._isIdentity = isIdentity;\r\n          this._isIdentity3x2 = isIdentity || isIdentity3x2;\r\n          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\r\n          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\r\n      };\r\n      Matrix._updateFlagSeed = 0;\r\n      Matrix._identityReadOnly = Matrix.Identity();\r\n      return Matrix;\r\n  }());\n\n  /**\r\n   * Class used to store quaternion data\r\n   * {@link https://en.wikipedia.org/wiki/Quaternion }\r\n   * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\r\n   * @public\r\n   */\r\n  var Quaternion = /** @class */ (function () {\r\n      /**\r\n       * Creates a new Quaternion from the given floats\r\n       * @param x - defines the first component (0 by default)\r\n       * @param y - defines the second component (0 by default)\r\n       * @param z - defines the third component (0 by default)\r\n       * @param w - defines the fourth component (1.0 by default)\r\n       */\r\n      function Quaternion(\r\n      /** defines the first component (0 by default) */\r\n      x, \r\n      /** defines the second component (0 by default) */\r\n      y, \r\n      /** defines the third component (0 by default) */\r\n      z, \r\n      /** defines the fourth component (1.0 by default) */\r\n      w) {\r\n          if (x === void 0) { x = 0.0; }\r\n          if (y === void 0) { y = 0.0; }\r\n          if (z === void 0) { z = 0.0; }\r\n          if (w === void 0) { w = 1.0; }\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n          this.w = w;\r\n      }\r\n      // Statics\r\n      /**\r\n       * Creates a new quaternion from a rotation matrix\r\n       * @param matrix - defines the source matrix\r\n       * @returns a new quaternion created from the given rotation matrix values\r\n       */\r\n      Quaternion.FromRotationMatrix = function (matrix) {\r\n          var result = new Quaternion();\r\n          Quaternion.FromRotationMatrixToRef(matrix, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Updates the given quaternion with the given rotation matrix values\r\n       * @param matrix - defines the source matrix\r\n       * @param result - defines the target quaternion\r\n       */\r\n      Quaternion.FromRotationMatrixToRef = function (matrix, result) {\r\n          var data = matrix.m;\r\n          // tslint:disable:one-variable-per-declaration\r\n          var m11 = data[0], m12 = data[4], m13 = data[8];\r\n          var m21 = data[1], m22 = data[5], m23 = data[9];\r\n          var m31 = data[2], m32 = data[6], m33 = data[10];\r\n          // tslint:enable:one-variable-per-declaration\r\n          var trace = m11 + m22 + m33;\r\n          var s;\r\n          if (trace > 0) {\r\n              s = 0.5 / Math.sqrt(trace + 1.0);\r\n              result.w = 0.25 / s;\r\n              result.x = (m32 - m23) * s;\r\n              result.y = (m13 - m31) * s;\r\n              result.z = (m21 - m12) * s;\r\n          }\r\n          else if (m11 > m22 && m11 > m33) {\r\n              s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n              result.w = (m32 - m23) / s;\r\n              result.x = 0.25 * s;\r\n              result.y = (m12 + m21) / s;\r\n              result.z = (m13 + m31) / s;\r\n          }\r\n          else if (m22 > m33) {\r\n              s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n              result.w = (m13 - m31) / s;\r\n              result.x = (m12 + m21) / s;\r\n              result.y = 0.25 * s;\r\n              result.z = (m23 + m32) / s;\r\n          }\r\n          else {\r\n              s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n              result.w = (m21 - m12) / s;\r\n              result.x = (m13 + m31) / s;\r\n              result.y = (m23 + m32) / s;\r\n              result.z = 0.25 * s;\r\n          }\r\n      };\r\n      /**\r\n       * Returns the dot product (float) between the quaternions \"left\" and \"right\"\r\n       * @param left - defines the left operand\r\n       * @param right - defines the right operand\r\n       * @returns the dot product\r\n       */\r\n      Quaternion.Dot = function (left, right) {\r\n          return left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n      };\r\n      /**\r\n       * Checks if the two quaternions are close to each other\r\n       * @param quat0 - defines the first quaternion to check\r\n       * @param quat1 - defines the second quaternion to check\r\n       * @returns true if the two quaternions are close to each other\r\n       */\r\n      Quaternion.AreClose = function (quat0, quat1) {\r\n          var dot = Quaternion.Dot(quat0, quat1);\r\n          return dot >= 0;\r\n      };\r\n      /**\r\n       * Creates an empty quaternion\r\n       * @returns a new quaternion set to (0.0, 0.0, 0.0)\r\n       */\r\n      Quaternion.Zero = function () {\r\n          return new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n      };\r\n      /**\r\n       * Inverse a given quaternion\r\n       * @param q - defines the source quaternion\r\n       * @returns a new quaternion as the inverted current quaternion\r\n       */\r\n      Quaternion.Inverse = function (q) {\r\n          return new Quaternion(-q.x, -q.y, -q.z, q.w);\r\n      };\r\n      /**\r\n       * Gets a boolean indicating if the given quaternion is identity\r\n       * @param quaternion - defines the quaternion to check\r\n       * @returns true if the quaternion is identity\r\n       */\r\n      Quaternion.IsIdentity = function (quaternion) {\r\n          return quaternion && quaternion.x === 0 && quaternion.y === 0 && quaternion.z === 0 && quaternion.w === 1;\r\n      };\r\n      /**\r\n       * Creates a quaternion from a rotation around an axis\r\n       * @param axis - defines the axis to use\r\n       * @param angle - defines the angle to use (in Euler degrees)\r\n       * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\r\n       */\r\n      Quaternion.RotationAxis = function (axis, angle) {\r\n          var angleRad = angle * DEG2RAD;\r\n          return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\r\n      };\r\n      /**\r\n       * Creates a rotation around an axis and stores it into the given quaternion\r\n       * @param axis - defines the axis to use\r\n       * @param angle - defines the angle to use (in Euler degrees)\r\n       * @param result - defines the target quaternion\r\n       * @returns the target quaternion\r\n       */\r\n      Quaternion.RotationAxisToRef = function (axis, angle, result) {\r\n          var angleRad = angle * DEG2RAD;\r\n          var sin = Math.sin(angleRad / 2);\r\n          axis.normalize();\r\n          result.w = Math.cos(angleRad / 2);\r\n          result.x = axis.x * sin;\r\n          result.y = axis.y * sin;\r\n          result.z = axis.z * sin;\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new quaternion from data stored into an array\r\n       * @param array - defines the data source\r\n       * @param offset - defines the offset in the source array where the data starts\r\n       * @returns a new quaternion\r\n       */\r\n      Quaternion.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n      };\r\n      /**\r\n       * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\r\n       */\r\n      Quaternion.FromEulerAnglesRef = function (x, y, z, result) {\r\n          return Quaternion.RotationYawPitchRollToRef(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD, result);\r\n      };\r\n      /**\r\n       * Creates a new quaternion from the given Euler float angles (y, x, z)\r\n       * @param yaw - defines the rotation around Y axis\r\n       * @param pitch - defines the rotation around X axis\r\n       * @param roll - defines the rotation around Z axis\r\n       * @returns the new quaternion\r\n       */\r\n      Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\r\n          var q = new Quaternion();\r\n          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\r\n          return q;\r\n      };\r\n      /**\r\n       * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\r\n       * @param yaw - defines the rotation around Y axis\r\n       * @param pitch - defines the rotation around X axis\r\n       * @param roll - defines the rotation around Z axis\r\n       * @param result - defines the target quaternion\r\n       */\r\n      Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\r\n          // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\r\n          var halfPitch = pitch * 0.5;\r\n          var halfYaw = yaw * 0.5;\r\n          var halfRoll = roll * 0.5;\r\n          var c1 = Math.cos(halfPitch);\r\n          var c2 = Math.cos(halfYaw);\r\n          var c3 = Math.cos(halfRoll);\r\n          var s1 = Math.sin(halfPitch);\r\n          var s2 = Math.sin(halfYaw);\r\n          var s3 = Math.sin(halfRoll);\r\n          result.x = c2 * s1 * c3 + s2 * c1 * s3;\r\n          result.y = s2 * c1 * c3 - c2 * s1 * s3;\r\n          result.z = c2 * c1 * s3 - s2 * s1 * c3;\r\n          result.w = c2 * c1 * c3 + s2 * s1 * s3;\r\n      };\r\n      /**\r\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\r\n       * @param alpha - defines the rotation around first axis\r\n       * @param beta - defines the rotation around second axis\r\n       * @param gamma - defines the rotation around third axis\r\n       * @returns the new quaternion\r\n       */\r\n      Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\r\n          var result = new Quaternion();\r\n          Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\r\n       * @param alpha - defines the rotation around first axis\r\n       * @param beta - defines the rotation around second axis\r\n       * @param gamma - defines the rotation around third axis\r\n       * @param result - defines the target quaternion\r\n       */\r\n      Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\r\n          // Produces a quaternion from Euler angles in the z-x-z orientation\r\n          var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\r\n          var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\r\n          var halfBeta = beta * 0.5;\r\n          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\r\n          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\r\n          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\r\n          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\r\n      };\r\n      /**\r\n       * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\r\n       * @param axis1 - defines the first axis\r\n       * @param axis2 - defines the second axis\r\n       * @param axis3 - defines the third axis\r\n       * @returns the new quaternion\r\n       */\r\n      Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\r\n          var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\r\n          return quat;\r\n      };\r\n      /**\r\n       * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\r\n       * @param axis1 - defines the first axis\r\n       * @param axis2 - defines the second axis\r\n       * @param axis3 - defines the third axis\r\n       * @param ref - defines the target quaternion\r\n       */\r\n      Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\r\n          var rotMat = MathTmp.Matrix[0];\r\n          Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\r\n          Quaternion.FromRotationMatrixToRef(rotMat, ref);\r\n      };\r\n      /**\r\n       * Interpolates between two quaternions\r\n       * @param left - defines first quaternion\r\n       * @param right - defines second quaternion\r\n       * @param amount - defines the gradient to use\r\n       * @returns the new interpolated quaternion\r\n       */\r\n      Quaternion.Slerp = function (left, right, amount) {\r\n          var result = Quaternion.Identity;\r\n          Quaternion.SlerpToRef(left, right, amount, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Interpolates between two quaternions and stores it into a target quaternion\r\n       * @param left - defines first quaternion\r\n       * @param right - defines second quaternion\r\n       * @param amount - defines the gradient to use\r\n       * @param result - defines the target quaternion\r\n       */\r\n      Quaternion.SlerpToRef = function (left, right, amount, result) {\r\n          var num2;\r\n          var num3;\r\n          var num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\r\n          var flag = false;\r\n          if (num4 < 0) {\r\n              flag = true;\r\n              num4 = -num4;\r\n          }\r\n          if (num4 > 0.999999) {\r\n              num3 = 1 - amount;\r\n              num2 = flag ? -amount : amount;\r\n          }\r\n          else {\r\n              var num5 = Math.acos(num4);\r\n              var num6 = 1.0 / Math.sin(num5);\r\n              num3 = Math.sin((1.0 - amount) * num5) * num6;\r\n              num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\r\n          }\r\n          result.x = num3 * left.x + num2 * right.x;\r\n          result.y = num3 * left.y + num2 * right.y;\r\n          result.z = num3 * left.z + num2 * right.z;\r\n          result.w = num3 * left.w + num2 * right.w;\r\n      };\r\n      /**\r\n       * Interpolate between two quaternions using Hermite interpolation\r\n       * @param value1 - defines first quaternion\r\n       * @param tangent1 - defines the incoming tangent\r\n       * @param value2 - defines second quaternion\r\n       * @param tangent2 - defines the outgoing tangent\r\n       * @param amount - defines the target quaternion\r\n       * @returns the new interpolated quaternion\r\n       */\r\n      Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n          var part2 = -2.0 * cubed + 3.0 * squared;\r\n          var part3 = cubed - 2.0 * squared + amount;\r\n          var part4 = cubed - squared;\r\n          var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\r\n          var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\r\n          var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\r\n          var w = value1.w * part1 + value2.w * part2 + tangent1.w * part3 + tangent2.w * part4;\r\n          return new Quaternion(x, y, z, w);\r\n      };\r\n      Object.defineProperty(Quaternion, \"Identity\", {\r\n          /**\r\n           * Creates an identity quaternion\r\n           * @returns - the identity quaternion\r\n           */\r\n          get: function () {\r\n              return new Quaternion(0.0, 0.0, 0.0, 1.0);\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * Returns the angle in degrees between two rotations a and b.\r\n       * @param quat1 - defines the first quaternion\r\n       * @param quat2 - defines the second quaternion\r\n       */\r\n      Quaternion.Angle = function (quat1, quat2) {\r\n          var dot = Quaternion.Dot(quat1, quat2);\r\n          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * RAD2DEG;\r\n      };\r\n      /**\r\n       * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\r\n       * @param x - the rotation on the x axis in euler degrees\r\n       * @param y - the rotation on the y axis in euler degrees\r\n       * @param z - the rotation on the z axis in euler degrees\r\n       */\r\n      Quaternion.Euler = function (x, y, z) {\r\n          return Quaternion.RotationYawPitchRoll(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD);\r\n      };\r\n      /**\r\n       * Creates a rotation with the specified forward and upwards directions.\r\n       * @param forward - the direction to look in\r\n       * @param up - the vector that defines in which direction up is\r\n       */\r\n      Quaternion.LookRotation = function (forward, up) {\r\n          if (up === void 0) { up = MathTmp.staticUp; }\r\n          var forwardNew = Vector3.Normalize(forward);\r\n          var right = Vector3.Normalize(Vector3.Cross(up, forwardNew));\r\n          var upNew = Vector3.Cross(forwardNew, right);\r\n          var m00 = right.x;\r\n          var m01 = right.y;\r\n          var m02 = right.z;\r\n          var m10 = upNew.x;\r\n          var m11 = upNew.y;\r\n          var m12 = upNew.z;\r\n          var m20 = forwardNew.x;\r\n          var m21 = forwardNew.y;\r\n          var m22 = forwardNew.z;\r\n          var num8 = m00 + m11 + m22;\r\n          var quaternion = new Quaternion();\r\n          if (num8 > 0) {\r\n              var num = Math.sqrt(num8 + 1);\r\n              quaternion.w = num * 0.5;\r\n              num = 0.5 / num;\r\n              quaternion.x = (m12 - m21) * num;\r\n              quaternion.y = (m20 - m02) * num;\r\n              quaternion.z = (m01 - m10) * num;\r\n              return quaternion;\r\n          }\r\n          if (m00 >= m11 && m00 >= m22) {\r\n              var num7 = Math.sqrt(1 + m00 - m11 - m22);\r\n              var num4 = 0.5 / num7;\r\n              quaternion.x = 0.5 * num7;\r\n              quaternion.y = (m01 + m10) * num4;\r\n              quaternion.z = (m02 + m20) * num4;\r\n              quaternion.w = (m12 - m21) * num4;\r\n              return quaternion;\r\n          }\r\n          if (m11 > m22) {\r\n              var num6 = Math.sqrt(1 + m11 - m00 - m22);\r\n              var num3 = 0.5 / num6;\r\n              quaternion.x = (m10 + m01) * num3;\r\n              quaternion.y = 0.5 * num6;\r\n              quaternion.z = (m21 + m12) * num3;\r\n              quaternion.w = (m20 - m02) * num3;\r\n              return quaternion;\r\n          }\r\n          var num5 = Math.sqrt(1 + m22 - m00 - m11);\r\n          var num2 = 0.5 / num5;\r\n          quaternion.x = (m20 + m02) * num2;\r\n          quaternion.y = (m21 + m12) * num2;\r\n          quaternion.z = 0.5 * num5;\r\n          quaternion.w = (m01 - m10) * num2;\r\n          return quaternion;\r\n      };\r\n      /**\r\n       * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\r\n       * @param from - defines the first quaternion\r\n       * @param to - defines the second quaternion\r\n       * @param maxDegreesDelta - the interval step\r\n       */\r\n      Quaternion.RotateTowards = function (from, to, maxDegreesDelta) {\r\n          var num = Quaternion.Angle(from, to);\r\n          if (num === 0) {\r\n              return to;\r\n          }\r\n          var t = Math.min(1, maxDegreesDelta / num);\r\n          return Quaternion.Slerp(from, to, t);\r\n      };\r\n      /**\r\n       * Creates a rotation which rotates from fromDirection to toDirection.\r\n       * @param from - defines the first direction Vector\r\n       * @param to - defines the target direction Vector\r\n       */\r\n      Quaternion.FromToRotation = function (from, to, up) {\r\n          // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\r\n          if (up === void 0) { up = MathTmp.staticUp; }\r\n          var v0 = from.normalize();\r\n          var v1 = to.normalize();\r\n          var a = Vector3.Cross(v0, v1);\r\n          var w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3.Dot(v0, v1);\r\n          if (a.lengthSquared() < 0.0001) {\r\n              // the vectors are parallel, check w to find direction\r\n              // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\r\n              // otherwise the vectors in the same direction and no rotation should occur\r\n              return Math.abs(w) < 0.0001 ? new Quaternion(up.x, up.y, up.z, 0).normalized : Quaternion.Identity;\r\n          }\r\n          else {\r\n              return new Quaternion(a.x, a.y, a.z, w).normalized;\r\n          }\r\n      };\r\n      Object.defineProperty(Quaternion.prototype, \"normalized\", {\r\n          /**\r\n           * Converts this quaternion to one with the same orientation but with a magnitude of 1.\r\n           */\r\n          get: function () {\r\n              return this.normalize();\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * Creates a rotation which rotates from fromDirection to toDirection.\r\n       * @param from - defines the first Vector\r\n       * @param to - defines the second Vector\r\n       * @param up - defines the direction\r\n       */\r\n      Quaternion.prototype.setFromToRotation = function (from, to, up) {\r\n          if (up === void 0) { up = MathTmp.staticUp; }\r\n          var result = Quaternion.FromToRotation(from, to, up);\r\n          this.x = result.x;\r\n          this.y = result.y;\r\n          this.z = result.z;\r\n          this.w = result.w;\r\n      };\r\n      Object.defineProperty(Quaternion.prototype, \"eulerAngles\", {\r\n          /**\r\n           * Gets or sets the euler angle representation of the rotation.\r\n           * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\r\n           */\r\n          get: function () {\r\n              var out = new Vector3();\r\n              // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\r\n              var unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n              // this will have a magnitude of 0.5 or greater if and only if this is a singularity case\r\n              var test = this.x * this.w - this.y * this.z;\r\n              if (test > 0.4995 * unit) {\r\n                  // singularity at north pole\r\n                  out.x = Math.PI / 2;\r\n                  out.y = 2 * Math.atan2(this.y, this.x);\r\n                  out.z = 0;\r\n              }\r\n              else if (test < -0.4995 * unit) {\r\n                  // singularity at south pole\r\n                  out.x = -Math.PI / 2;\r\n                  out.y = -2 * Math.atan2(this.y, this.x);\r\n                  out.z = 0;\r\n              }\r\n              else {\r\n                  // no singularity - this is the majority of cases\r\n                  out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));\r\n                  out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));\r\n                  out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));\r\n              }\r\n              out.x *= RAD2DEG;\r\n              out.y *= RAD2DEG;\r\n              out.z *= RAD2DEG;\r\n              // ensure the degree values are between 0 and 360\r\n              out.x = Scalar.Repeat(out.x, 360);\r\n              out.y = Scalar.Repeat(out.y, 360);\r\n              out.z = Scalar.Repeat(out.z, 360);\r\n              return out;\r\n          },\r\n          set: function (euler) {\r\n              this.setEuler(euler.x, euler.y, euler.z);\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * Gets a string representation for the current quaternion\r\n       * @returns a string with the Quaternion coordinates\r\n       */\r\n      Quaternion.prototype.toString = function () {\r\n          return \"(\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \")\";\r\n      };\r\n      Object.defineProperty(Quaternion.prototype, \"length\", {\r\n          /**\r\n           * Gets length of current quaternion\r\n           * @returns the quaternion length (float)\r\n           */\r\n          get: function () {\r\n              return Math.sqrt(this.lengthSquared);\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Quaternion.prototype, \"lengthSquared\", {\r\n          /**\r\n           * Gets length of current quaternion\r\n           * @returns the quaternion length (float)\r\n           */\r\n          get: function () {\r\n              return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * Gets the class name of the quaternion\r\n       * @returns the string \"Quaternion\"\r\n       */\r\n      Quaternion.prototype.getClassName = function () {\r\n          return 'Quaternion';\r\n      };\r\n      /**\r\n       * Gets a hash code for this quaternion\r\n       * @returns the quaternion hash code\r\n       */\r\n      Quaternion.prototype.getHashCode = function () {\r\n          var hash = this.x || 0;\r\n          hash = (hash * 397) ^ (this.y || 0);\r\n          hash = (hash * 397) ^ (this.z || 0);\r\n          hash = (hash * 397) ^ (this.w || 0);\r\n          return hash;\r\n      };\r\n      /**\r\n       * Copy the quaternion to an array\r\n       * @returns a new array populated with 4 elements from the quaternion coordinates\r\n       */\r\n      Quaternion.prototype.asArray = function () {\r\n          return [this.x, this.y, this.z, this.w];\r\n      };\r\n      /**\r\n       * Check if two quaternions are equals\r\n       * @param otherQuaternion - defines the second operand\r\n       * @returns true if the current quaternion and the given one coordinates are strictly equals\r\n       */\r\n      Quaternion.prototype.equals = function (otherQuaternion) {\r\n          return (otherQuaternion &&\r\n              this.x === otherQuaternion.x &&\r\n              this.y === otherQuaternion.y &&\r\n              this.z === otherQuaternion.z &&\r\n              this.w === otherQuaternion.w);\r\n      };\r\n      /**\r\n       * Clone the current quaternion\r\n       * @returns a new quaternion copied from the current one\r\n       */\r\n      Quaternion.prototype.clone = function () {\r\n          return new Quaternion(this.x, this.y, this.z, this.w);\r\n      };\r\n      /**\r\n       * Copy a quaternion to the current one\r\n       * @param other - defines the other quaternion\r\n       * @returns the updated current quaternion\r\n       */\r\n      Quaternion.prototype.copyFrom = function (other) {\r\n          this.x = other.x;\r\n          this.y = other.y;\r\n          this.z = other.z;\r\n          this.w = other.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current quaternion with the given float coordinates\r\n       * @param x - defines the x coordinate\r\n       * @param y - defines the y coordinate\r\n       * @param z - defines the z coordinate\r\n       * @param w - defines the w coordinate\r\n       * @returns the updated current quaternion\r\n       */\r\n      Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n          this.w = w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current quaternion from the given float coordinates\r\n       * @param x - defines the x coordinate\r\n       * @param y - defines the y coordinate\r\n       * @param z - defines the z coordinate\r\n       * @param w - defines the w coordinate\r\n       * @returns the updated current quaternion\r\n       */\r\n      Quaternion.prototype.set = function (x, y, z, w) {\r\n          return this.copyFromFloats(x, y, z, w);\r\n      };\r\n      /**\r\n       * Updates the current quaternion from the given euler angles\r\n       * @returns the updated current quaternion\r\n       */\r\n      Quaternion.prototype.setEuler = function (x, y, z) {\r\n          Quaternion.RotationYawPitchRollToRef(y * DEG2RAD, x * DEG2RAD, z * DEG2RAD, this);\r\n          return this;\r\n      };\r\n      /**\r\n       * @internal\r\n       * Adds two quaternions\r\n       * @param other - defines the second operand\r\n       * @returns a new quaternion as the addition result of the given one and the current quaternion\r\n       */\r\n      Quaternion.prototype.add = function (other) {\r\n          return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\r\n      };\r\n      /**\r\n       * @internal\r\n       * Add a quaternion to the current one\r\n       * @param other - defines the quaternion to add\r\n       * @returns the current quaternion\r\n       */\r\n      Quaternion.prototype.addInPlace = function (other) {\r\n          this.x += other.x;\r\n          this.y += other.y;\r\n          this.z += other.z;\r\n          this.w += other.w;\r\n          return this;\r\n      };\r\n      /**\r\n       * Subtract two quaternions\r\n       * @param other - defines the second operand\r\n       * @returns a new quaternion as the subtraction result of the given one from the current one\r\n       */\r\n      Quaternion.prototype.subtract = function (other) {\r\n          return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\r\n      };\r\n      /**\r\n       * Multiplies the current quaternion by a scale factor\r\n       * @param value - defines the scale factor\r\n       * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\r\n       */\r\n      Quaternion.prototype.scale = function (value) {\r\n          return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\r\n      };\r\n      /**\r\n       * Scale the current quaternion values by a factor and stores the result to a given quaternion\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Quaternion object where to store the result\r\n       * @returns the unmodified current quaternion\r\n       */\r\n      Quaternion.prototype.scaleToRef = function (scale, result) {\r\n          result.x = this.x * scale;\r\n          result.y = this.y * scale;\r\n          result.z = this.z * scale;\r\n          result.w = this.w * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Multiplies in place the current quaternion by a scale factor\r\n       * @param value - defines the scale factor\r\n       * @returns the current modified quaternion\r\n       */\r\n      Quaternion.prototype.scaleInPlace = function (value) {\r\n          this.x *= value;\r\n          this.y *= value;\r\n          this.z *= value;\r\n          this.w *= value;\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current quaternion values by a factor and add the result to a given quaternion\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Quaternion object where to store the result\r\n       * @returns the unmodified current quaternion\r\n       */\r\n      Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\r\n          result.x += this.x * scale;\r\n          result.y += this.y * scale;\r\n          result.z += this.z * scale;\r\n          result.w += this.w * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Multiplies two quaternions\r\n       * @param q1 - defines the second operand\r\n       * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\r\n       */\r\n      Quaternion.prototype.multiply = function (q1) {\r\n          var result = new Quaternion(0, 0, 0, 1.0);\r\n          this.multiplyToRef(q1, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\r\n       * @param q1 - defines the second operand\r\n       * @param result - defines the target quaternion\r\n       * @returns the current quaternion\r\n       */\r\n      Quaternion.prototype.multiplyToRef = function (q1, result) {\r\n          var x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\r\n          var y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\r\n          var z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\r\n          var w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\r\n          result.copyFromFloats(x, y, z, w);\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\r\n       * @param q1 - defines the second operand\r\n       * @returns the currentupdated quaternion\r\n       */\r\n      Quaternion.prototype.multiplyInPlace = function (q1) {\r\n          this.multiplyToRef(q1, this);\r\n          return this;\r\n      };\r\n      /**\r\n       * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\r\n       * @param ref - defines the target quaternion\r\n       * @returns the current quaternion\r\n       */\r\n      Quaternion.prototype.conjugateToRef = function (ref) {\r\n          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\r\n          return this;\r\n      };\r\n      /**\r\n       * Conjugates in place (1-q) the current quaternion\r\n       * @returns the current updated quaternion\r\n       */\r\n      Quaternion.prototype.conjugateInPlace = function () {\r\n          this.x *= -1;\r\n          this.y *= -1;\r\n          this.z *= -1;\r\n          return this;\r\n      };\r\n      /**\r\n       * Conjugates in place (1-q) the current quaternion\r\n       * @returns a new quaternion\r\n       */\r\n      Quaternion.prototype.conjugate = function () {\r\n          var result = new Quaternion(-this.x, -this.y, -this.z, this.w);\r\n          return result;\r\n      };\r\n      /**\r\n       * Normalize in place the current quaternion\r\n       * @returns the current updated quaternion\r\n       */\r\n      Quaternion.prototype.normalize = function () {\r\n          var length = 1.0 / this.length;\r\n          this.x *= length;\r\n          this.y *= length;\r\n          this.z *= length;\r\n          this.w *= length;\r\n          return this;\r\n      };\r\n      Quaternion.prototype.angleAxis = function (degress, axis) {\r\n          if (axis.lengthSquared() === 0) {\r\n              return Quaternion.Identity;\r\n          }\r\n          var result = Quaternion.Identity;\r\n          var radians = degress * DEG2RAD;\r\n          radians *= 0.5;\r\n          var a2 = axis.normalize();\r\n          a2 = axis.scaleInPlace(Math.sin(radians));\r\n          result.x = a2.x;\r\n          result.y = a2.y;\r\n          result.z = a2.z;\r\n          result.w = Math.cos(radians);\r\n          return result.normalize();\r\n      };\r\n      /**\r\n       * Updates the given rotation matrix with the current quaternion values\r\n       * @param result - defines the target matrix\r\n       * @returns the current unchanged quaternion\r\n       */\r\n      Quaternion.prototype.toRotationMatrix = function (result) {\r\n          Matrix.FromQuaternionToRef(this, result);\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current quaternion from the given rotation matrix values\r\n       * @param matrix - defines the source matrix\r\n       * @returns the current updated quaternion\r\n       */\r\n      Quaternion.prototype.fromRotationMatrix = function (matrix) {\r\n          Quaternion.FromRotationMatrixToRef(matrix, this);\r\n          return this;\r\n      };\r\n      return Quaternion;\r\n  }());\n\n  /**\r\n   * Classed used to store (x,y,z) vector representation\r\n   * A Vector3 is the main object used in 3D geometry\r\n   * It can represent etiher the coordinates of a point the space, either a direction\r\n   * Reminder: Babylon.js uses a left handed forward facing system\r\n   * @public\r\n   */\r\n  var Vector3 = /** @class */ (function () {\r\n      /**\r\n       * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\r\n       * @param x - defines the first coordinates (on X axis)\r\n       * @param y - defines the second coordinates (on Y axis)\r\n       * @param z - defines the third coordinates (on Z axis)\r\n       */\r\n      function Vector3(\r\n      /**\r\n       * Defines the first coordinates (on X axis)\r\n       */\r\n      x, \r\n      /**\r\n       * Defines the second coordinates (on Y axis)\r\n       */\r\n      y, \r\n      /**\r\n       * Defines the third coordinates (on Z axis)\r\n       */\r\n      z) {\r\n          if (x === void 0) { x = 0; }\r\n          if (y === void 0) { y = 0; }\r\n          if (z === void 0) { z = 0; }\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n      }\r\n      Object.defineProperty(Vector3.prototype, \"isNonUniform\", {\r\n          /**\r\n           * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\r\n           */\r\n          get: function () {\r\n              var absX = Math.abs(this.x);\r\n              var absY = Math.abs(this.y);\r\n              if (absX !== absY) {\r\n                  return true;\r\n              }\r\n              var absZ = Math.abs(this.z);\r\n              if (absX !== absZ) {\r\n                  return true;\r\n              }\r\n              if (absY !== absZ) {\r\n                  return true;\r\n              }\r\n              return false;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // Statics\r\n      /**\r\n       * Returns a new Vector3 as the result of the addition of the two given vectors.\r\n       * @param vector1 - the first vector\r\n       * @param vector2 - the second vector\r\n       * @returns the resulting vector\r\n       */\r\n      Vector3.Add = function (vector1, vector2) {\r\n          return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\r\n      };\r\n      /**\r\n       * Get the clip factor between two vectors\r\n       * @param vector0 - defines the first operand\r\n       * @param vector1 - defines the second operand\r\n       * @param axis - defines the axis to use\r\n       * @param size - defines the size along the axis\r\n       * @returns the clip factor\r\n       */\r\n      Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\r\n          var d0 = Vector3.Dot(vector0, axis) - size;\r\n          var d1 = Vector3.Dot(vector1, axis) - size;\r\n          var s = d0 / (d0 - d1);\r\n          return s;\r\n      };\r\n      /**\r\n       * Get angle between two vectors\r\n       * @param vector0 - angle between vector0 and vector1\r\n       * @param vector1 - angle between vector0 and vector1\r\n       * @param normal - direction of the normal\r\n       * @returns the angle between vector0 and vector1\r\n       */\r\n      Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\r\n          var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\r\n          var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\r\n          var dot = Vector3.Dot(v0, v1);\r\n          var n = MathTmp.Vector3[3];\r\n          Vector3.CrossToRef(v0, v1, n);\r\n          if (Vector3.Dot(n, normal) > 0) {\r\n              return Math.acos(dot);\r\n          }\r\n          return -Math.acos(dot);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set from the index \"offset\" of the given array\r\n       * @param array - defines the source array\r\n       * @param offset - defines the offset in the source array\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\r\n       * This function is deprecated.  Use FromArray instead\r\n       * @param array - defines the source array\r\n       * @param offset - defines the offset in the source array\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.FromFloatArray = function (array, offset) {\r\n          return Vector3.FromArray(array, offset);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\r\n       * @param array - defines the source array\r\n       * @param offset - defines the offset in the source array\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.FromArrayToRef = function (array, offset, result) {\r\n          result.x = array[offset];\r\n          result.y = array[offset + 1];\r\n          result.z = array[offset + 2];\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\r\n       * This function is deprecated.  Use FromArrayToRef instead.\r\n       * @param array - defines the source array\r\n       * @param offset - defines the offset in the source array\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.FromFloatArrayToRef = function (array, offset, result) {\r\n          return Vector3.FromArrayToRef(array, offset, result);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the given floats.\r\n       * @param x - defines the x coordinate of the source\r\n       * @param y - defines the y coordinate of the source\r\n       * @param z - defines the z coordinate of the source\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.FromFloatsToRef = function (x, y, z, result) {\r\n          result.copyFromFloats(x, y, z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (0.0, 0.0, 0.0)\r\n       * @returns a new empty Vector3\r\n       */\r\n      Vector3.Zero = function () {\r\n          return new Vector3(0.0, 0.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (1.0, 1.0, 1.0)\r\n       * @returns a new unit Vector3\r\n       */\r\n      Vector3.One = function () {\r\n          return new Vector3(1.0, 1.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (0.0, 1.0, 0.0)\r\n       * @returns a new up Vector3\r\n       */\r\n      Vector3.Up = function () {\r\n          return new Vector3(0.0, 1.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (0.0, -1.0, 0.0)\r\n       * @returns a new down Vector3\r\n       */\r\n      Vector3.Down = function () {\r\n          return new Vector3(0.0, -1.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (0.0, 0.0, 1.0)\r\n       * @returns a new forward Vector3\r\n       */\r\n      Vector3.Forward = function () {\r\n          return new Vector3(0.0, 0.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (0.0, 0.0, -1.0)\r\n       * @returns a new forward Vector3\r\n       */\r\n      Vector3.Backward = function () {\r\n          return new Vector3(0.0, 0.0, -1.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (1.0, 0.0, 0.0)\r\n       * @returns a new right Vector3\r\n       */\r\n      Vector3.Right = function () {\r\n          return new Vector3(1.0, 0.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\r\n       * @returns a new left Vector3\r\n       */\r\n      Vector3.Left = function () {\r\n          return new Vector3(-1.0, 0.0, 0.0);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\r\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n       * @param vector - defines the Vector3 to transform\r\n       * @param transformation - defines the transformation matrix\r\n       * @returns the transformed Vector3\r\n       */\r\n      Vector3.TransformCoordinates = function (vector, transformation) {\r\n          var result = Vector3.Zero();\r\n          Vector3.TransformCoordinatesToRef(vector, transformation, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\r\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n       * @param vector - defines the Vector3 to transform\r\n       * @param transformation - defines the transformation matrix\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\r\n          return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\r\n       * This method computes tranformed coordinates only, not transformed direction vectors\r\n       * @param x - define the x coordinate of the source vector\r\n       * @param y - define the y coordinate of the source vector\r\n       * @param z - define the z coordinate of the source vector\r\n       * @param transformation - defines the transformation matrix\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\r\n          var m = transformation.m;\r\n          var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\r\n          var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\r\n          var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\r\n          var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\r\n          result.x = rx * rw;\r\n          result.y = ry * rw;\r\n          result.z = rz * rw;\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\r\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n       * @param vector - defines the Vector3 to transform\r\n       * @param transformation - defines the transformation matrix\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.TransformNormal = function (vector, transformation) {\r\n          var result = Vector3.Zero();\r\n          Vector3.TransformNormalToRef(vector, transformation, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\r\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n       * @param vector - defines the Vector3 to transform\r\n       * @param transformation - defines the transformation matrix\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.TransformNormalToRef = function (vector, transformation, result) {\r\n          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\r\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n       * @param x - define the x coordinate of the source vector\r\n       * @param y - define the y coordinate of the source vector\r\n       * @param z - define the z coordinate of the source vector\r\n       * @param transformation - defines the transformation matrix\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\r\n          var m = transformation.m;\r\n          result.x = x * m[0] + y * m[4] + z * m[8];\r\n          result.y = x * m[1] + y * m[5] + z * m[9];\r\n          result.z = x * m[2] + y * m[6] + z * m[10];\r\n      };\r\n      /**\r\n       * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\r\n       * @param value1 - defines the first control point\r\n       * @param value2 - defines the second control point\r\n       * @param value3 - defines the third control point\r\n       * @param value4 - defines the fourth control point\r\n       * @param amount - defines the amount on the spline to use\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var x = 0.5 *\r\n              (2.0 * value2.x +\r\n                  (-value1.x + value3.x) * amount +\r\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\r\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\r\n          var y = 0.5 *\r\n              (2.0 * value2.y +\r\n                  (-value1.y + value3.y) * amount +\r\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\r\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\r\n          var z = 0.5 *\r\n              (2.0 * value2.z +\r\n                  (-value1.z + value3.z) * amount +\r\n                  (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) * squared +\r\n                  (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\r\n          return new Vector3(x, y, z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n       * @param value - defines the current value\r\n       * @param min - defines the lower range value\r\n       * @param max - defines the upper range value\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Clamp = function (value, min, max) {\r\n          var v = new Vector3();\r\n          Vector3.ClampToRef(value, min, max, v);\r\n          return v;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n       * @param value - defines the current value\r\n       * @param min - defines the lower range value\r\n       * @param max - defines the upper range value\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.ClampToRef = function (value, min, max, result) {\r\n          var x = value.x;\r\n          x = x > max.x ? max.x : x;\r\n          x = x < min.x ? min.x : x;\r\n          var y = value.y;\r\n          y = y > max.y ? max.y : y;\r\n          y = y < min.y ? min.y : y;\r\n          var z = value.z;\r\n          z = z > max.z ? max.z : z;\r\n          z = z < min.z ? min.z : z;\r\n          result.copyFromFloats(x, y, z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n       * @param value1 - defines the first control point\r\n       * @param tangent1 - defines the first tangent vector\r\n       * @param value2 - defines the second control point\r\n       * @param tangent2 - defines the second tangent vector\r\n       * @param amount - defines the amount on the interpolation spline (between 0 and 1)\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n          var part2 = -2.0 * cubed + 3.0 * squared;\r\n          var part3 = cubed - 2.0 * squared + amount;\r\n          var part4 = cubed - squared;\r\n          var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\r\n          var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\r\n          var z = value1.z * part1 + value2.z * part2 + tangent1.z * part3 + tangent2.z * part4;\r\n          return new Vector3(x, y, z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\r\n       * @param start - defines the start value\r\n       * @param end - defines the end value\r\n       * @param amount - max defines amount between both (between 0 and 1)\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Lerp = function (start, end, amount) {\r\n          var result = new Vector3(0, 0, 0);\r\n          Vector3.LerpToRef(start, end, amount, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\r\n       * @param start - defines the start value\r\n       * @param end - defines the end value\r\n       * @param amount - max defines amount between both (between 0 and 1)\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.LerpToRef = function (start, end, amount, result) {\r\n          result.x = start.x + (end.x - start.x) * amount;\r\n          result.y = start.y + (end.y - start.y) * amount;\r\n          result.z = start.z + (end.z - start.z) * amount;\r\n      };\r\n      /**\r\n       * Returns the dot product (float) between the vectors \"left\" and \"right\"\r\n       * @param left - defines the left operand\r\n       * @param right - defines the right operand\r\n       * @returns the dot product\r\n       */\r\n      Vector3.Dot = function (left, right) {\r\n          return left.x * right.x + left.y * right.y + left.z * right.z;\r\n      };\r\n      /**\r\n       * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\r\n       * The cross product is then orthogonal to both \"left\" and \"right\"\r\n       * @param left - defines the left operand\r\n       * @param right - defines the right operand\r\n       * @returns the cross product\r\n       */\r\n      Vector3.Cross = function (left, right) {\r\n          var result = Vector3.Zero();\r\n          Vector3.CrossToRef(left, right, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\r\n       * The cross product is then orthogonal to both \"left\" and \"right\"\r\n       * @param left - defines the left operand\r\n       * @param right - defines the right operand\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.CrossToRef = function (left, right, result) {\r\n          var x = left.y * right.z - left.z * right.y;\r\n          var y = left.z * right.x - left.x * right.z;\r\n          var z = left.x * right.y - left.y * right.x;\r\n          result.copyFromFloats(x, y, z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 as the normalization of the given vector\r\n       * @param vector - defines the Vector3 to normalize\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Normalize = function (vector) {\r\n          var result = Vector3.Zero();\r\n          Vector3.NormalizeToRef(vector, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the given vector \"result\" with the normalization of the given first vector\r\n       * @param vector - defines the Vector3 to normalize\r\n       * @param result - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.NormalizeToRef = function (vector, result) {\r\n          vector.normalizeToRef(result);\r\n      };\r\n      /**\r\n       * Gets the minimal coordinate values between two Vector3\r\n       * @param left - defines the first operand\r\n       * @param right - defines the second operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Minimize = function (left, right) {\r\n          var min = new Vector3(left.x, left.y, left.z);\r\n          min.minimizeInPlace(right);\r\n          return min;\r\n      };\r\n      /**\r\n       * Gets the maximal coordinate values between two Vector3\r\n       * @param left - defines the first operand\r\n       * @param right - defines the second operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Maximize = function (left, right) {\r\n          var max = new Vector3(left.x, left.y, left.z);\r\n          max.maximizeInPlace(right);\r\n          return max;\r\n      };\r\n      /**\r\n       * Returns the distance between the vectors \"value1\" and \"value2\"\r\n       * @param value1 - defines the first operand\r\n       * @param value2 - defines the second operand\r\n       * @returns the distance\r\n       */\r\n      Vector3.Distance = function (value1, value2) {\r\n          return Math.sqrt(Vector3.DistanceSquared(value1, value2));\r\n      };\r\n      /**\r\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n       * @param value1 - defines the first operand\r\n       * @param value2 - defines the second operand\r\n       * @returns the squared distance\r\n       */\r\n      Vector3.DistanceSquared = function (value1, value2) {\r\n          var x = value1.x - value2.x;\r\n          var y = value1.y - value2.y;\r\n          var z = value1.z - value2.z;\r\n          return x * x + y * y + z * z;\r\n      };\r\n      /**\r\n       * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\r\n       * @param value1 - defines the first operand\r\n       * @param value2 - defines the second operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.Center = function (value1, value2) {\r\n          var center = Vector3.Add(value1, value2);\r\n          center.scaleInPlace(0.5);\r\n          return center;\r\n      };\r\n      /**\r\n       * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\r\n       * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\r\n       * to something in order to rotate it from its local system to the given target system\r\n       * Note: axis1, axis2 and axis3 are normalized during this operation\r\n       * @param axis1 - defines the first axis\r\n       * @param axis2 - defines the second axis\r\n       * @param axis3 - defines the third axis\r\n       * @returns a new Vector3\r\n       */\r\n      Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\r\n          var rotation = Vector3.Zero();\r\n          Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\r\n          return rotation;\r\n      };\r\n      /**\r\n       * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\r\n       * @param axis1 - defines the first axis\r\n       * @param axis2 - defines the second axis\r\n       * @param axis3 - defines the third axis\r\n       * @param ref - defines the Vector3 where to store the result\r\n       */\r\n      Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\r\n          var quat = MathTmp.Quaternion[0];\r\n          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\r\n          ref.copyFrom(quat.eulerAngles);\r\n      };\r\n      /**\r\n       * Creates a string representation of the Vector3\r\n       * @returns a string with the Vector3 coordinates.\r\n       */\r\n      Vector3.prototype.toString = function () {\r\n          return \"(\" + this.x + \", \" + this.y + \", \" + this.z + \")\";\r\n      };\r\n      /**\r\n       * Gets the class name\r\n       * @returns the string \"Vector3\"\r\n       */\r\n      Vector3.prototype.getClassName = function () {\r\n          return 'Vector3';\r\n      };\r\n      /**\r\n       * Creates the Vector3 hash code\r\n       * @returns a number which tends to be unique between Vector3 instances\r\n       */\r\n      Vector3.prototype.getHashCode = function () {\r\n          var hash = this.x || 0;\r\n          hash = (hash * 397) ^ (this.y || 0);\r\n          hash = (hash * 397) ^ (this.z || 0);\r\n          return hash;\r\n      };\r\n      // Operators\r\n      /**\r\n       * Creates an array containing three elements : the coordinates of the Vector3\r\n       * @returns a new array of numbers\r\n       */\r\n      Vector3.prototype.asArray = function () {\r\n          var result = [];\r\n          this.toArray(result, 0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\r\n       * @param array - defines the destination array\r\n       * @param index - defines the offset in the destination array\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.toArray = function (array, index) {\r\n          if (index === void 0) { index = 0; }\r\n          array[index] = this.x;\r\n          array[index + 1] = this.y;\r\n          array[index + 2] = this.z;\r\n          return this;\r\n      };\r\n      /**\r\n       * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\r\n       * @returns a new Quaternion object, computed from the Vector3 coordinates\r\n       */\r\n      Vector3.prototype.toQuaternion = function () {\r\n          return Quaternion.Identity.setEuler(this.y, this.x, this.z);\r\n      };\r\n      /**\r\n       * Adds the given vector to the current Vector3\r\n       * @param otherVector - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.addInPlace = function (otherVector) {\r\n          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\r\n      };\r\n      /**\r\n       * Adds the given coordinates to the current Vector3\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\r\n          this.x += x;\r\n          this.y += y;\r\n          this.z += z;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector3, result of the addition the current Vector3 and the given vector\r\n       * @param otherVector - defines the second operand\r\n       * @returns the resulting Vector3\r\n       */\r\n      Vector3.prototype.add = function (otherVector) {\r\n          return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\r\n      };\r\n      /**\r\n       * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\r\n       * @param otherVector - defines the second operand\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.addToRef = function (otherVector, result) {\r\n          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\r\n      };\r\n      /**\r\n       * Subtract the given vector from the current Vector3\r\n       * @param otherVector - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.subtractInPlace = function (otherVector) {\r\n          this.x -= otherVector.x;\r\n          this.y -= otherVector.y;\r\n          this.z -= otherVector.z;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\r\n       * @param otherVector - defines the second operand\r\n       * @returns the resulting Vector3\r\n       */\r\n      Vector3.prototype.subtract = function (otherVector) {\r\n          return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\r\n      };\r\n      /**\r\n       * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\r\n       * @param otherVector - defines the second operand\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.subtractToRef = function (otherVector, result) {\r\n          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the resulting Vector3\r\n       */\r\n      Vector3.prototype.subtractFromFloats = function (x, y, z) {\r\n          return new Vector3(this.x - x, this.y - y, this.z - z);\r\n      };\r\n      /**\r\n       * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\r\n          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\r\n      };\r\n      /**\r\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\r\n       * @param matrix - The transformation matrix\r\n       */\r\n      Vector3.prototype.applyMatrix4 = function (matrix) {\r\n          this.applyMatrix4ToRef(matrix, this);\r\n      };\r\n      /**\r\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\r\n       * @param matrix - The transformation matrix\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.applyMatrix4ToRef = function (matrix, result) {\r\n          var _a = this, x = _a.x, y = _a.y, z = _a.z;\r\n          var m = matrix.m;\r\n          var w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\r\n          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\r\n          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\r\n          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\r\n          return result;\r\n      };\r\n      /**\r\n       * Rotates the current Vector3 based on the given quaternion\r\n       * @param q - defines the Quaternion\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.rotate = function (q) {\r\n          return this.rotateToRef(q, this);\r\n      };\r\n      /**\r\n       * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\r\n       * @param q - defines the Quaternion\r\n       * @param result - defines the target Vector3\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.rotateToRef = function (q, result) {\r\n          var _a = this, x = _a.x, y = _a.y, z = _a.z;\r\n          var qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n          // calculate quat * vector\r\n          var ix = qw * x + qy * z - qz * y;\r\n          var iy = qw * y + qz * x - qx * z;\r\n          var iz = qw * z + qx * y - qy * x;\r\n          var iw = -qx * x - qy * y - qz * z;\r\n          // calculate result * inverse quat\r\n          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n          return result;\r\n      };\r\n      /**\r\n       * Gets a new Vector3 set with the current Vector3 negated coordinates\r\n       * @returns a new Vector3\r\n       */\r\n      Vector3.prototype.negate = function () {\r\n          return new Vector3(-this.x, -this.y, -this.z);\r\n      };\r\n      /**\r\n       * Multiplies the Vector3 coordinates by the float \"scale\"\r\n       * @param scale - defines the multiplier factor\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.scaleInPlace = function (scale) {\r\n          this.x *= scale;\r\n          this.y *= scale;\r\n          this.z *= scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\r\n       * @param scale - defines the multiplier factor\r\n       * @returns a new Vector3\r\n       */\r\n      Vector3.prototype.scale = function (scale) {\r\n          return new Vector3(this.x * scale, this.y * scale, this.z * scale);\r\n      };\r\n      /**\r\n       * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\r\n       * @param scale - defines the multiplier factor\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.scaleToRef = function (scale, result) {\r\n          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\r\n      };\r\n      /**\r\n       * Scale the current Vector3 values by a factor and add the result to a given Vector3\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the unmodified current Vector3\r\n       */\r\n      Vector3.prototype.scaleAndAddToRef = function (scale, result) {\r\n          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\r\n      };\r\n      /**\r\n       * Returns true if the current Vector3 and the given vector coordinates are strictly equal\r\n       * @param otherVector - defines the second operand\r\n       * @returns true if both vectors are equals\r\n       */\r\n      Vector3.prototype.equals = function (otherVector) {\r\n          return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z;\r\n      };\r\n      /**\r\n       * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\r\n       * @param otherVector - defines the second operand\r\n       * @param epsilon - defines the minimal distance to define values as equals\r\n       * @returns true if both vectors are distant less than epsilon\r\n       */\r\n      Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\r\n          if (epsilon === void 0) { epsilon = Epsilon; }\r\n          return (otherVector &&\r\n              Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\r\n              Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\r\n              Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\r\n      };\r\n      /**\r\n       * Returns true if the current Vector3 coordinates equals the given floats\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns true if both vectors are equals\r\n       */\r\n      Vector3.prototype.equalsToFloats = function (x, y, z) {\r\n          return this.x === x && this.y === y && this.z === z;\r\n      };\r\n      /**\r\n       * Multiplies the current Vector3 coordinates by the given ones\r\n       * @param otherVector - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.multiplyInPlace = function (otherVector) {\r\n          this.x *= otherVector.x;\r\n          this.y *= otherVector.y;\r\n          this.z *= otherVector.z;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\r\n       * @param otherVector - defines the second operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.prototype.multiply = function (otherVector) {\r\n          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\r\n      };\r\n      /**\r\n       * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\r\n       * @param otherVector - defines the second operand\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.multiplyToRef = function (otherVector, result) {\r\n          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.prototype.multiplyByFloats = function (x, y, z) {\r\n          return new Vector3(this.x * x, this.y * y, this.z * z);\r\n      };\r\n      /**\r\n       * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\r\n       * @param otherVector - defines the second operand\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.prototype.divide = function (otherVector) {\r\n          return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\r\n      };\r\n      /**\r\n       * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\r\n       * @param otherVector - defines the second operand\r\n       * @param result - defines the Vector3 object where to store the result\r\n       * @returns the current Vector3\r\n       */\r\n      Vector3.prototype.divideToRef = function (otherVector, result) {\r\n          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\r\n      };\r\n      /**\r\n       * Divides the current Vector3 coordinates by the given ones.\r\n       * @param otherVector - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.divideInPlace = function (otherVector) {\r\n          return this.divideToRef(otherVector, this);\r\n      };\r\n      /**\r\n       * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\r\n       * @param other - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.minimizeInPlace = function (other) {\r\n          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\r\n      };\r\n      /**\r\n       * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\r\n       * @param other - defines the second operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.maximizeInPlace = function (other) {\r\n          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\r\n      };\r\n      /**\r\n       * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\r\n          if (x < this.x) {\r\n              this.x = x;\r\n          }\r\n          if (y < this.y) {\r\n              this.y = y;\r\n          }\r\n          if (z < this.z) {\r\n              this.z = z;\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\r\n          if (x > this.x) {\r\n              this.x = x;\r\n          }\r\n          if (y > this.y) {\r\n              this.y = y;\r\n          }\r\n          if (z > this.z) {\r\n              this.z = z;\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector3 from current Vector3 floored values\r\n       * @returns a new Vector3\r\n       */\r\n      Vector3.prototype.floor = function () {\r\n          return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\r\n      };\r\n      /**\r\n       * Gets a new Vector3 from current Vector3 floored values\r\n       * @returns a new Vector3\r\n       */\r\n      Vector3.prototype.fract = function () {\r\n          return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\r\n      };\r\n      // Properties\r\n      /**\r\n       * Gets the length of the Vector3\r\n       * @returns the length of the Vecto3\r\n       */\r\n      Vector3.prototype.length = function () {\r\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\r\n      };\r\n      /**\r\n       * Gets the squared length of the Vector3\r\n       * @returns squared length of the Vector3\r\n       */\r\n      Vector3.prototype.lengthSquared = function () {\r\n          return this.x * this.x + this.y * this.y + this.z * this.z;\r\n      };\r\n      /**\r\n       * Normalize the current Vector3.\r\n       * Please note that this is an in place operation.\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.normalize = function () {\r\n          return this.normalizeFromLength(this.length());\r\n      };\r\n      /**\r\n       * Normalize the current Vector3 with the given input length.\r\n       * Please note that this is an in place operation.\r\n       * @param len - the length of the vector\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.normalizeFromLength = function (len) {\r\n          if (len === 0 || len === 1.0) {\r\n              return this;\r\n          }\r\n          return this.scaleInPlace(1.0 / len);\r\n      };\r\n      /**\r\n       * Normalize the current Vector3 to a new vector\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.prototype.normalizeToNew = function () {\r\n          var normalized = new Vector3(0, 0, 0);\r\n          this.normalizeToRef(normalized);\r\n          return normalized;\r\n      };\r\n      /**\r\n       * Normalize the current Vector3 to the reference\r\n       * @param reference - define the Vector3 to update\r\n       * @returns the updated Vector3\r\n       */\r\n      Vector3.prototype.normalizeToRef = function (reference) {\r\n          var len = this.length();\r\n          if (len === 0 || len === 1.0) {\r\n              return reference.copyFromFloats(this.x, this.y, this.z);\r\n          }\r\n          return this.scaleToRef(1.0 / len, reference);\r\n      };\r\n      /**\r\n       * Creates a new Vector3 copied from the current Vector3\r\n       * @returns the new Vector3\r\n       */\r\n      Vector3.prototype.clone = function () {\r\n          return new Vector3(this.x, this.y, this.z);\r\n      };\r\n      /**\r\n       * Copies the given vector coordinates to the current Vector3 ones\r\n       * @param source - defines the source Vector3\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.copyFrom = function (source) {\r\n          return this.copyFromFloats(source.x, source.y, source.z);\r\n      };\r\n      /**\r\n       * Copies the given floats to the current Vector3 coordinates\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.copyFromFloats = function (x, y, z) {\r\n          this.x = x;\r\n          this.y = y;\r\n          this.z = z;\r\n          return this;\r\n      };\r\n      /**\r\n       * Copies the given floats to the current Vector3 coordinates\r\n       * @param x - defines the x coordinate of the operand\r\n       * @param y - defines the y coordinate of the operand\r\n       * @param z - defines the z coordinate of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.set = function (x, y, z) {\r\n          return this.copyFromFloats(x, y, z);\r\n      };\r\n      /**\r\n       * Copies the given float to the current Vector3 coordinates\r\n       * @param v - defines the x, y and z coordinates of the operand\r\n       * @returns the current updated Vector3\r\n       */\r\n      Vector3.prototype.setAll = function (v) {\r\n          this.x = this.y = this.z = v;\r\n          return this;\r\n      };\r\n      return Vector3;\r\n  }());\n\n  // Temporary pre-allocated objects for engine internal use\r\n  // usage in any internal function :\r\n  // var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\r\n  // There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\r\n  /**\r\n   * @internal\r\n   * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\r\n   */\r\n  var MathTmp = {\r\n      Vector3: buildArray(6, Vector3.Zero),\r\n      Matrix: buildArray(2, Matrix.Identity),\r\n      Quaternion: buildArray(3, Quaternion.Zero),\r\n      staticUp: Vector3.Up(),\r\n      tmpMatrix: Matrix.Zero()\r\n  };\n\n  /**\r\n   * Defines angle representation\r\n   * @public\r\n   */\r\n  var Angle = /** @class */ (function () {\r\n      /**\r\n       * Creates an Angle object of \"radians\" radians (float).\r\n       */\r\n      function Angle(radians) {\r\n          this._radians = radians;\r\n          if (this._radians < 0.0) {\r\n              this._radians += 2.0 * Math.PI;\r\n          }\r\n      }\r\n      /**\r\n       * Gets a new Angle object valued with the angle value in radians between the two given vectors\r\n       * @param a - defines first vector\r\n       * @param b - defines second vector\r\n       * @returns a new Angle\r\n       */\r\n      Angle.BetweenTwoPoints = function (a, b) {\r\n          var delta = b.subtract(a);\r\n          var theta = Math.atan2(delta.y, delta.x);\r\n          return new Angle(theta);\r\n      };\r\n      /**\r\n       * Gets a new Angle object from the given float in radians\r\n       * @param radians - defines the angle value in radians\r\n       * @returns a new Angle\r\n       */\r\n      Angle.FromRadians = function (radians) {\r\n          return new Angle(radians);\r\n      };\r\n      /**\r\n       * Gets a new Angle object from the given float in degrees\r\n       * @param degrees - defines the angle value in degrees\r\n       * @returns a new Angle\r\n       */\r\n      Angle.FromDegrees = function (degrees) {\r\n          return new Angle((degrees * Math.PI) / 180.0);\r\n      };\r\n      /**\r\n       * Get value in degrees\r\n       * @returns the Angle value in degrees (float)\r\n       */\r\n      Angle.prototype.degrees = function () {\r\n          return (this._radians * 180.0) / Math.PI;\r\n      };\r\n      /**\r\n       * Get value in radians\r\n       * @returns the Angle value in radians (float)\r\n       */\r\n      Angle.prototype.radians = function () {\r\n          return this._radians;\r\n      };\r\n      return Angle;\r\n  }());\n\n  /**\r\n   * Class representing a vector containing 2 coordinates\r\n   * @public\r\n   */\r\n  var Vector2 = /** @class */ (function () {\r\n      /**\r\n       * Creates a new Vector2 from the given x and y coordinates\r\n       * @param x - defines the first coordinate\r\n       * @param y - defines the second coordinate\r\n       */\r\n      function Vector2(\r\n      /** defines the first coordinate */\r\n      x, \r\n      /** defines the second coordinate */\r\n      y) {\r\n          if (x === void 0) { x = 0; }\r\n          if (y === void 0) { y = 0; }\r\n          this.x = x;\r\n          this.y = y;\r\n      }\r\n      /**\r\n       * Gets a new Vector2(0, 0)\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Zero = function () {\r\n          return new Vector2(0, 0);\r\n      };\r\n      /**\r\n       * Gets a new Vector2(1, 1)\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.One = function () {\r\n          return new Vector2(1, 1);\r\n      };\r\n      /**\r\n       * Returns a new Vector2 as the result of the addition of the two given vectors.\r\n       * @param vector1 - the first vector\r\n       * @param vector2 - the second vector\r\n       * @returns the resulting vector\r\n       */\r\n      Vector2.Add = function (vector1, vector2) {\r\n          return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\r\n      };\r\n      /**\r\n       * Gets a new Vector2 set from the given index element of the given array\r\n       * @param array - defines the data source\r\n       * @param offset - defines the offset in the data source\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Vector2(array[offset], array[offset + 1]);\r\n      };\r\n      /**\r\n       * Sets \"result\" from the given index element of the given array\r\n       * @param array - defines the data source\r\n       * @param offset - defines the offset in the data source\r\n       * @param result - defines the target vector\r\n       */\r\n      Vector2.FromArrayToRef = function (array, offset, result) {\r\n          result.x = array[offset];\r\n          result.y = array[offset + 1];\r\n      };\r\n      /**\r\n       * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\r\n       * @param value1 - defines 1st point of control\r\n       * @param value2 - defines 2nd point of control\r\n       * @param value3 - defines 3rd point of control\r\n       * @param value4 - defines 4th point of control\r\n       * @param amount - defines the interpolation factor\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var x = 0.5 *\r\n              (2.0 * value2.x +\r\n                  (-value1.x + value3.x) * amount +\r\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared +\r\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\r\n          var y = 0.5 *\r\n              (2.0 * value2.y +\r\n                  (-value1.y + value3.y) * amount +\r\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared +\r\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\r\n       * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\r\n       * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\r\n       * @param value - defines the value to clamp\r\n       * @param min - defines the lower limit\r\n       * @param max - defines the upper limit\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Clamp = function (value, min, max) {\r\n          var x = value.x;\r\n          x = x > max.x ? max.x : x;\r\n          x = x < min.x ? min.x : x;\r\n          var y = value.y;\r\n          y = y > max.y ? max.y : y;\r\n          y = y < min.y ? min.y : y;\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\r\n       * @param value1 - defines the 1st control point\r\n       * @param tangent1 - defines the outgoing tangent\r\n       * @param value2 - defines the 2nd control point\r\n       * @param tangent2 - defines the incoming tangent\r\n       * @param amount - defines the interpolation factor\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\r\n          var squared = amount * amount;\r\n          var cubed = amount * squared;\r\n          var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\r\n          var part2 = -2.0 * cubed + 3.0 * squared;\r\n          var part3 = cubed - 2.0 * squared + amount;\r\n          var part4 = cubed - squared;\r\n          var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\r\n          var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\r\n       * @param start - defines the start vector\r\n       * @param end - defines the end vector\r\n       * @param amount - defines the interpolation factor\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Lerp = function (start, end, amount) {\r\n          var x = start.x + (end.x - start.x) * amount;\r\n          var y = start.y + (end.y - start.y) * amount;\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Gets the dot product of the vector \"left\" and the vector \"right\"\r\n       * @param left - defines first vector\r\n       * @param right - defines second vector\r\n       * @returns the dot product (float)\r\n       */\r\n      Vector2.Dot = function (left, right) {\r\n          return left.x * right.x + left.y * right.y;\r\n      };\r\n      /**\r\n       * Returns a new Vector2 equal to the normalized given vector\r\n       * @param vector - defines the vector to normalize\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Normalize = function (vector) {\r\n          var newVector = new Vector2(vector.x, vector.y);\r\n          newVector.normalize();\r\n          return newVector;\r\n      };\r\n      /**\r\n       * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\r\n       * @param left - defines 1st vector\r\n       * @param right - defines 2nd vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Minimize = function (left, right) {\r\n          var x = left.x < right.x ? left.x : right.x;\r\n          var y = left.y < right.y ? left.y : right.y;\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\r\n       * @param left - defines 1st vector\r\n       * @param right - defines 2nd vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Maximize = function (left, right) {\r\n          var x = left.x > right.x ? left.x : right.x;\r\n          var y = left.y > right.y ? left.y : right.y;\r\n          return new Vector2(x, y);\r\n      };\r\n      /**\r\n       * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\r\n       * @param vector - defines the vector to transform\r\n       * @param transformation - defines the matrix to apply\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Transform = function (vector, transformation) {\r\n          var r = Vector2.Zero();\r\n          Vector2.TransformToRef(vector, transformation, r);\r\n          return r;\r\n      };\r\n      /**\r\n       * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\r\n       * @param vector - defines the vector to transform\r\n       * @param transformation - defines the matrix to apply\r\n       * @param result - defines the target vector\r\n       */\r\n      Vector2.TransformToRef = function (vector, transformation, result) {\r\n          var m = transformation.m;\r\n          var x = vector.x * m[0] + vector.y * m[4] + m[12];\r\n          var y = vector.x * m[1] + vector.y * m[5] + m[13];\r\n          result.x = x;\r\n          result.y = y;\r\n      };\r\n      /**\r\n       * Determines if a given vector is included in a triangle\r\n       * @param p - defines the vector to test\r\n       * @param p0 - defines 1st triangle point\r\n       * @param p1 - defines 2nd triangle point\r\n       * @param p2 - defines 3rd triangle point\r\n       * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\r\n       */\r\n      Vector2.PointInTriangle = function (p, p0, p1, p2) {\r\n          var a = (1 / 2) * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\r\n          var sign = a < 0 ? -1 : 1;\r\n          var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\r\n          var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\r\n          return s > 0 && t > 0 && s + t < 2 * a * sign;\r\n      };\r\n      /**\r\n       * Gets the distance between the vectors \"value1\" and \"value2\"\r\n       * @param value1 - defines first vector\r\n       * @param value2 - defines second vector\r\n       * @returns the distance between vectors\r\n       */\r\n      Vector2.Distance = function (value1, value2) {\r\n          return Math.sqrt(Vector2.DistanceSquared(value1, value2));\r\n      };\r\n      /**\r\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n       * @param value1 - defines first vector\r\n       * @param value2 - defines second vector\r\n       * @returns the squared distance between vectors\r\n       */\r\n      Vector2.DistanceSquared = function (value1, value2) {\r\n          var x = value1.x - value2.x;\r\n          var y = value1.y - value2.y;\r\n          return x * x + y * y;\r\n      };\r\n      /**\r\n       * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\r\n       * @param value1 - defines first vector\r\n       * @param value2 - defines second vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.Center = function (value1, value2) {\r\n          var center = Vector2.Add(value1, value2);\r\n          center.scaleInPlace(0.5);\r\n          return center;\r\n      };\r\n      /**\r\n       * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\r\n       * @param p - defines the middle point\r\n       * @param segA - defines one point of the segment\r\n       * @param segB - defines the other point of the segment\r\n       * @returns the shortest distance\r\n       */\r\n      Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\r\n          var l2 = Vector2.DistanceSquared(segA, segB);\r\n          if (l2 === 0.0) {\r\n              return Vector2.Distance(p, segA);\r\n          }\r\n          var v = segB.subtract(segA);\r\n          var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\r\n          var proj = segA.add(v.multiplyByFloats(t, t));\r\n          return Vector2.Distance(p, proj);\r\n      };\r\n      /**\r\n       * Gets a string with the Vector2 coordinates\r\n       * @returns a string with the Vector2 coordinates\r\n       */\r\n      Vector2.prototype.toString = function () {\r\n          return '{X: ' + this.x + ' Y:' + this.y + '}';\r\n      };\r\n      /**\r\n       * Gets class name\r\n       * @returns the string \"Vector2\"\r\n       */\r\n      Vector2.prototype.getClassName = function () {\r\n          return 'Vector2';\r\n      };\r\n      /**\r\n       * Gets current vector hash code\r\n       * @returns the Vector2 hash code as a number\r\n       */\r\n      Vector2.prototype.getHashCode = function () {\r\n          var hash = this.x || 0;\r\n          hash = (hash * 397) ^ (this.y || 0);\r\n          return hash;\r\n      };\r\n      // Operators\r\n      /**\r\n       * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\r\n       * @param array - defines the source array\r\n       * @param index - defines the offset in source array\r\n       * @returns the current Vector2\r\n       */\r\n      Vector2.prototype.toArray = function (array, index) {\r\n          if (index === void 0) { index = 0; }\r\n          array[index] = this.x;\r\n          array[index + 1] = this.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Copy the current vector to an array\r\n       * @returns a new array with 2 elements: the Vector2 coordinates.\r\n       */\r\n      Vector2.prototype.asArray = function () {\r\n          var result = new Array();\r\n          this.toArray(result, 0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Sets the Vector2 coordinates with the given Vector2 coordinates\r\n       * @param source - defines the source Vector2\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.copyFrom = function (source) {\r\n          this.x = source.x;\r\n          this.y = source.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the Vector2 coordinates with the given floats\r\n       * @param x - defines the first coordinate\r\n       * @param y - defines the second coordinate\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.copyFromFloats = function (x, y) {\r\n          this.x = x;\r\n          this.y = y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the Vector2 coordinates with the given floats\r\n       * @param x - defines the first coordinate\r\n       * @param y - defines the second coordinate\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.set = function (x, y) {\r\n          return this.copyFromFloats(x, y);\r\n      };\r\n      /**\r\n       * Add another vector with the current one\r\n       * @param otherVector - defines the other vector\r\n       * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\r\n       */\r\n      Vector2.prototype.add = function (otherVector) {\r\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\r\n      };\r\n      /**\r\n       * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @param result - defines the target vector\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.addToRef = function (otherVector, result) {\r\n          result.x = this.x + otherVector.x;\r\n          result.y = this.y + otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Set the Vector2 coordinates by adding the given Vector2 coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.addInPlace = function (otherVector) {\r\n          this.x += otherVector.x;\r\n          this.y += otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.addVector3 = function (otherVector) {\r\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\r\n      };\r\n      /**\r\n       * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\r\n       * @param otherVector - defines the other vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.subtract = function (otherVector) {\r\n          return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\r\n      };\r\n      /**\r\n       * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\r\n       * @param otherVector - defines the other vector\r\n       * @param result - defines the target vector\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.subtractToRef = function (otherVector, result) {\r\n          result.x = this.x - otherVector.x;\r\n          result.y = this.y - otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.subtractInPlace = function (otherVector) {\r\n          this.x -= otherVector.x;\r\n          this.y -= otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Multiplies in place the current Vector2 coordinates by the given ones\r\n       * @param otherVector - defines the other vector\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.multiplyInPlace = function (otherVector) {\r\n          this.x *= otherVector.x;\r\n          this.y *= otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.multiply = function (otherVector) {\r\n          return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\r\n      };\r\n      /**\r\n       * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @param result - defines the target vector\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.multiplyToRef = function (otherVector, result) {\r\n          result.x = this.x * otherVector.x;\r\n          result.y = this.y * otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\r\n       * @param x - defines the first coordinate\r\n       * @param y - defines the second coordinate\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.multiplyByFloats = function (x, y) {\r\n          return new Vector2(this.x * x, this.y * y);\r\n      };\r\n      /**\r\n       * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.divide = function (otherVector) {\r\n          return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\r\n      };\r\n      /**\r\n       * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\r\n       * @param otherVector - defines the other vector\r\n       * @param result - defines the target vector\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.divideToRef = function (otherVector, result) {\r\n          result.x = this.x / otherVector.x;\r\n          result.y = this.y / otherVector.y;\r\n          return this;\r\n      };\r\n      /**\r\n       * Divides the current Vector2 coordinates by the given ones\r\n       * @param otherVector - defines the other vector\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.divideInPlace = function (otherVector) {\r\n          return this.divideToRef(otherVector, this);\r\n      };\r\n      /**\r\n       * Gets a new Vector2 with current Vector2 negated coordinates\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.negate = function () {\r\n          return new Vector2(-this.x, -this.y);\r\n      };\r\n      /**\r\n       * Multiply the Vector2 coordinates by scale\r\n       * @param scale - defines the scaling factor\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.scaleInPlace = function (scale) {\r\n          this.x *= scale;\r\n          this.y *= scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Vector2 scaled by \"scale\" from the current Vector2\r\n       * @param scale - defines the scaling factor\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.scale = function (scale) {\r\n          var result = new Vector2(0, 0);\r\n          this.scaleToRef(scale, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Scale the current Vector2 values by a factor to a given Vector2\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Vector2 object where to store the result\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.scaleToRef = function (scale, result) {\r\n          result.x = this.x * scale;\r\n          result.y = this.y * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current Vector2 values by a factor and add the result to a given Vector2\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Vector2 object where to store the result\r\n       * @returns the unmodified current Vector2\r\n       */\r\n      Vector2.prototype.scaleAndAddToRef = function (scale, result) {\r\n          result.x += this.x * scale;\r\n          result.y += this.y * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a boolean if two vectors are equals\r\n       * @param otherVector - defines the other vector\r\n       * @returns true if the given vector coordinates strictly equal the current Vector2 ones\r\n       */\r\n      Vector2.prototype.equals = function (otherVector) {\r\n          return otherVector && this.x === otherVector.x && this.y === otherVector.y;\r\n      };\r\n      /**\r\n       * Gets a boolean if two vectors are equals (using an epsilon value)\r\n       * @param otherVector - defines the other vector\r\n       * @param epsilon - defines the minimal distance to consider equality\r\n       * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\r\n       */\r\n      Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\r\n          if (epsilon === void 0) { epsilon = Epsilon; }\r\n          return (otherVector &&\r\n              Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\r\n              Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\r\n      };\r\n      /**\r\n       * Gets a new Vector2 from current Vector2 floored values\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.floor = function () {\r\n          return new Vector2(Math.floor(this.x), Math.floor(this.y));\r\n      };\r\n      /**\r\n       * Gets a new Vector2 from current Vector2 floored values\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.fract = function () {\r\n          return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\r\n      };\r\n      // Properties\r\n      /**\r\n       * Gets the length of the vector\r\n       * @returns the vector length (float)\r\n       */\r\n      Vector2.prototype.length = function () {\r\n          return Math.sqrt(this.x * this.x + this.y * this.y);\r\n      };\r\n      /**\r\n       * Gets the vector squared length\r\n       * @returns the vector squared length (float)\r\n       */\r\n      Vector2.prototype.lengthSquared = function () {\r\n          return this.x * this.x + this.y * this.y;\r\n      };\r\n      // Methods\r\n      /**\r\n       * Normalize the vector\r\n       * @returns the current updated Vector2\r\n       */\r\n      Vector2.prototype.normalize = function () {\r\n          var len = this.length();\r\n          if (len === 0) {\r\n              return this;\r\n          }\r\n          var num = 1.0 / len;\r\n          this.x *= num;\r\n          this.y *= num;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets a new Vector2 copied from the Vector2\r\n       * @returns a new Vector2\r\n       */\r\n      Vector2.prototype.clone = function () {\r\n          return new Vector2(this.x, this.y);\r\n      };\r\n      return Vector2;\r\n  }());\n\n  /**\r\n   * This represents an arc in a 2d space.\r\n   * @public\r\n   */\r\n  var Arc2 = /** @class */ (function () {\r\n      /**\r\n       * Creates an Arc object from the three given points : start, middle and end.\r\n       * @param startPoint - Defines the start point of the arc\r\n       * @param midPoint - Defines the midlle point of the arc\r\n       * @param endPoint - Defines the end point of the arc\r\n       */\r\n      function Arc2(\r\n      /** Defines the start point of the arc */\r\n      startPoint, \r\n      /** Defines the mid point of the arc */\r\n      midPoint, \r\n      /** Defines the end point of the arc */\r\n      endPoint) {\r\n          this.startPoint = startPoint;\r\n          this.midPoint = midPoint;\r\n          this.endPoint = endPoint;\r\n          var temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\r\n          var startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\r\n          var midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\r\n          var det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) - (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\r\n          this.centerPoint = new Vector2((startToMid * (midPoint.y - endPoint.y) - midToEnd * (startPoint.y - midPoint.y)) / det, ((startPoint.x - midPoint.x) * midToEnd - (midPoint.x - endPoint.x) * startToMid) / det);\r\n          this.radius = this.centerPoint.subtract(this.startPoint).length();\r\n          this.startAngle = Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\r\n          var a1 = this.startAngle.degrees();\r\n          var a2 = Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\r\n          var a3 = Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\r\n          // angles correction\r\n          if (a2 - a1 > +180.0) {\r\n              a2 -= 360.0;\r\n          }\r\n          if (a2 - a1 < -180.0) {\r\n              a2 += 360.0;\r\n          }\r\n          if (a3 - a2 > +180.0) {\r\n              a3 -= 360.0;\r\n          }\r\n          if (a3 - a2 < -180.0) {\r\n              a3 += 360.0;\r\n          }\r\n          this.orientation = a2 - a1 < 0 ? exports.Orientation.CW : exports.Orientation.CCW;\r\n          this.angle = Angle.FromDegrees(this.orientation === exports.Orientation.CW ? a1 - a3 : a3 - a1);\r\n      }\r\n      return Arc2;\r\n  }());\n\n  /**\r\n   * Defines the 3 main axes\r\n   * @public\r\n   */\r\n  var Axis = /** @class */ (function () {\r\n      function Axis() {\r\n      }\r\n      /** X axis */\r\n      Axis.X = new Vector3(1.0, 0.0, 0.0);\r\n      /** Y axis */\r\n      Axis.Y = new Vector3(0.0, 1.0, 0.0);\r\n      /** Z axis */\r\n      Axis.Z = new Vector3(0.0, 0.0, 1.0);\r\n      return Axis;\r\n  }());\n\n  /**\r\n   * Class used to represent a Bezier curve\r\n   * @public\r\n   */\r\n  var BezierCurve = /** @class */ (function () {\r\n      function BezierCurve() {\r\n      }\r\n      /**\r\n       * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\r\n       * @param t - defines the time\r\n       * @param x1 - defines the left coordinate on X axis\r\n       * @param y1 - defines the left coordinate on Y axis\r\n       * @param x2 - defines the right coordinate on X axis\r\n       * @param y2 - defines the right coordinate on Y axis\r\n       * @returns the interpolated value\r\n       */\r\n      BezierCurve.Interpolate = function (t, x1, y1, x2, y2) {\r\n          // Extract X (which is equal to time here)\r\n          var f0 = 1 - 3 * x2 + 3 * x1;\r\n          var f1 = 3 * x2 - 6 * x1;\r\n          var f2 = 3 * x1;\r\n          var refinedT = t;\r\n          for (var i = 0; i < 5; i++) {\r\n              var refinedT2 = refinedT * refinedT;\r\n              var refinedT3 = refinedT2 * refinedT;\r\n              var x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\r\n              var slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\r\n              refinedT -= (x - t) * slope;\r\n              refinedT = Math.min(1, Math.max(0, refinedT));\r\n          }\r\n          // Resolve cubic bezier for the given x\r\n          return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\r\n              3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\r\n              Math.pow(refinedT, 3));\r\n      };\r\n      return BezierCurve;\r\n  }());\n\n  /**\r\n   * Class used to hold a RBGA color\r\n   * @public\r\n   */\r\n  var Color4 = /** @class */ (function () {\r\n      /**\r\n       * Creates a new Color4 object from red, green, blue values, all between 0 and 1\r\n       * @param r - defines the red component (between 0 and 1, default is 0)\r\n       * @param g - defines the green component (between 0 and 1, default is 0)\r\n       * @param b - defines the blue component (between 0 and 1, default is 0)\r\n       * @param a - defines the alpha component (between 0 and 1, default is 1)\r\n       */\r\n      function Color4(\r\n      /**\r\n       * Defines the red component (between 0 and 1, default is 0)\r\n       */\r\n      r, \r\n      /**\r\n       * Defines the green component (between 0 and 1, default is 0)\r\n       */\r\n      g, \r\n      /**\r\n       * Defines the blue component (between 0 and 1, default is 0)\r\n       */\r\n      b, \r\n      /**\r\n       * Defines the alpha component (between 0 and 1, default is 1)\r\n       */\r\n      a) {\r\n          if (r === void 0) { r = 0; }\r\n          if (g === void 0) { g = 0; }\r\n          if (b === void 0) { b = 0; }\r\n          if (a === void 0) { a = 1; }\r\n          this.r = r;\r\n          this.g = g;\r\n          this.b = b;\r\n          this.a = a;\r\n      }\r\n      // Statics\r\n      /**\r\n       * Creates a new Color4 from the string containing valid hexadecimal values\r\n       * @param hex - defines a string containing valid hexadecimal values\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.FromHexString = function (hex) {\r\n          if (hex.substring(0, 1) !== '#' || hex.length !== 9) {\r\n              return new Color4(0.0, 0.0, 0.0, 0.0);\r\n          }\r\n          var r = parseInt(hex.substring(1, 3), 16);\r\n          var g = parseInt(hex.substring(3, 5), 16);\r\n          var b = parseInt(hex.substring(5, 7), 16);\r\n          var a = parseInt(hex.substring(7, 9), 16);\r\n          return Color4.FromInts(r, g, b, a);\r\n      };\r\n      /**\r\n       * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n       * @param left - defines the start value\r\n       * @param right - defines the end value\r\n       * @param amount - defines the gradient factor\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Lerp = function (left, right, amount) {\r\n          var result = new Color4(0.0, 0.0, 0.0, 0.0);\r\n          Color4.LerpToRef(left, right, amount, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\r\n       * @param left - defines the start value\r\n       * @param right - defines the end value\r\n       * @param amount - defines the gradient factor\r\n       * @param result - defines the Color4 object where to store data\r\n       */\r\n      Color4.LerpToRef = function (left, right, amount, result) {\r\n          result.r = left.r + (right.r - left.r) * amount;\r\n          result.g = left.g + (right.g - left.g) * amount;\r\n          result.b = left.b + (right.b - left.b) * amount;\r\n          result.a = left.a + (right.a - left.a) * amount;\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a red color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color4.Red = function () {\r\n          return new Color4(1.0, 0, 0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a green color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Green = function () {\r\n          return new Color4(0, 1.0, 0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a blue color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Blue = function () {\r\n          return new Color4(0, 0, 1.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a black color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Black = function () {\r\n          return new Color4(0, 0, 0, 1);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a white color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.White = function () {\r\n          return new Color4(1, 1, 1, 1);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a purple color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Purple = function () {\r\n          return new Color4(0.5, 0, 0.5, 1);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a magenta color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Magenta = function () {\r\n          return new Color4(1, 0, 1, 1);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a yellow color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Yellow = function () {\r\n          return new Color4(1, 1, 0, 1);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a gray color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Gray = function () {\r\n          return new Color4(0.5, 0.5, 0.5, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a teal color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Teal = function () {\r\n          return new Color4(0, 1.0, 1.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color4 value containing a transparent color\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.Clear = function () {\r\n          return new Color4(0, 0, 0, 0);\r\n      };\r\n      /**\r\n       * Creates a new Color4 from a Color3 and an alpha value\r\n       * @param color3 - defines the source Color3 to read from\r\n       * @param alpha - defines the alpha component (1.0 by default)\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.FromColor3 = function (color3, alpha) {\r\n          if (alpha === void 0) { alpha = 1.0; }\r\n          return new Color4(color3.r, color3.g, color3.b, alpha);\r\n      };\r\n      /**\r\n       * Creates a new Color4 from the starting index element of the given array\r\n       * @param array - defines the source array to read from\r\n       * @param offset - defines the offset in the source array\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\r\n      };\r\n      /**\r\n       * Creates a new Color3 from integer values (less than 256)\r\n       * @param r - defines the red component to read from (value between 0 and 255)\r\n       * @param g - defines the green component to read from (value between 0 and 255)\r\n       * @param b - defines the blue component to read from (value between 0 and 255)\r\n       * @param a - defines the alpha component to read from (value between 0 and 255)\r\n       * @returns a new Color3 object\r\n       */\r\n      Color4.FromInts = function (r, g, b, a) {\r\n          return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\r\n      };\r\n      /**\r\n       * Check the content of a given array and convert it to an array containing RGBA data\r\n       * If the original array was already containing count * 4 values then it is returned directly\r\n       * @param colors - defines the array to check\r\n       * @param count - defines the number of RGBA data to expect\r\n       * @returns an array containing count * 4 values (RGBA)\r\n       */\r\n      Color4.CheckColors4 = function (colors, count) {\r\n          // Check if color3 was used\r\n          if (colors.length === count * 3) {\r\n              var colors4 = [];\r\n              for (var index = 0; index < colors.length; index += 3) {\r\n                  var newIndex = (index / 3) * 4;\r\n                  colors4[newIndex] = colors[index];\r\n                  colors4[newIndex + 1] = colors[index + 1];\r\n                  colors4[newIndex + 2] = colors[index + 2];\r\n                  colors4[newIndex + 3] = 1.0;\r\n              }\r\n              return colors4;\r\n          }\r\n          return colors;\r\n      };\r\n      // Operators\r\n      /**\r\n       * Adds in place the given Color4 values to the current Color4 object\r\n       * @param right - defines the second operand\r\n       * @returns the current updated Color4 object\r\n       */\r\n      Color4.prototype.addInPlace = function (right) {\r\n          this.r += right.r;\r\n          this.g += right.g;\r\n          this.b += right.b;\r\n          this.a += right.a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\r\n       * @returns the new array\r\n       */\r\n      Color4.prototype.asArray = function () {\r\n          var result = new Array();\r\n          this.toArray(result, 0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Stores from the starting index in the given array the Color4 successive values\r\n       * @param array - defines the array where to store the r,g,b components\r\n       * @param index - defines an optional index in the target array to define where to start storing values\r\n       * @returns the current Color4 object\r\n       */\r\n      Color4.prototype.toArray = function (array, index) {\r\n          if (index === void 0) { index = 0; }\r\n          array[index] = this.r;\r\n          array[index + 1] = this.g;\r\n          array[index + 2] = this.b;\r\n          array[index + 3] = this.a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Creates a new Color4 set with the added values of the current Color4 and of the given one\r\n       * @param right - defines the second operand\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.add = function (right) {\r\n          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\r\n      };\r\n      /**\r\n       * Creates a new Color4 set with the subtracted values of the given one from the current Color4\r\n       * @param right - defines the second operand\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.subtract = function (right) {\r\n          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\r\n      };\r\n      /**\r\n       * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\r\n       * @param right - defines the second operand\r\n       * @param result - defines the Color4 object where to store the result\r\n       * @returns the current Color4 object\r\n       */\r\n      Color4.prototype.subtractToRef = function (right, result) {\r\n          result.r = this.r - right.r;\r\n          result.g = this.g - right.g;\r\n          result.b = this.b - right.b;\r\n          result.a = this.a - right.a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Creates a new Color4 with the current Color4 values multiplied by scale\r\n       * @param scale - defines the scaling factor to apply\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.scale = function (scale) {\r\n          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\r\n      };\r\n      /**\r\n       * Multiplies the current Color4 values by scale and stores the result in \"result\"\r\n       * @param scale - defines the scaling factor to apply\r\n       * @param result - defines the Color4 object where to store the result\r\n       * @returns the current unmodified Color4\r\n       */\r\n      Color4.prototype.scaleToRef = function (scale, result) {\r\n          result.r = this.r * scale;\r\n          result.g = this.g * scale;\r\n          result.b = this.b * scale;\r\n          result.a = this.a * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current Color4 values by a factor and add the result to a given Color4\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines the Color4 object where to store the result\r\n       * @returns the unmodified current Color4\r\n       */\r\n      Color4.prototype.scaleAndAddToRef = function (scale, result) {\r\n          result.r += this.r * scale;\r\n          result.g += this.g * scale;\r\n          result.b += this.b * scale;\r\n          result.a += this.a * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n       * @param min - defines minimum clamping value (default is 0)\r\n       * @param max - defines maximum clamping value (default is 1)\r\n       * @param result - defines color to store the result into.\r\n       * @returns the cuurent Color4\r\n       */\r\n      Color4.prototype.clampToRef = function (min, max, result) {\r\n          if (min === void 0) { min = 0; }\r\n          if (max === void 0) { max = 1; }\r\n          result.r = Scalar.Clamp(this.r, min, max);\r\n          result.g = Scalar.Clamp(this.g, min, max);\r\n          result.b = Scalar.Clamp(this.b, min, max);\r\n          result.a = Scalar.Clamp(this.a, min, max);\r\n          return this;\r\n      };\r\n      /**\r\n       * Multipy an Color4 value by another and return a new Color4 object\r\n       * @param color - defines the Color4 value to multiply by\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.multiply = function (color) {\r\n          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\r\n      };\r\n      /**\r\n       * Multipy a Color4 value by another and push the result in a reference value\r\n       * @param color - defines the Color4 value to multiply by\r\n       * @param result - defines the Color4 to fill the result in\r\n       * @returns the result Color4\r\n       */\r\n      Color4.prototype.multiplyToRef = function (color, result) {\r\n          result.r = this.r * color.r;\r\n          result.g = this.g * color.g;\r\n          result.b = this.b * color.b;\r\n          result.a = this.a * color.a;\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a string with the Color4 current values\r\n       * @returns the string representation of the Color4 object\r\n       */\r\n      Color4.prototype.toString = function () {\r\n          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}';\r\n      };\r\n      /**\r\n       * Returns the string \"Color4\"\r\n       * @returns \"Color4\"\r\n       */\r\n      Color4.prototype.getClassName = function () {\r\n          return 'Color4';\r\n      };\r\n      /**\r\n       * Compute the Color4 hash code\r\n       * @returns an unique number that can be used to hash Color4 objects\r\n       */\r\n      Color4.prototype.getHashCode = function () {\r\n          var hash = this.r || 0;\r\n          hash = (hash * 397) ^ (this.g || 0);\r\n          hash = (hash * 397) ^ (this.b || 0);\r\n          hash = (hash * 397) ^ (this.a || 0);\r\n          return hash;\r\n      };\r\n      /**\r\n       * Creates a new Color4 copied from the current one\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.clone = function () {\r\n          return new Color4(this.r, this.g, this.b, this.a);\r\n      };\r\n      /**\r\n       * Copies the given Color4 values into the current one\r\n       * @param source - defines the source Color4 object\r\n       * @returns the current updated Color4 object\r\n       */\r\n      Color4.prototype.copyFrom = function (source) {\r\n          this.r = source.r;\r\n          this.g = source.g;\r\n          this.b = source.b;\r\n          this.a = source.a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Copies the given float values into the current one\r\n       * @param r - defines the red component to read from\r\n       * @param g - defines the green component to read from\r\n       * @param b - defines the blue component to read from\r\n       * @param a - defines the alpha component to read from\r\n       * @returns the current updated Color4 object\r\n       */\r\n      Color4.prototype.copyFromFloats = function (r, g, b, a) {\r\n          this.r = r;\r\n          this.g = g;\r\n          this.b = b;\r\n          this.a = a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Copies the given float values into the current one\r\n       * @param r - defines the red component to read from\r\n       * @param g - defines the green component to read from\r\n       * @param b - defines the blue component to read from\r\n       * @param a - defines the alpha component to read from\r\n       * @returns the current updated Color4 object\r\n       */\r\n      Color4.prototype.set = function (r, g, b, a) {\r\n          return this.copyFromFloats(r, g, b, a);\r\n      };\r\n      /**\r\n       * Compute the Color4 hexadecimal code as a string\r\n       * @returns a string containing the hexadecimal representation of the Color4 object\r\n       */\r\n      Color4.prototype.toHexString = function () {\r\n          var intR = (this.r * 255) | 0;\r\n          var intG = (this.g * 255) | 0;\r\n          var intB = (this.b * 255) | 0;\r\n          var intA = (this.a * 255) | 0;\r\n          return '#' + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB) + Scalar.ToHex(intA);\r\n      };\r\n      /**\r\n       * Computes a new Color4 converted from the current one to linear space\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.toLinearSpace = function () {\r\n          var convertedColor = new Color4();\r\n          this.toLinearSpaceToRef(convertedColor);\r\n          return convertedColor;\r\n      };\r\n      /**\r\n       * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\r\n       * @param convertedColor - defines the Color4 object where to store the linear space version\r\n       * @returns the unmodified Color4\r\n       */\r\n      Color4.prototype.toLinearSpaceToRef = function (convertedColor) {\r\n          convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n          convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n          convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n          convertedColor.a = this.a;\r\n          return this;\r\n      };\r\n      /**\r\n       * Computes a new Color4 converted from the current one to gamma space\r\n       * @returns a new Color4 object\r\n       */\r\n      Color4.prototype.toGammaSpace = function () {\r\n          var convertedColor = new Color4();\r\n          this.toGammaSpaceToRef(convertedColor);\r\n          return convertedColor;\r\n      };\r\n      /**\r\n       * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\r\n       * @param convertedColor - defines the Color4 object where to store the gamma space version\r\n       * @returns the unmodified Color4\r\n       */\r\n      Color4.prototype.toGammaSpaceToRef = function (convertedColor) {\r\n          convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n          convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n          convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n          convertedColor.a = this.a;\r\n          return this;\r\n      };\r\n      return Color4;\r\n  }());\n\n  /**\r\n   * Class used to hold a RBG color\r\n   * @public\r\n   */\r\n  var Color3 = /** @class */ (function () {\r\n      /**\r\n       * Creates a new Color3 object from red, green, blue values, all between 0 and 1\r\n       * @param r - defines the red component (between 0 and 1, default is 0)\r\n       * @param g - defines the green component (between 0 and 1, default is 0)\r\n       * @param b - defines the blue component (between 0 and 1, default is 0)\r\n       */\r\n      function Color3(\r\n      /**\r\n       * Defines the red component (between 0 and 1, default is 0)\r\n       */\r\n      r, \r\n      /**\r\n       * Defines the green component (between 0 and 1, default is 0)\r\n       */\r\n      g, \r\n      /**\r\n       * Defines the blue component (between 0 and 1, default is 0)\r\n       */\r\n      b) {\r\n          if (r === void 0) { r = 0; }\r\n          if (g === void 0) { g = 0; }\r\n          if (b === void 0) { b = 0; }\r\n          this.r = r;\r\n          this.g = g;\r\n          this.b = b;\r\n      }\r\n      // Statics\r\n      /**\r\n       * Creates a new Color3 from the string containing valid hexadecimal values\r\n       * @param hex - defines a string containing valid hexadecimal values\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.FromHexString = function (hex) {\r\n          if (hex.substring(0, 1) !== '#' || hex.length !== 7) {\r\n              return new Color3(0, 0, 0);\r\n          }\r\n          var r = parseInt(hex.substring(1, 3), 16);\r\n          var g = parseInt(hex.substring(3, 5), 16);\r\n          var b = parseInt(hex.substring(5, 7), 16);\r\n          return Color3.FromInts(r, g, b);\r\n      };\r\n      /**\r\n       * Creates a new Vector3 from the starting index of the given array\r\n       * @param array - defines the source array\r\n       * @param offset - defines an offset in the source array\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.FromArray = function (array, offset) {\r\n          if (offset === void 0) { offset = 0; }\r\n          return new Color3(array[offset], array[offset + 1], array[offset + 2]);\r\n      };\r\n      /**\r\n       * Creates a new Color3 from integer values (less than 256)\r\n       * @param r - defines the red component to read from (value between 0 and 255)\r\n       * @param g - defines the green component to read from (value between 0 and 255)\r\n       * @param b - defines the blue component to read from (value between 0 and 255)\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.FromInts = function (r, g, b) {\r\n          return new Color3(r / 255.0, g / 255.0, b / 255.0);\r\n      };\r\n      /**\r\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n       * @param start - defines the start Color3 value\r\n       * @param end - defines the end Color3 value\r\n       * @param amount - defines the gradient value between start and end\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Lerp = function (start, end, amount) {\r\n          var result = new Color3(0.0, 0.0, 0.0);\r\n          Color3.LerpToRef(start, end, amount, result);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\r\n       * @param left - defines the start value\r\n       * @param right - defines the end value\r\n       * @param amount - defines the gradient factor\r\n       * @param result - defines the Color3 object where to store the result\r\n       */\r\n      Color3.LerpToRef = function (left, right, amount, result) {\r\n          result.r = left.r + (right.r - left.r) * amount;\r\n          result.g = left.g + (right.g - left.g) * amount;\r\n          result.b = left.b + (right.b - left.b) * amount;\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a red color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Red = function () {\r\n          return new Color3(1, 0, 0);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a green color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Green = function () {\r\n          return new Color3(0, 1, 0);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a blue color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Blue = function () {\r\n          return new Color3(0, 0, 1);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a black color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Black = function () {\r\n          return new Color3(0, 0, 0);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a white color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.White = function () {\r\n          return new Color3(1, 1, 1);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a purple color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Purple = function () {\r\n          return new Color3(0.5, 0, 0.5);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a magenta color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Magenta = function () {\r\n          return new Color3(1, 0, 1);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a yellow color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Yellow = function () {\r\n          return new Color3(1, 1, 0);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a gray color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Gray = function () {\r\n          return new Color3(0.5, 0.5, 0.5);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a teal color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Teal = function () {\r\n          return new Color3(0, 1.0, 1.0);\r\n      };\r\n      /**\r\n       * Returns a Color3 value containing a random color\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.Random = function () {\r\n          return new Color3(Math.random(), Math.random(), Math.random());\r\n      };\r\n      /**\r\n       * Creates a string with the Color3 current values\r\n       * @returns the string representation of the Color3 object\r\n       */\r\n      Color3.prototype.toString = function () {\r\n          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}';\r\n      };\r\n      /**\r\n       * Returns the string \"Color3\"\r\n       * @returns \"Color3\"\r\n       */\r\n      Color3.prototype.getClassName = function () {\r\n          return 'Color3';\r\n      };\r\n      /**\r\n       * Compute the Color3 hash code\r\n       * @returns an unique number that can be used to hash Color3 objects\r\n       */\r\n      Color3.prototype.getHashCode = function () {\r\n          var hash = this.r || 0;\r\n          hash = (hash * 397) ^ (this.g || 0);\r\n          hash = (hash * 397) ^ (this.b || 0);\r\n          return hash;\r\n      };\r\n      // Operators\r\n      /**\r\n       * Stores in the given array from the given starting index the red, green, blue values as successive elements\r\n       * @param array - defines the array where to store the r,g,b components\r\n       * @param index - defines an optional index in the target array to define where to start storing values\r\n       * @returns the current Color3 object\r\n       */\r\n      Color3.prototype.toArray = function (array, index) {\r\n          if (index === void 0) { index = 0; }\r\n          array[index] = this.r;\r\n          array[index + 1] = this.g;\r\n          array[index + 2] = this.b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Color4 object from the current Color3 and the given alpha\r\n       * @param alpha - defines the alpha component on the new Color4 object (default is 1)\r\n       * @returns a new Color4 object\r\n       */\r\n      Color3.prototype.toColor4 = function (alpha) {\r\n          if (alpha === void 0) { alpha = 1; }\r\n          return new Color4(this.r, this.g, this.b, alpha);\r\n      };\r\n      /**\r\n       * Returns a new array populated with 3 numeric elements : red, green and blue values\r\n       * @returns the new array\r\n       */\r\n      Color3.prototype.asArray = function () {\r\n          var result = new Array();\r\n          this.toArray(result, 0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Returns the luminance value\r\n       * @returns a float value\r\n       */\r\n      Color3.prototype.toLuminance = function () {\r\n          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\r\n      };\r\n      /**\r\n       * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\r\n       * @param otherColor - defines the second operand\r\n       * @returns the new Color3 object\r\n       */\r\n      Color3.prototype.multiply = function (otherColor) {\r\n          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\r\n      };\r\n      /**\r\n       * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\r\n       * @param otherColor - defines the second operand\r\n       * @param result - defines the Color3 object where to store the result\r\n       * @returns the current Color3\r\n       */\r\n      Color3.prototype.multiplyToRef = function (otherColor, result) {\r\n          result.r = this.r * otherColor.r;\r\n          result.g = this.g * otherColor.g;\r\n          result.b = this.b * otherColor.b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Determines equality between Color3 objects\r\n       * @param otherColor - defines the second operand\r\n       * @returns true if the rgb values are equal to the given ones\r\n       */\r\n      Color3.prototype.equals = function (otherColor) {\r\n          return otherColor && this.r === otherColor.r && this.g === otherColor.g && this.b === otherColor.b;\r\n      };\r\n      /**\r\n       * Determines equality between the current Color3 object and a set of r,b,g values\r\n       * @param r - defines the red component to check\r\n       * @param g - defines the green component to check\r\n       * @param b - defines the blue component to check\r\n       * @returns true if the rgb values are equal to the given ones\r\n       */\r\n      Color3.prototype.equalsFloats = function (r, g, b) {\r\n          return this.r === r && this.g === g && this.b === b;\r\n      };\r\n      /**\r\n       * Multiplies in place each rgb value by scale\r\n       * @param scale - defines the scaling factor\r\n       * @returns the updated Color3\r\n       */\r\n      Color3.prototype.scale = function (scale) {\r\n          return new Color3(this.r * scale, this.g * scale, this.b * scale);\r\n      };\r\n      /**\r\n       * Multiplies the rgb values by scale and stores the result into \"result\"\r\n       * @param scale - defines the scaling factor\r\n       * @param result - defines the Color3 object where to store the result\r\n       * @returns the unmodified current Color3\r\n       */\r\n      Color3.prototype.scaleToRef = function (scale, result) {\r\n          result.r = this.r * scale;\r\n          result.g = this.g * scale;\r\n          result.b = this.b * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Scale the current Color3 values by a factor and add the result to a given Color3\r\n       * @param scale - defines the scale factor\r\n       * @param result - defines color to store the result into\r\n       * @returns the unmodified current Color3\r\n       */\r\n      Color3.prototype.scaleAndAddToRef = function (scale, result) {\r\n          result.r += this.r * scale;\r\n          result.g += this.g * scale;\r\n          result.b += this.b * scale;\r\n          return this;\r\n      };\r\n      /**\r\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\r\n       * @param min - defines minimum clamping value (default is 0)\r\n       * @param max - defines maximum clamping value (default is 1)\r\n       * @param result - defines color to store the result into\r\n       * @returns the original Color3\r\n       */\r\n      Color3.prototype.clampToRef = function (min, max, result) {\r\n          if (min === void 0) { min = 0; }\r\n          if (max === void 0) { max = 1; }\r\n          result.r = Scalar.Clamp(this.r, min, max);\r\n          result.g = Scalar.Clamp(this.g, min, max);\r\n          result.b = Scalar.Clamp(this.b, min, max);\r\n          return this;\r\n      };\r\n      /**\r\n       * Creates a new Color3 set with the added values of the current Color3 and of the given one\r\n       * @param otherColor - defines the second operand\r\n       * @returns the new Color3\r\n       */\r\n      Color3.prototype.add = function (otherColor) {\r\n          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\r\n      };\r\n      /**\r\n       * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\r\n       * @param otherColor - defines the second operand\r\n       * @param result - defines Color3 object to store the result into\r\n       * @returns the unmodified current Color3\r\n       */\r\n      Color3.prototype.addToRef = function (otherColor, result) {\r\n          result.r = this.r + otherColor.r;\r\n          result.g = this.g + otherColor.g;\r\n          result.b = this.b + otherColor.b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Returns a new Color3 set with the subtracted values of the given one from the current Color3\r\n       * @param otherColor - defines the second operand\r\n       * @returns the new Color3\r\n       */\r\n      Color3.prototype.subtract = function (otherColor) {\r\n          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\r\n      };\r\n      /**\r\n       * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\r\n       * @param otherColor - defines the second operand\r\n       * @param result - defines Color3 object to store the result into\r\n       * @returns the unmodified current Color3\r\n       */\r\n      Color3.prototype.subtractToRef = function (otherColor, result) {\r\n          result.r = this.r - otherColor.r;\r\n          result.g = this.g - otherColor.g;\r\n          result.b = this.b - otherColor.b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Copy the current object\r\n       * @returns a new Color3 copied the current one\r\n       */\r\n      Color3.prototype.clone = function () {\r\n          return new Color3(this.r, this.g, this.b);\r\n      };\r\n      /**\r\n       * Copies the rgb values from the source in the current Color3\r\n       * @param source - defines the source Color3 object\r\n       * @returns the updated Color3 object\r\n       */\r\n      Color3.prototype.copyFrom = function (source) {\r\n          this.r = source.r;\r\n          this.g = source.g;\r\n          this.b = source.b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the Color3 rgb values from the given floats\r\n       * @param r - defines the red component to read from\r\n       * @param g - defines the green component to read from\r\n       * @param b - defines the blue component to read from\r\n       * @returns the current Color3 object\r\n       */\r\n      Color3.prototype.copyFromFloats = function (r, g, b) {\r\n          this.r = r;\r\n          this.g = g;\r\n          this.b = b;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates the Color3 rgb values from the given floats\r\n       * @param r - defines the red component to read from\r\n       * @param g - defines the green component to read from\r\n       * @param b - defines the blue component to read from\r\n       * @returns the current Color3 object\r\n       */\r\n      Color3.prototype.set = function (r, g, b) {\r\n          return this.copyFromFloats(r, g, b);\r\n      };\r\n      /**\r\n       * Compute the Color3 hexadecimal code as a string\r\n       * @returns a string containing the hexadecimal representation of the Color3 object\r\n       */\r\n      Color3.prototype.toHexString = function () {\r\n          var intR = (this.r * 255) | 0;\r\n          var intG = (this.g * 255) | 0;\r\n          var intB = (this.b * 255) | 0;\r\n          return '#' + Scalar.ToHex(intR) + Scalar.ToHex(intG) + Scalar.ToHex(intB);\r\n      };\r\n      /**\r\n       * Computes a new Color3 converted from the current one to linear space\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.prototype.toLinearSpace = function () {\r\n          var convertedColor = new Color3();\r\n          this.toLinearSpaceToRef(convertedColor);\r\n          return convertedColor;\r\n      };\r\n      /**\r\n       * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\r\n       * @param convertedColor - defines the Color3 object where to store the linear space version\r\n       * @returns the unmodified Color3\r\n       */\r\n      Color3.prototype.toLinearSpaceToRef = function (convertedColor) {\r\n          convertedColor.r = Math.pow(this.r, ToLinearSpace);\r\n          convertedColor.g = Math.pow(this.g, ToLinearSpace);\r\n          convertedColor.b = Math.pow(this.b, ToLinearSpace);\r\n          return this;\r\n      };\r\n      /**\r\n       * Computes a new Color3 converted from the current one to gamma space\r\n       * @returns a new Color3 object\r\n       */\r\n      Color3.prototype.toGammaSpace = function () {\r\n          var convertedColor = new Color3();\r\n          this.toGammaSpaceToRef(convertedColor);\r\n          return convertedColor;\r\n      };\r\n      /**\r\n       * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\r\n       * @param convertedColor - defines the Color3 object where to store the gamma space version\r\n       * @returns the unmodified Color3\r\n       */\r\n      Color3.prototype.toGammaSpaceToRef = function (convertedColor) {\r\n          convertedColor.r = Math.pow(this.r, ToGammaSpace);\r\n          convertedColor.g = Math.pow(this.g, ToGammaSpace);\r\n          convertedColor.b = Math.pow(this.b, ToGammaSpace);\r\n          return this;\r\n      };\r\n      /**\r\n       * Serializes Color3\r\n       */\r\n      Color3.prototype.toJSON = function () {\r\n          return {\r\n              r: this.r,\r\n              g: this.g,\r\n              b: this.b\r\n          };\r\n      };\r\n      return Color3;\r\n  }());\n\n  /**\r\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n   * A Curve3 is designed from a series of successive Vector3.\r\n   * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\r\n   * @public\r\n   */\r\n  var Curve3 = /** @class */ (function () {\r\n      /**\r\n       * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\r\n       * A Curve3 is designed from a series of successive Vector3.\r\n       * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\r\n       * @param points - points which make up the curve\r\n       */\r\n      function Curve3(points) {\r\n          this._length = 0.0;\r\n          this._points = points;\r\n          this._length = this._computeLength(points);\r\n      }\r\n      /**\r\n       * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\r\n       * @param v0 - (Vector3) the origin point of the Quadratic Bezier\r\n       * @param v1 - (Vector3) the control point\r\n       * @param v2 - (Vector3) the end point of the Quadratic Bezier\r\n       * @param nbPoints - (integer) the wanted number of points in the curve\r\n       * @returns the created Curve3\r\n       */\r\n      Curve3.CreateQuadraticBezier = function (v0, v1, v2, nbPoints) {\r\n          // tslint:disable-next-line:no-parameter-reassignment\r\n          nbPoints = nbPoints > 2 ? nbPoints : 3;\r\n          var bez = new Array();\r\n          var equation = function (t, val0, val1, val2) {\r\n              var res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\r\n              return res;\r\n          };\r\n          for (var i = 0; i <= nbPoints; i++) {\r\n              bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\r\n          }\r\n          return new Curve3(bez);\r\n      };\r\n      /**\r\n       * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\r\n       * @param v0 - (Vector3) the origin point of the Cubic Bezier\r\n       * @param v1 - (Vector3) the first control point\r\n       * @param v2 - (Vector3) the second control point\r\n       * @param v3 - (Vector3) the end point of the Cubic Bezier\r\n       * @param nbPoints - (integer) the wanted number of points in the curve\r\n       * @returns the created Curve3\r\n       */\r\n      Curve3.CreateCubicBezier = function (v0, v1, v2, v3, nbPoints) {\r\n          // tslint:disable-next-line:no-parameter-reassignment\r\n          nbPoints = nbPoints > 3 ? nbPoints : 4;\r\n          var bez = new Array();\r\n          var equation = function (t, val0, val1, val2, val3) {\r\n              var res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\r\n                  3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\r\n                  3.0 * t * t * (1.0 - t) * val2 +\r\n                  t * t * t * val3;\r\n              return res;\r\n          };\r\n          for (var i = 0; i <= nbPoints; i++) {\r\n              bez.push(new Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\r\n          }\r\n          return new Curve3(bez);\r\n      };\r\n      /**\r\n       * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\r\n       * @param p1 - (Vector3) the origin point of the Hermite Spline\r\n       * @param t1 - (Vector3) the tangent vector at the origin point\r\n       * @param p2 - (Vector3) the end point of the Hermite Spline\r\n       * @param t2 - (Vector3) the tangent vector at the end point\r\n       * @param nbPoints - (integer) the wanted number of points in the curve\r\n       * @returns the created Curve3\r\n       */\r\n      Curve3.CreateHermiteSpline = function (p1, t1, p2, t2, nbPoints) {\r\n          var hermite = new Array();\r\n          var step = 1.0 / nbPoints;\r\n          for (var i = 0; i <= nbPoints; i++) {\r\n              hermite.push(Vector3.Hermite(p1, t1, p2, t2, i * step));\r\n          }\r\n          return new Curve3(hermite);\r\n      };\r\n      /**\r\n       * Returns a Curve3 object along a CatmullRom Spline curve :\r\n       * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\r\n       * @param nbPoints - (integer) the wanted number of points between each curve control points\r\n       * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\r\n       * @returns the created Curve3\r\n       */\r\n      Curve3.CreateCatmullRomSpline = function (points, nbPoints, closed) {\r\n          var catmullRom = new Array();\r\n          var step = 1.0 / nbPoints;\r\n          var amount = 0.0;\r\n          if (closed) {\r\n              var pointsCount = points.length;\r\n              for (var i = 0; i < pointsCount; i++) {\r\n                  amount = 0;\r\n                  for (var c = 0; c < nbPoints; c++) {\r\n                      catmullRom.push(Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\r\n                      amount += step;\r\n                  }\r\n              }\r\n              catmullRom.push(catmullRom[0]);\r\n          }\r\n          else {\r\n              var totalPoints = new Array();\r\n              totalPoints.push(points[0].clone());\r\n              Array.prototype.push.apply(totalPoints, points);\r\n              totalPoints.push(points[points.length - 1].clone());\r\n              var i = 0;\r\n              for (i = 0; i < totalPoints.length - 3; i++) {\r\n                  amount = 0;\r\n                  for (var c = 0; c < nbPoints; c++) {\r\n                      catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n                      amount += step;\r\n                  }\r\n              }\r\n              i--;\r\n              catmullRom.push(Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\r\n          }\r\n          return new Curve3(catmullRom);\r\n      };\r\n      /**\r\n       * @returns the Curve3 stored array of successive Vector3\r\n       */\r\n      Curve3.prototype.getPoints = function () {\r\n          return this._points;\r\n      };\r\n      /**\r\n       * @returns the computed length (float) of the curve.\r\n       */\r\n      Curve3.prototype.length = function () {\r\n          return this._length;\r\n      };\r\n      /**\r\n       * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\r\n       * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\r\n       * curveA and curveB keep unchanged.\r\n       * @param curve - the curve to continue from this curve\r\n       * @returns the newly constructed curve\r\n       */\r\n      Curve3.prototype.continue = function (curve) {\r\n          var lastPoint = this._points[this._points.length - 1];\r\n          var continuedPoints = this._points.slice();\r\n          var curvePoints = curve.getPoints();\r\n          for (var i = 1; i < curvePoints.length; i++) {\r\n              continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\r\n          }\r\n          var continuedCurve = new Curve3(continuedPoints);\r\n          return continuedCurve;\r\n      };\r\n      Curve3.prototype._computeLength = function (path) {\r\n          var l = 0;\r\n          for (var i = 1; i < path.length; i++) {\r\n              l += path[i].subtract(path[i - 1]).length();\r\n          }\r\n          return l;\r\n      };\r\n      return Curve3;\r\n  }());\n\n  /**\r\n   * Represens a plane by the equation ax + by + cz + d = 0\r\n   * @public\r\n   */\r\n  var Plane = /** @class */ (function () {\r\n      /**\r\n       * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\r\n       * @param a - a component of the plane\r\n       * @param b - b component of the plane\r\n       * @param c - c component of the plane\r\n       * @param d - d component of the plane\r\n       */\r\n      function Plane(a, b, c, d) {\r\n          this.normal = new Vector3(a, b, c);\r\n          this.d = d;\r\n      }\r\n      // Statics\r\n      /**\r\n       * Creates a plane from an  array\r\n       * @param array - the array to create a plane from\r\n       * @returns a new Plane from the given array.\r\n       */\r\n      Plane.FromArray = function (array) {\r\n          return new Plane(array[0], array[1], array[2], array[3]);\r\n      };\r\n      /**\r\n       * Creates a plane from three points\r\n       * @param point1 - point used to create the plane\r\n       * @param point2 - point used to create the plane\r\n       * @param point3 - point used to create the plane\r\n       * @returns a new Plane defined by the three given points.\r\n       */\r\n      Plane.FromPoints = function (point1, point2, point3) {\r\n          var result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n          result.copyFromPoints(point1, point2, point3);\r\n          return result;\r\n      };\r\n      /**\r\n       * Creates a plane from an origin point and a normal\r\n       * @param origin - origin of the plane to be constructed\r\n       * @param normal - normal of the plane to be constructed\r\n       * @returns a new Plane the normal vector to this plane at the given origin point.\r\n       * Note : the vector \"normal\" is updated because normalized.\r\n       */\r\n      Plane.FromPositionAndNormal = function (origin, normal) {\r\n          var result = new Plane(0.0, 0.0, 0.0, 0.0);\r\n          normal.normalize();\r\n          result.normal = normal;\r\n          result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n          return result;\r\n      };\r\n      /**\r\n       * Calculates the distance from a plane and a point\r\n       * @param origin - origin of the plane to be constructed\r\n       * @param normal - normal of the plane to be constructed\r\n       * @param point - point to calculate distance to\r\n       * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\r\n       */\r\n      Plane.SignedDistanceToPlaneFromPositionAndNormal = function (origin, normal, point) {\r\n          var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\r\n          return Vector3.Dot(point, normal) + d;\r\n      };\r\n      /**\r\n       * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\r\n       */\r\n      Plane.prototype.asArray = function () {\r\n          return [this.normal.x, this.normal.y, this.normal.z, this.d];\r\n      };\r\n      // Methods\r\n      /**\r\n       * @returns a new plane copied from the current Plane.\r\n       */\r\n      Plane.prototype.clone = function () {\r\n          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\r\n      };\r\n      /**\r\n       * @returns the string \"Plane\".\r\n       */\r\n      Plane.prototype.getClassName = function () {\r\n          return 'Plane';\r\n      };\r\n      /**\r\n       * @returns the Plane hash code.\r\n       */\r\n      Plane.prototype.getHashCode = function () {\r\n          var hash = this.normal.getHashCode();\r\n          hash = (hash * 397) ^ (this.d || 0);\r\n          return hash;\r\n      };\r\n      /**\r\n       * Normalize the current Plane in place.\r\n       * @returns the updated Plane.\r\n       */\r\n      Plane.prototype.normalize = function () {\r\n          var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\r\n          var magnitude = 0.0;\r\n          if (norm !== 0) {\r\n              magnitude = 1.0 / norm;\r\n          }\r\n          this.normal.x *= magnitude;\r\n          this.normal.y *= magnitude;\r\n          this.normal.z *= magnitude;\r\n          this.d *= magnitude;\r\n          return this;\r\n      };\r\n      /**\r\n       * Applies a transformation the plane and returns the result\r\n       * @param transformation - the transformation matrix to be applied to the plane\r\n       * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\r\n       */\r\n      Plane.prototype.transform = function (transformation) {\r\n          var transposedMatrix = MathTmp.Matrix[0];\r\n          Matrix.TransposeToRef(transformation, transposedMatrix);\r\n          var m = transposedMatrix.m;\r\n          var x = this.normal.x;\r\n          var y = this.normal.y;\r\n          var z = this.normal.z;\r\n          var d = this.d;\r\n          var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\r\n          var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\r\n          var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\r\n          var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\r\n          return new Plane(normalX, normalY, normalZ, finalD);\r\n      };\r\n      /**\r\n       * Calcualtte the dot product between the point and the plane normal\r\n       * @param point - point to calculate the dot product with\r\n       * @returns the dot product (float) of the point coordinates and the plane normal.\r\n       */\r\n      Plane.prototype.dotCoordinate = function (point) {\r\n          return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\r\n      };\r\n      /**\r\n       * Updates the current Plane from the plane defined by the three given points.\r\n       * @param point1 - one of the points used to contruct the plane\r\n       * @param point2 - one of the points used to contruct the plane\r\n       * @param point3 - one of the points used to contruct the plane\r\n       * @returns the updated Plane.\r\n       */\r\n      Plane.prototype.copyFromPoints = function (point1, point2, point3) {\r\n          var x1 = point2.x - point1.x;\r\n          var y1 = point2.y - point1.y;\r\n          var z1 = point2.z - point1.z;\r\n          var x2 = point3.x - point1.x;\r\n          var y2 = point3.y - point1.y;\r\n          var z2 = point3.z - point1.z;\r\n          var yz = y1 * z2 - z1 * y2;\r\n          var xz = z1 * x2 - x1 * z2;\r\n          var xy = x1 * y2 - y1 * x2;\r\n          var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\r\n          var invPyth;\r\n          if (pyth !== 0) {\r\n              invPyth = 1.0 / pyth;\r\n          }\r\n          else {\r\n              invPyth = 0.0;\r\n          }\r\n          this.normal.x = yz * invPyth;\r\n          this.normal.y = xz * invPyth;\r\n          this.normal.z = xy * invPyth;\r\n          this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\r\n          return this;\r\n      };\r\n      /**\r\n       * Checks if the plane is facing a given direction\r\n       * @param direction - the direction to check if the plane is facing\r\n       * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\r\n       * @returns True is the vector \"direction\"  is the same side than the plane normal.\r\n       */\r\n      Plane.prototype.isFrontFacingTo = function (direction, epsilon) {\r\n          var dot = Vector3.Dot(this.normal, direction);\r\n          return dot <= epsilon;\r\n      };\r\n      /**\r\n       * Calculates the distance to a point\r\n       * @param point - point to calculate distance to\r\n       * @returns the signed distance (float) from the given point to the Plane.\r\n       */\r\n      Plane.prototype.signedDistanceTo = function (point) {\r\n          return Vector3.Dot(point, this.normal) + this.d;\r\n      };\r\n      return Plane;\r\n  }());\n\n  /**\r\n   * Reprasents a camera frustum\r\n   * @public\r\n   */\r\n  var Frustum = /** @class */ (function () {\r\n      function Frustum() {\r\n      }\r\n      /**\r\n       * Gets the planes representing the frustum\r\n       * @param transform - matrix to be applied to the returned planes\r\n       * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n       */\r\n      Frustum.GetPlanes = function (transform) {\r\n          var frustumPlanes = [];\r\n          for (var index = 0; index < 6; index++) {\r\n              frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\r\n          }\r\n          Frustum.GetPlanesToRef(transform, frustumPlanes);\r\n          return frustumPlanes;\r\n      };\r\n      /**\r\n       * Gets the near frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] + m[2];\r\n          frustumPlane.normal.y = m[7] + m[6];\r\n          frustumPlane.normal.z = m[11] + m[10];\r\n          frustumPlane.d = m[15] + m[14];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Gets the far frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] - m[2];\r\n          frustumPlane.normal.y = m[7] - m[6];\r\n          frustumPlane.normal.z = m[11] - m[10];\r\n          frustumPlane.d = m[15] - m[14];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Gets the left frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] + m[0];\r\n          frustumPlane.normal.y = m[7] + m[4];\r\n          frustumPlane.normal.z = m[11] + m[8];\r\n          frustumPlane.d = m[15] + m[12];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Gets the right frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] - m[0];\r\n          frustumPlane.normal.y = m[7] - m[4];\r\n          frustumPlane.normal.z = m[11] - m[8];\r\n          frustumPlane.d = m[15] - m[12];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Gets the top frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] - m[1];\r\n          frustumPlane.normal.y = m[7] - m[5];\r\n          frustumPlane.normal.z = m[11] - m[9];\r\n          frustumPlane.d = m[15] - m[13];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Gets the bottom frustum plane transformed by the transform matrix\r\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\r\n       * @param frustumPlane - the resuling frustum plane\r\n       */\r\n      Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\r\n          var m = transform.m;\r\n          frustumPlane.normal.x = m[3] + m[1];\r\n          frustumPlane.normal.y = m[7] + m[5];\r\n          frustumPlane.normal.z = m[11] + m[9];\r\n          frustumPlane.d = m[15] + m[13];\r\n          frustumPlane.normalize();\r\n      };\r\n      /**\r\n       * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n       * @param transform - transformation matrix to be applied to the resulting frustum planes\r\n       * @param frustumPlanes - the resuling frustum planes\r\n       */\r\n      Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\r\n          // Near\r\n          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\r\n          // Far\r\n          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\r\n          // Left\r\n          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\r\n          // Right\r\n          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\r\n          // Top\r\n          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\r\n          // Bottom\r\n          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\r\n      };\r\n      return Frustum;\r\n  }());\n\n  /**\r\n   * Represents a 2D path made up of multiple 2D points\r\n   * @public\r\n   */\r\n  var Path2 = /** @class */ (function () {\r\n      /**\r\n       * Creates a Path2 object from the starting 2D coordinates x and y.\r\n       * @param x - the starting points x value\r\n       * @param y - the starting points y value\r\n       */\r\n      function Path2(x, y) {\r\n          /**\r\n           * If the path start and end point are the same\r\n           */\r\n          this.closed = false;\r\n          this._points = new Array();\r\n          this._length = 0.0;\r\n          this._points.push(new Vector2(x, y));\r\n      }\r\n      /**\r\n       * Creates a new path starting from an x and y position\r\n       * @param x - starting x value\r\n       * @param y - starting y value\r\n       * @returns a new Path2 starting at the coordinates (x, y).\r\n       */\r\n      Path2.StartingAt = function (x, y) {\r\n          return new Path2(x, y);\r\n      };\r\n      /**\r\n       * Adds a new segment until the given coordinates (x, y) to the current Path2.\r\n       * @param x - the added points x value\r\n       * @param y - the added points y value\r\n       * @returns the updated Path2.\r\n       */\r\n      Path2.prototype.addLineTo = function (x, y) {\r\n          if (this.closed) {\r\n              return this;\r\n          }\r\n          var newPoint = new Vector2(x, y);\r\n          var previousPoint = this._points[this._points.length - 1];\r\n          this._points.push(newPoint);\r\n          this._length += newPoint.subtract(previousPoint).length();\r\n          return this;\r\n      };\r\n      /**\r\n       * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\r\n       * @param midX - middle point x value\r\n       * @param midY - middle point y value\r\n       * @param endX - end point x value\r\n       * @param endY - end point y value\r\n       * @param numberOfSegments - (default: 36)\r\n       * @returns the updated Path2.\r\n       */\r\n      Path2.prototype.addArcTo = function (midX, midY, endX, endY, numberOfSegments) {\r\n          if (numberOfSegments === void 0) { numberOfSegments = 36; }\r\n          if (this.closed) {\r\n              return this;\r\n          }\r\n          var startPoint = this._points[this._points.length - 1];\r\n          var midPoint = new Vector2(midX, midY);\r\n          var endPoint = new Vector2(endX, endY);\r\n          var arc = new Arc2(startPoint, midPoint, endPoint);\r\n          var increment = arc.angle.radians() / numberOfSegments;\r\n          if (arc.orientation === exports.Orientation.CW) {\r\n              increment *= -1;\r\n          }\r\n          var currentAngle = arc.startAngle.radians() + increment;\r\n          for (var i = 0; i < numberOfSegments; i++) {\r\n              var x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\r\n              var y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\r\n              this.addLineTo(x, y);\r\n              currentAngle += increment;\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Closes the Path2.\r\n       * @returns the Path2.\r\n       */\r\n      Path2.prototype.close = function () {\r\n          this.closed = true;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the sum of the distance between each sequential point in the path\r\n       * @returns the Path2 total length (float).\r\n       */\r\n      Path2.prototype.length = function () {\r\n          var result = this._length;\r\n          if (!this.closed) {\r\n              var lastPoint = this._points[this._points.length - 1];\r\n              var firstPoint = this._points[0];\r\n              result += firstPoint.subtract(lastPoint).length();\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Gets the points which construct the path\r\n       * @returns the Path2 internal array of points.\r\n       */\r\n      Path2.prototype.getPoints = function () {\r\n          return this._points;\r\n      };\r\n      /**\r\n       * Retreives the point at the distance aways from the starting point\r\n       * @param normalizedLengthPosition - the length along the path to retreive the point from\r\n       * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\r\n       */\r\n      Path2.prototype.getPointAtLengthPosition = function (normalizedLengthPosition) {\r\n          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\r\n              return Vector2.Zero();\r\n          }\r\n          var lengthPosition = normalizedLengthPosition * this.length();\r\n          var previousOffset = 0;\r\n          for (var i = 0; i < this._points.length; i++) {\r\n              var j = (i + 1) % this._points.length;\r\n              var a = this._points[i];\r\n              var b = this._points[j];\r\n              var bToA = b.subtract(a);\r\n              var nextOffset = bToA.length() + previousOffset;\r\n              if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\r\n                  var dir = bToA.normalize();\r\n                  var localOffset = lengthPosition - previousOffset;\r\n                  return new Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\r\n              }\r\n              previousOffset = nextOffset;\r\n          }\r\n          return Vector2.Zero();\r\n      };\r\n      return Path2;\r\n  }());\n\n  /**\r\n   * Represents a 3D path made up of multiple 3D points\r\n   * @public\r\n   */\r\n  var Path3D = /** @class */ (function () {\r\n      /**\r\n       * new Path3D(path, normal, raw)\r\n       * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\r\n       * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\r\n       * @param path - an array of Vector3, the curve axis of the Path3D\r\n       * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\r\n       * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\r\n       */\r\n      function Path3D(\r\n      /**\r\n       * an array of Vector3, the curve axis of the Path3D\r\n       */\r\n      path, firstNormal, raw) {\r\n          if (firstNormal === void 0) { firstNormal = null; }\r\n          this.path = path;\r\n          this._curve = new Array();\r\n          this._distances = new Array();\r\n          this._tangents = new Array();\r\n          this._normals = new Array();\r\n          this._binormals = new Array();\r\n          for (var p = 0; p < path.length; p++) {\r\n              this._curve[p] = path[p].clone(); // hard copy\r\n          }\r\n          this._raw = raw || false;\r\n          this._compute(firstNormal);\r\n      }\r\n      /**\r\n       * Returns the Path3D array of successive Vector3 designing its curve.\r\n       * @returns the Path3D array of successive Vector3 designing its curve.\r\n       */\r\n      Path3D.prototype.getCurve = function () {\r\n          return this._curve;\r\n      };\r\n      /**\r\n       * Returns an array populated with tangent vectors on each Path3D curve point.\r\n       * @returns an array populated with tangent vectors on each Path3D curve point.\r\n       */\r\n      Path3D.prototype.getTangents = function () {\r\n          return this._tangents;\r\n      };\r\n      /**\r\n       * Returns an array populated with normal vectors on each Path3D curve point.\r\n       * @returns an array populated with normal vectors on each Path3D curve point.\r\n       */\r\n      Path3D.prototype.getNormals = function () {\r\n          return this._normals;\r\n      };\r\n      /**\r\n       * Returns an array populated with binormal vectors on each Path3D curve point.\r\n       * @returns an array populated with binormal vectors on each Path3D curve point.\r\n       */\r\n      Path3D.prototype.getBinormals = function () {\r\n          return this._binormals;\r\n      };\r\n      /**\r\n       * Returns an array populated with distances (float) of the i-th point from the first curve point.\r\n       * @returns an array populated with distances (float) of the i-th point from the first curve point.\r\n       */\r\n      Path3D.prototype.getDistances = function () {\r\n          return this._distances;\r\n      };\r\n      /**\r\n       * Forces the Path3D tangent, normal, binormal and distance recomputation.\r\n       * @param path - path which all values are copied into the curves points\r\n       * @param firstNormal - which should be projected onto the curve\r\n       * @returns the same object updated.\r\n       */\r\n      Path3D.prototype.update = function (path, firstNormal) {\r\n          if (firstNormal === void 0) { firstNormal = null; }\r\n          for (var p = 0; p < path.length; p++) {\r\n              this._curve[p].x = path[p].x;\r\n              this._curve[p].y = path[p].y;\r\n              this._curve[p].z = path[p].z;\r\n          }\r\n          this._compute(firstNormal);\r\n          return this;\r\n      };\r\n      // private function compute() : computes tangents, normals and binormals\r\n      Path3D.prototype._compute = function (firstNormal) {\r\n          var l = this._curve.length;\r\n          // first and last tangents\r\n          this._tangents[0] = this._getFirstNonNullVector(0);\r\n          if (!this._raw) {\r\n              this._tangents[0].normalize();\r\n          }\r\n          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\r\n          if (!this._raw) {\r\n              this._tangents[l - 1].normalize();\r\n          }\r\n          // normals and binormals at first point : arbitrary vector with _normalVector()\r\n          var tg0 = this._tangents[0];\r\n          var pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\r\n          this._normals[0] = pp0;\r\n          if (!this._raw) {\r\n              this._normals[0].normalize();\r\n          }\r\n          this._binormals[0] = Vector3.Cross(tg0, this._normals[0]);\r\n          if (!this._raw) {\r\n              this._binormals[0].normalize();\r\n          }\r\n          this._distances[0] = 0.0;\r\n          // normals and binormals : next points\r\n          var prev; // previous vector (segment)\r\n          var cur; // current vector (segment)\r\n          var curTang; // current tangent\r\n          // previous normal\r\n          var prevBinor; // previous binormal\r\n          for (var i = 1; i < l; i++) {\r\n              // tangents\r\n              prev = this._getLastNonNullVector(i);\r\n              if (i < l - 1) {\r\n                  cur = this._getFirstNonNullVector(i);\r\n                  this._tangents[i] = prev.add(cur);\r\n                  this._tangents[i].normalize();\r\n              }\r\n              this._distances[i] = this._distances[i - 1] + prev.length();\r\n              // normals and binormals\r\n              // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\r\n              curTang = this._tangents[i];\r\n              prevBinor = this._binormals[i - 1];\r\n              this._normals[i] = Vector3.Cross(prevBinor, curTang);\r\n              if (!this._raw) {\r\n                  this._normals[i].normalize();\r\n              }\r\n              this._binormals[i] = Vector3.Cross(curTang, this._normals[i]);\r\n              if (!this._raw) {\r\n                  this._binormals[i].normalize();\r\n              }\r\n          }\r\n      };\r\n      // returns the first non null vector from index : curve[index + N].subtract(curve[index])\r\n      Path3D.prototype._getFirstNonNullVector = function (index) {\r\n          var i = 1;\r\n          var nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\r\n              i++;\r\n              nNVector = this._curve[index + i].subtract(this._curve[index]);\r\n          }\r\n          return nNVector;\r\n      };\r\n      // returns the last non null vector from index : curve[index].subtract(curve[index - N])\r\n      Path3D.prototype._getLastNonNullVector = function (index) {\r\n          var i = 1;\r\n          var nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n          while (nLVector.length() === 0 && index > i + 1) {\r\n              i++;\r\n              nLVector = this._curve[index].subtract(this._curve[index - i]);\r\n          }\r\n          return nLVector;\r\n      };\r\n      // private function normalVector(v0, vt, va) :\r\n      // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\r\n      // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\r\n      Path3D.prototype._normalVector = function (v0, vt, va) {\r\n          var normal0;\r\n          var tgl = vt.length();\r\n          if (tgl === 0.0) {\r\n              tgl = 1.0;\r\n          }\r\n          if (va === undefined || va === null) {\r\n              var point = void 0;\r\n              if (!Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, Epsilon)) {\r\n                  // search for a point in the plane\r\n                  point = new Vector3(0.0, -1.0, 0.0);\r\n              }\r\n              else if (!Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, Epsilon)) {\r\n                  point = new Vector3(1.0, 0.0, 0.0);\r\n              }\r\n              else if (!Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, Epsilon)) {\r\n                  point = new Vector3(0.0, 0.0, 1.0);\r\n              }\r\n              else {\r\n                  point = Vector3.Zero();\r\n              }\r\n              normal0 = Vector3.Cross(vt, point);\r\n          }\r\n          else {\r\n              normal0 = Vector3.Cross(vt, va);\r\n              Vector3.CrossToRef(normal0, vt, normal0);\r\n          }\r\n          normal0.normalize();\r\n          return normal0;\r\n      };\r\n      return Path3D;\r\n  }());\n\n  /**\r\n   * Size containing widht and height\r\n   * @public\r\n   */\r\n  var Size = /** @class */ (function () {\r\n      /**\r\n       * Creates a Size object from the given width and height (floats).\r\n       * @param width - width of the new size\r\n       * @param height - height of the new size\r\n       */\r\n      function Size(width, height) {\r\n          this.width = width;\r\n          this.height = height;\r\n      }\r\n      Object.defineProperty(Size.prototype, \"surface\", {\r\n          /**\r\n           * The surface of the Size : width * height (float).\r\n           */\r\n          get: function () {\r\n              return this.width * this.height;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * Create a new size of zero\r\n       * @returns a new Size set to (0.0, 0.0)\r\n       */\r\n      Size.Zero = function () {\r\n          return new Size(0.0, 0.0);\r\n      };\r\n      /**\r\n       * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n       * @param start - starting size to lerp between\r\n       * @param end - end size to lerp between\r\n       * @param amount - amount to lerp between the start and end values\r\n       * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n       */\r\n      Size.Lerp = function (start, end, amount) {\r\n          var w = start.width + (end.width - start.width) * amount;\r\n          var h = start.height + (end.height - start.height) * amount;\r\n          return new Size(w, h);\r\n      };\r\n      /**\r\n       * Returns a string with the Size width and height\r\n       * @returns a string with the Size width and height\r\n       */\r\n      Size.prototype.toString = function () {\r\n          return \"{W: \" + this.width + \", H: \" + this.height + \"}\";\r\n      };\r\n      /**\r\n       * \"Size\"\r\n       * @returns the string \"Size\"\r\n       */\r\n      Size.prototype.getClassName = function () {\r\n          return 'Size';\r\n      };\r\n      /**\r\n       * Returns the Size hash code.\r\n       * @returns a hash code for a unique width and height\r\n       */\r\n      Size.prototype.getHashCode = function () {\r\n          var hash = this.width || 0;\r\n          hash = (hash * 397) ^ (this.height || 0);\r\n          return hash;\r\n      };\r\n      /**\r\n       * Updates the current size from the given one.\r\n       * @param src - the given size\r\n       */\r\n      Size.prototype.copyFrom = function (src) {\r\n          this.width = src.width;\r\n          this.height = src.height;\r\n      };\r\n      /**\r\n       * Updates in place the current Size from the given floats.\r\n       * @param width - width of the new size\r\n       * @param height - height of the new size\r\n       * @returns the updated Size.\r\n       */\r\n      Size.prototype.copyFromFloats = function (width, height) {\r\n          this.width = width;\r\n          this.height = height;\r\n          return this;\r\n      };\r\n      /**\r\n       * Updates in place the current Size from the given floats.\r\n       * @param width - width to set\r\n       * @param height - height to set\r\n       * @returns the updated Size.\r\n       */\r\n      Size.prototype.set = function (width, height) {\r\n          return this.copyFromFloats(width, height);\r\n      };\r\n      /**\r\n       * Multiplies the width and height by numbers\r\n       * @param w - factor to multiple the width by\r\n       * @param h - factor to multiple the height by\r\n       * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n       */\r\n      Size.prototype.multiplyByFloats = function (w, h) {\r\n          return new Size(this.width * w, this.height * h);\r\n      };\r\n      /**\r\n       * Clones the size\r\n       * @returns a new Size copied from the given one.\r\n       */\r\n      Size.prototype.clone = function () {\r\n          return new Size(this.width, this.height);\r\n      };\r\n      /**\r\n       * True if the current Size and the given one width and height are strictly equal.\r\n       * @param other - the other size to compare against\r\n       * @returns True if the current Size and the given one width and height are strictly equal.\r\n       */\r\n      Size.prototype.equals = function (other) {\r\n          if (!other) {\r\n              return false;\r\n          }\r\n          return this.width === other.width && this.height === other.height;\r\n      };\r\n      /**\r\n       * Sums the width and height of two sizes\r\n       * @param otherSize - size to add to this size\r\n       * @returns a new Size set as the addition result of the current Size and the given one.\r\n       */\r\n      Size.prototype.add = function (otherSize) {\r\n          var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\r\n          return r;\r\n      };\r\n      /**\r\n       * Subtracts the width and height of two\r\n       * @param otherSize - size to subtract to this size\r\n       * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n       */\r\n      Size.prototype.subtract = function (otherSize) {\r\n          var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\r\n          return r;\r\n      };\r\n      return Size;\r\n  }());\n\n  var defaultParams = {\r\n      looping: true,\r\n      speed: 1.0,\r\n      weight: 1.0,\r\n      layer: 0\r\n  };\r\n  /**\r\n   * @public\r\n   */\r\n  var AnimationState = /** @class */ (function (_super) {\r\n      __extends(AnimationState, _super);\r\n      function AnimationState(clip, params) {\r\n          if (params === void 0) { params = defaultParams; }\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.isAnimationClip = true;\r\n          /**\r\n           * Does the animation loop?, default: true\r\n           */\r\n          _this.looping = defaultParams.looping;\r\n          /**\r\n           * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\r\n           */\r\n          _this.weight = defaultParams.weight;\r\n          /**\r\n           * Is the animation playing? default: true\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Does any anyone asked to reset the animation? default: false\r\n           */\r\n          _this.shouldReset = false;\r\n          /**\r\n           * The animation speed\r\n           */\r\n          _this.speed = defaultParams.speed;\r\n          // @internal\r\n          _this.name = newId('AnimClip');\r\n          /**\r\n           * Layering allows you to have two or more levels of animation on an object's parameters at the same time\r\n           */\r\n          _this.layer = defaultParams.layer;\r\n          _this.clip = clip;\r\n          _this.setParams(__assign({}, params));\r\n          return _this;\r\n      }\r\n      /**\r\n       * Sets the clip parameters\r\n       */\r\n      AnimationState.prototype.setParams = function (params) {\r\n          this.looping = params.looping !== undefined ? params.looping : this.looping;\r\n          this.speed = params.speed || this.speed;\r\n          this.weight = params.weight || this.weight;\r\n          this.layer = params.layer || this.layer;\r\n          return this;\r\n      };\r\n      AnimationState.prototype.toJSON = function () {\r\n          var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n          if (this.shouldReset) {\r\n              this.shouldReset = false;\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      AnimationState.prototype.play = function (reset) {\r\n          var _a;\r\n          if (reset === void 0) { reset = false; }\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.play(this, reset);\r\n      };\r\n      /**\r\n       * Pauses the animation\r\n       */\r\n      AnimationState.prototype.pause = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.pause(this);\r\n      };\r\n      /**\r\n       * Resets the animation state to the frame 0\r\n       */\r\n      AnimationState.prototype.reset = function () {\r\n          this.shouldReset = true;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation\r\n       */\r\n      AnimationState.prototype.stop = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.stop(this);\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], AnimationState.prototype, \"clip\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AnimationState.prototype, \"looping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AnimationState.prototype, \"weight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AnimationState.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AnimationState.prototype, \"shouldReset\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AnimationState.prototype, \"speed\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], AnimationState.prototype, \"name\", void 0);\r\n      return AnimationState;\r\n  }(ObservableComponent));\n\n  /** @public */\r\n  exports.InputEventType = void 0;\r\n  (function (InputEventType) {\r\n      InputEventType[InputEventType[\"DOWN\"] = 0] = \"DOWN\";\r\n      InputEventType[InputEventType[\"UP\"] = 1] = \"UP\";\r\n  })(exports.InputEventType || (exports.InputEventType = {}));\r\n  /** @public */\r\n  exports.CameraMode = void 0;\r\n  (function (CameraMode) {\r\n      CameraMode[CameraMode[\"FirstPerson\"] = 0] = \"FirstPerson\";\r\n      CameraMode[CameraMode[\"ThirdPerson\"] = 1] = \"ThirdPerson\";\r\n      CameraMode[CameraMode[\"BuildingToolGodMode\"] = 2] = \"BuildingToolGodMode\";\r\n  })(exports.CameraMode || (exports.CameraMode = {}));\r\n  // @internal\r\n  var AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE';\r\n  /** @public */\r\n  exports.LandRole = void 0;\r\n  (function (LandRole) {\r\n      LandRole[\"OWNER\"] = \"owner\";\r\n      LandRole[\"OPERATOR\"] = \"operator\";\r\n  })(exports.LandRole || (exports.LandRole = {}));\n\n  // tslint:disable:ter-indent\r\n  /**\r\n   * @public\r\n   */\r\n  exports.ActionButton = void 0;\r\n  (function (ActionButton) {\r\n      ActionButton[\"POINTER\"] = \"POINTER\";\r\n      ActionButton[\"PRIMARY\"] = \"PRIMARY\";\r\n      ActionButton[\"SECONDARY\"] = \"SECONDARY\";\r\n      ActionButton[\"ANY\"] = \"ANY\";\r\n      ActionButton[\"FORWARD\"] = \"FORWARD\";\r\n      ActionButton[\"BACKWARD\"] = \"BACKWARD\";\r\n      ActionButton[\"RIGHT\"] = \"RIGHT\";\r\n      ActionButton[\"LEFT\"] = \"LEFT\";\r\n      ActionButton[\"JUMP\"] = \"JUMP\";\r\n      ActionButton[\"WALK\"] = \"WALK\";\r\n      ActionButton[\"ACTION_3\"] = \"ACTION_3\";\r\n      ActionButton[\"ACTION_4\"] = \"ACTION_4\";\r\n      ActionButton[\"ACTION_5\"] = \"ACTION_5\";\r\n      ActionButton[\"ACTION_6\"] = \"ACTION_6\";\r\n  })(exports.ActionButton || (exports.ActionButton = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventComponent = /** @class */ (function () {\r\n      function PointerEventComponent(callback) {\r\n          this.callback = callback;\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          // tslint:disable-next-line:no-use-before-declare\r\n          Input.ensureInstance();\r\n      }\r\n      return PointerEventComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerDown = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerDown, _super);\r\n      function GlobalPointerDown() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerDown = __decorate([\r\n          Component('pointerDown')\r\n      ], GlobalPointerDown);\r\n      return GlobalPointerDown;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerUp = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerUp, _super);\r\n      function GlobalPointerUp() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerUp = __decorate([\r\n          Component('pointerUp')\r\n      ], GlobalPointerUp);\r\n      return GlobalPointerUp;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Subscription = /** @class */ (function () {\r\n      function Subscription(fn, useRaycast) {\r\n          this.fn = fn;\r\n          this.useRaycast = useRaycast;\r\n      }\r\n      return Subscription;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var Input = /** @class */ (function () {\r\n      function Input() {\r\n          // @internal\r\n          this.buttonIdMapping = [\r\n              exports.ActionButton.POINTER,\r\n              exports.ActionButton.PRIMARY,\r\n              exports.ActionButton.SECONDARY,\r\n              exports.ActionButton.ANY,\r\n              exports.ActionButton.FORWARD,\r\n              exports.ActionButton.BACKWARD,\r\n              exports.ActionButton.RIGHT,\r\n              exports.ActionButton.LEFT,\r\n              exports.ActionButton.JUMP,\r\n              exports.ActionButton.WALK,\r\n              exports.ActionButton.ACTION_3,\r\n              exports.ActionButton.ACTION_4,\r\n              exports.ActionButton.ACTION_5,\r\n              exports.ActionButton.ACTION_6\r\n          ];\r\n          // @internal\r\n          this.subscriptions = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: [], BUTTON_UP: [] }, _a)));\r\n          }, {});\r\n          this.internalState = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: false }, _a)));\r\n          }, {});\r\n      }\r\n      Object.defineProperty(Input, \"instance\", {\r\n          get: function () {\r\n              Input.ensureInstance();\r\n              return Input._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Input.ensureInstance = function () {\r\n          if (!Input._instance) {\r\n              Input._instance = new Input();\r\n          }\r\n      };\r\n      /**\r\n       * Allows to know if a button is pressed\r\n       *\r\n       * Returns true if the button is pressed\r\n       * @param buttonId - The id of the button.\r\n       */\r\n      Input.prototype.isButtonPressed = function (buttonId) {\r\n          return this.internalState[buttonId];\r\n      };\r\n      /**\r\n       * Subscribes to an input event and triggers the provided callback.\r\n       *\r\n       * Returns a function that can be called to remove the subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param useRaycast - Enables getting raycast information.\r\n       * @param fn - A callback function to be called when the event is triggered.\r\n       */\r\n      Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\r\n          var _this = this;\r\n          this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\r\n          return function () {\r\n              _this.unsubscribe(eventName, buttonId, fn);\r\n          };\r\n      };\r\n      /**\r\n       * Removes an existing input event subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param fn - The callback function used when subscribing to the event.\r\n       */\r\n      Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\r\n          var index = this.getSubscriptionId(eventName, buttonId, fn);\r\n          if (index > -1) {\r\n              return this.subscriptions[buttonId][eventName].splice(index, 1);\r\n          }\r\n          return false;\r\n      };\r\n      Input.prototype.handlePointerEvent = function (data) {\r\n          var button = this.getPointerById(data.buttonId);\r\n          if (!button) {\r\n              return;\r\n          }\r\n          var eventResult = __assign(__assign({}, data), { button: button, direction: new Vector3().copyFrom(data.direction), origin: new Vector3().copyFrom(data.origin), hit: undefined });\r\n          var hit = data.hit\r\n              ? __assign(__assign({}, data.hit), { hitPoint: new Vector3().copyFrom(data.hit.hitPoint), normal: new Vector3().copyFrom(data.hit.normal), worldNormal: new Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\r\n          if (data.type === exports.InputEventType.DOWN) {\r\n              this.internalState[button].BUTTON_DOWN = true;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_DOWN'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.internalState[button].BUTTON_DOWN = false;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_UP'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\r\n          for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\r\n              if (this.subscriptions[buttonId][eventName][i].fn === fn) {\r\n                  return i;\r\n              }\r\n          }\r\n          return -1;\r\n      };\r\n      Input.prototype.getPointerById = function (id) {\r\n          if (id < 0 || id >= this.buttonIdMapping.length) {\r\n              return null;\r\n          }\r\n          var actionButton = this.buttonIdMapping[id];\r\n          if (actionButton === exports.ActionButton.ANY) {\r\n              return null;\r\n          }\r\n          return actionButton;\r\n      };\r\n      return Input;\r\n  }());\n\n  /**\r\n   * @internal\r\n   */\r\n  exports.CLASS_ID = void 0;\r\n  (function (CLASS_ID) {\r\n      CLASS_ID[CLASS_ID[\"TRANSFORM\"] = 1] = \"TRANSFORM\";\r\n      CLASS_ID[CLASS_ID[\"UUID_CALLBACK\"] = 8] = \"UUID_CALLBACK\";\r\n      CLASS_ID[CLASS_ID[\"BOX_SHAPE\"] = 16] = \"BOX_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"SPHERE_SHAPE\"] = 17] = \"SPHERE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"PLANE_SHAPE\"] = 18] = \"PLANE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CONE_SHAPE\"] = 19] = \"CONE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CYLINDER_SHAPE\"] = 20] = \"CYLINDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"TEXT_SHAPE\"] = 21] = \"TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"NFT_SHAPE\"] = 22] = \"NFT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_WORLD_SPACE_SHAPE\"] = 23] = \"UI_WORLD_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SCREEN_SPACE_SHAPE\"] = 24] = \"UI_SCREEN_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_RECT\"] = 25] = \"UI_CONTAINER_RECT\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_STACK\"] = 26] = \"UI_CONTAINER_STACK\";\r\n      CLASS_ID[CLASS_ID[\"UI_TEXT_SHAPE\"] = 27] = \"UI_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_INPUT_TEXT_SHAPE\"] = 28] = \"UI_INPUT_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_IMAGE_SHAPE\"] = 29] = \"UI_IMAGE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SLIDER_SHAPE\"] = 30] = \"UI_SLIDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CIRCLE_SHAPE\"] = 31] = \"CIRCLE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BILLBOARD\"] = 32] = \"BILLBOARD\";\r\n      CLASS_ID[CLASS_ID[\"ANIMATION\"] = 33] = \"ANIMATION\";\r\n      CLASS_ID[CLASS_ID[\"FONT\"] = 34] = \"FONT\";\r\n      CLASS_ID[CLASS_ID[\"UI_FULLSCREEN_SHAPE\"] = 40] = \"UI_FULLSCREEN_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_BUTTON_SHAPE\"] = 41] = \"UI_BUTTON_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"GLTF_SHAPE\"] = 54] = \"GLTF_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"OBJ_SHAPE\"] = 55] = \"OBJ_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_SHAPE\"] = 56] = \"AVATAR_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BASIC_MATERIAL\"] = 64] = \"BASIC_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"PBR_MATERIAL\"] = 65] = \"PBR_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"HIGHLIGHT_ENTITY\"] = 66] = \"HIGHLIGHT_ENTITY\";\r\n      /** @deprecated */\r\n      CLASS_ID[CLASS_ID[\"SOUND\"] = 67] = \"SOUND\";\r\n      CLASS_ID[CLASS_ID[\"TEXTURE\"] = 68] = \"TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_CLIP\"] = 70] = \"VIDEO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_TEXTURE\"] = 71] = \"VIDEO_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_CLIP\"] = 200] = \"AUDIO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_SOURCE\"] = 201] = \"AUDIO_SOURCE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_STREAM\"] = 202] = \"AUDIO_STREAM\";\r\n      CLASS_ID[CLASS_ID[\"GIZMOS\"] = 203] = \"GIZMOS\";\r\n      CLASS_ID[CLASS_ID[\"SMART_ITEM\"] = 204] = \"SMART_ITEM\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_MODIFIER_AREA\"] = 205] = \"AVATAR_MODIFIER_AREA\";\r\n      // For state sync only\r\n      CLASS_ID[CLASS_ID[\"NAME\"] = 300] = \"NAME\";\r\n      CLASS_ID[CLASS_ID[\"LOCKED_ON_EDIT\"] = 301] = \"LOCKED_ON_EDIT\";\r\n      CLASS_ID[CLASS_ID[\"VISIBLE_ON_EDIT\"] = 302] = \"VISIBLE_ON_EDIT\";\r\n  })(exports.CLASS_ID || (exports.CLASS_ID = {}));\r\n  /** @public */\r\n  exports.AvatarModifiers = void 0;\r\n  (function (AvatarModifiers) {\r\n      AvatarModifiers[\"HIDE_AVATARS\"] = \"HIDE_AVATARS\";\r\n      AvatarModifiers[\"DISABLE_PASSPORTS\"] = \"DISABLE_PASSPORTS\";\r\n  })(exports.AvatarModifiers || (exports.AvatarModifiers = {}));\r\n  /**\r\n   * Define an area where avatars can be modified in some way\r\n   * @public\r\n   */\r\n  var AvatarModifierArea = /** @class */ (function (_super) {\r\n      __extends(AvatarModifierArea, _super);\r\n      function AvatarModifierArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.modifiers = args.modifiers;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarModifierArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarModifierArea.prototype, \"modifiers\", void 0);\r\n      AvatarModifierArea = __decorate([\r\n          Component('engine.avatarModifierArea', exports.CLASS_ID.AVATAR_MODIFIER_AREA)\r\n      ], AvatarModifierArea);\r\n      return AvatarModifierArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Transform = /** @class */ (function (_super) {\r\n      __extends(Transform, _super);\r\n      function Transform(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.position = args.position || Vector3.Zero();\r\n          _this.rotation = args.rotation || Quaternion.Identity;\r\n          _this.scale = args.scale || new Vector3(1, 1, 1);\r\n          return _this;\r\n      }\r\n      Object.defineProperty(Transform.prototype, \"eulerAngles\", {\r\n          /**\r\n           * @public\r\n           * The rotation as Euler angles in degrees.\r\n           */\r\n          get: function () {\r\n              return this.rotation.eulerAngles;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * @public\r\n       * Rotates the transform so the forward vector points at target's current position.\r\n       */\r\n      Transform.prototype.lookAt = function (target, worldUp) {\r\n          if (worldUp === void 0) { worldUp = MathTmp.staticUp; }\r\n          var result = new Matrix();\r\n          Matrix.LookAtLHToRef(this.position, target, worldUp, result);\r\n          result.invert();\r\n          Quaternion.FromRotationMatrixToRef(result, this.rotation);\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Applies a rotation of euler angles around the x, y and z axis.\r\n       */\r\n      Transform.prototype.rotate = function (axis, angle) {\r\n          this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Moves the transform in the direction and distance of translation.\r\n       */\r\n      Transform.prototype.translate = function (vec) {\r\n          this.position.addInPlace(vec);\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Transform.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Transform.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Transform.prototype, \"scale\", void 0);\r\n      Transform = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.TRANSFORM)\r\n      ], Transform);\r\n      return Transform;\r\n  }(ObservableComponent));\r\n  /**\r\n   * Billboard defines a behavior that makes the entity face the camera in any moment.\r\n   * @public\r\n   */\r\n  var Billboard = /** @class */ (function (_super) {\r\n      __extends(Billboard, _super);\r\n      function Billboard(x, y, z) {\r\n          if (x === void 0) { x = true; }\r\n          if (y === void 0) { y = true; }\r\n          if (z === void 0) { z = true; }\r\n          var _this = _super.call(this) || this;\r\n          _this.x = true;\r\n          _this.y = true;\r\n          _this.z = true;\r\n          _this.x = x;\r\n          _this.y = y;\r\n          _this.z = z;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Billboard.prototype, \"x\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Billboard.prototype, \"y\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Billboard.prototype, \"z\", void 0);\r\n      Billboard = __decorate([\r\n          Component('engine.billboard', exports.CLASS_ID.BILLBOARD)\r\n      ], Billboard);\r\n      return Billboard;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Shape = /** @class */ (function (_super) {\r\n      __extends(Shape, _super);\r\n      function Shape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Set to true to turn on the collider for the entity.\r\n           */\r\n          _this.withCollisions = true;\r\n          /**\r\n           * Set to true to turn on the PointerEvents blocking for the entity.\r\n           */\r\n          _this.isPointerBlocker = true;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.visible = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Shape.prototype, \"withCollisions\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Shape.prototype, \"isPointerBlocker\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Shape.prototype, \"visible\", void 0);\r\n      return Shape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BoxShape = /** @class */ (function (_super) {\r\n      __extends(BoxShape, _super);\r\n      function BoxShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], BoxShape.prototype, \"uvs\", void 0);\r\n      BoxShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.BOX_SHAPE)\r\n      ], BoxShape);\r\n      return BoxShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var SphereShape = /** @class */ (function (_super) {\r\n      __extends(SphereShape, _super);\r\n      function SphereShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SphereShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.SPHERE_SHAPE)\r\n      ], SphereShape);\r\n      return SphereShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CircleShape = /** @class */ (function (_super) {\r\n      __extends(CircleShape, _super);\r\n      function CircleShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CircleShape.prototype, \"segments\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CircleShape.prototype, \"arc\", void 0);\r\n      CircleShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CIRCLE_SHAPE)\r\n      ], CircleShape);\r\n      return CircleShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var PlaneShape = /** @class */ (function (_super) {\r\n      __extends(PlaneShape, _super);\r\n      function PlaneShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Sets the horizontal length of the plane. Defaults to 1.\r\n           */\r\n          _this.width = 1;\r\n          /**\r\n           * Sets the vertical length of the plane. Defaults to 1.\r\n           */\r\n          _this.height = 1;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], PlaneShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], PlaneShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], PlaneShape.prototype, \"uvs\", void 0);\r\n      PlaneShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.PLANE_SHAPE)\r\n      ], PlaneShape);\r\n      return PlaneShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var ConeShape = /** @class */ (function (_super) {\r\n      __extends(ConeShape, _super);\r\n      function ConeShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of a truncated cone. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 0;\r\n          /**\r\n           * The radius of the base of the cone. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cone height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cone sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cone around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], ConeShape.prototype, \"arc\", void 0);\r\n      ConeShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CONE_SHAPE)\r\n      ], ConeShape);\r\n      return ConeShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CylinderShape = /** @class */ (function (_super) {\r\n      __extends(CylinderShape, _super);\r\n      function CylinderShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of the cylinder. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 1;\r\n          /**\r\n           * The radius of the base of the cylinder. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cylinder sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], CylinderShape.prototype, \"arc\", void 0);\r\n      CylinderShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CYLINDER_SHAPE)\r\n      ], CylinderShape);\r\n      return CylinderShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var GLTFShape = /** @class */ (function (_super) {\r\n      __extends(GLTFShape, _super);\r\n      function GLTFShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly\r\n      ], GLTFShape.prototype, \"src\", void 0);\r\n      GLTFShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.GLTF_SHAPE)\r\n      ], GLTFShape);\r\n      return GLTFShape;\r\n  }(Shape));\r\n  /** @public */\r\n  exports.PictureFrameStyle = void 0;\r\n  (function (PictureFrameStyle) {\r\n      PictureFrameStyle[PictureFrameStyle[\"Classic\"] = 0] = \"Classic\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Baroque_Ornament\"] = 1] = \"Baroque_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Diamond_Ornament\"] = 2] = \"Diamond_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Wide\"] = 3] = \"Minimal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Grey\"] = 4] = \"Minimal_Grey\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Blocky\"] = 5] = \"Blocky\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Edges\"] = 6] = \"Gold_Edges\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Carved\"] = 7] = \"Gold_Carved\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Wide\"] = 8] = \"Gold_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Rounded\"] = 9] = \"Gold_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Medium\"] = 10] = \"Metal_Medium\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Wide\"] = 11] = \"Metal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Slim\"] = 12] = \"Metal_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Rounded\"] = 13] = \"Metal_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Pins\"] = 14] = \"Pins\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Black\"] = 15] = \"Minimal_Black\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_White\"] = 16] = \"Minimal_White\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Tape\"] = 17] = \"Tape\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Slim\"] = 18] = \"Wood_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Wide\"] = 19] = \"Wood_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Twigs\"] = 20] = \"Wood_Twigs\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Canvas\"] = 21] = \"Canvas\";\r\n      PictureFrameStyle[PictureFrameStyle[\"None\"] = 22] = \"None\";\r\n  })(exports.PictureFrameStyle || (exports.PictureFrameStyle = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var NFTShape = /** @class */ (function (_super) {\r\n      __extends(NFTShape, _super);\r\n      function NFTShape(src, args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          var color = new Color3(0.6404918, 0.611472, 0.8584906);\r\n          var style = exports.PictureFrameStyle.Classic;\r\n          // check if args is color (backwards compatibility)\r\n          if ('r' in args) {\r\n              color = args;\r\n          }\r\n          else if (args != null) {\r\n              if (args.color)\r\n                  color = args.color;\r\n              if (args.style)\r\n                  style = args.style;\r\n          }\r\n          _this.color = color;\r\n          _this.style = style;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly\r\n      ], NFTShape.prototype, \"src\", void 0);\r\n      __decorate([\r\n          Shape.readonly\r\n      ], NFTShape.prototype, \"style\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], NFTShape.prototype, \"color\", void 0);\r\n      NFTShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.NFT_SHAPE)\r\n      ], NFTShape);\r\n      return NFTShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Texture = /** @class */ (function (_super) {\r\n      __extends(Texture, _super);\r\n      function Texture(src, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Texture.prototype, \"src\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Texture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Texture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Texture.prototype, \"hasAlpha\", void 0);\r\n      Texture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.TEXTURE)\r\n      ], Texture);\r\n      return Texture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Animator = /** @class */ (function (_super) {\r\n      __extends(Animator, _super);\r\n      function Animator() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.states = [];\r\n          return _this;\r\n      }\r\n      /**\r\n       * Adds an AnimationState to the animation lists.\r\n       */\r\n      Animator.prototype.addClip = function (clip) {\r\n          var _this = this;\r\n          this.states.push(clip);\r\n          clip.onChange(function () {\r\n              _this.dirty = true;\r\n          });\r\n          clip.owner = this;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the animation clip instance for the specified clip name.\r\n       * If the clip doesn't exist a new one will be created.\r\n       */\r\n      Animator.prototype.getClip = function (clipName) {\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var clip = this.states[i];\r\n              if (clip.clip === clipName) {\r\n                  return clip;\r\n              }\r\n          }\r\n          var newClip = new AnimationState(clipName);\r\n          this.addClip(newClip);\r\n          return newClip;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator\r\n       */\r\n      Animator.prototype.stop = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n              clip.shouldReset = true;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.stop(animationState);\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      Animator.prototype.play = function (clip, reset) {\r\n          if (reset === void 0) { reset = false; }\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var animationState = this.states[i];\r\n              if (animationState.layer === clip.layer && clip !== animationState) {\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n          if (reset)\r\n              clip.shouldReset = true;\r\n          clip.playing = true;\r\n          clip.dirty = true;\r\n          clip.data.nonce = Math.random();\r\n      };\r\n      /**\r\n       * Pauses the animation state, if the clip is null it will pause all animations on this animator\r\n       */\r\n      Animator.prototype.pause = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Animator.prototype, \"states\", void 0);\r\n      Animator = __decorate([\r\n          Component('engine.animator', exports.CLASS_ID.ANIMATION)\r\n      ], Animator);\r\n      return Animator;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var OBJShape = /** @class */ (function (_super) {\r\n      __extends(OBJShape, _super);\r\n      function OBJShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OBJShape.prototype, \"src\", void 0);\r\n      OBJShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.OBJ_SHAPE)\r\n      ], OBJShape);\r\n      return OBJShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Font = /** @class */ (function (_super) {\r\n      __extends(Font, _super);\r\n      function Font(src) {\r\n          if (src === void 0) { src = ''; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], Font.prototype, \"src\", void 0);\r\n      Font = __decorate([\r\n          DisposableComponent('engine.font', exports.CLASS_ID.FONT)\r\n      ], Font);\r\n      return Font;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.Fonts = void 0;\r\n  (function (Fonts) {\r\n      /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/\r\n      Fonts[\"SanFrancisco\"] = \"builtin:SF-UI-Text-Regular SDF\";\r\n      /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/\r\n      Fonts[\"SanFrancisco_Heavy\"] = \"builtin:SF-UI-Text-Heavy SDF\";\r\n      /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/\r\n      Fonts[\"SanFrancisco_Semibold\"] = \"builtin:SF-UI-Text-Semibold SDF\";\r\n      Fonts[\"LiberationSans\"] = \"builtin:LiberationSans SDF\";\r\n      Fonts[\"SansSerif\"] = \"SansSerif\";\r\n      Fonts[\"SansSerif_Heavy\"] = \"SansSerif_Heavy\";\r\n      Fonts[\"SansSerif_Bold\"] = \"SansSerif_Bold\";\r\n      Fonts[\"SansSerif_SemiBold\"] = \"SansSerif_SemiBold\";\r\n  })(exports.Fonts || (exports.Fonts = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var TextShape = /** @class */ (function (_super) {\r\n      __extends(TextShape, _super);\r\n      function TextShape(value) {\r\n          var _this = _super.call(this) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = new Color3(1, 1, 1);\r\n          _this.color = new Color3(1, 1, 1);\r\n          _this.fontSize = 10;\r\n          _this.opacity = 1.0;\r\n          _this.value = '';\r\n          _this.lineSpacing = '0px';\r\n          _this.lineCount = 0;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = new Color3(1, 1, 1);\r\n          _this.hTextAlign = 'center';\r\n          _this.vTextAlign = 'center';\r\n          _this.width = 1;\r\n          _this.height = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.billboard = false;\r\n          _this.visible = true;\r\n          if (value) {\r\n              _this.value = value;\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], TextShape.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"billboard\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], TextShape.prototype, \"visible\", void 0);\r\n      TextShape = __decorate([\r\n          Component('engine.text', exports.CLASS_ID.TEXT_SHAPE)\r\n      ], TextShape);\r\n      return TextShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.TransparencyMode = void 0;\r\n  (function (TransparencyMode) {\r\n      TransparencyMode[TransparencyMode[\"OPAQUE\"] = 0] = \"OPAQUE\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST\"] = 1] = \"ALPHA_TEST\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_BLEND\"] = 2] = \"ALPHA_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST_AND_BLEND\"] = 3] = \"ALPHA_TEST_AND_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"AUTO\"] = 4] = \"AUTO\";\r\n  })(exports.TransparencyMode || (exports.TransparencyMode = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var Material = /** @class */ (function (_super) {\r\n      __extends(Material, _super);\r\n      function Material() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\r\n           * Defaults to 0.5\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          /**\r\n           * Sets the transparency mode of the material.\r\n           * Defaults to -1.\r\n           *\r\n           * | Value | Type                                           |\r\n           * | ----- | ---------------------------------------------- |\r\n           * | 0     | OPAQUE  (default)                              |\r\n           * | 1     | ALPHATEST                                      |\r\n           * | 2     | ALPHABLEND                                     |\r\n           * | 3     | ALPHATESTANDBLEND                              |\r\n           * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\r\n           */\r\n          _this.transparencyMode = exports.TransparencyMode.AUTO;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"albedoColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"emissiveColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"metallic\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"roughness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"reflectivityColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"directIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"microSurface\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"emissiveIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"specularIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], Material.prototype, \"albedoTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], Material.prototype, \"alphaTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], Material.prototype, \"emissiveTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], Material.prototype, \"bumpTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"castShadows\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Material.prototype, \"transparencyMode\", void 0);\r\n      Material = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.PBR_MATERIAL)\r\n      ], Material);\r\n      return Material;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BasicMaterial = /** @class */ (function (_super) {\r\n      __extends(BasicMaterial, _super);\r\n      function BasicMaterial() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * A number between 0 and 1.\r\n           * Any pixel with an alpha lower than this value will be shown as transparent.\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], BasicMaterial.prototype, \"texture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], BasicMaterial.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], BasicMaterial.prototype, \"castShadows\", void 0);\r\n      BasicMaterial = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.BASIC_MATERIAL)\r\n      ], BasicMaterial);\r\n      return BasicMaterial;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnUUIDEvent, _super);\r\n      function OnUUIDEvent(callback) {\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.uuid = newId('UUID');\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          _this.callback = callback;\r\n          return _this;\r\n      }\r\n      OnUUIDEvent.uuidEvent = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          if (value instanceof OnUUIDEvent) {\r\n                              this.data[propertyKey] = value.uuid;\r\n                          }\r\n                          else {\r\n                              throw new Error('value is not an OnUUIDEvent');\r\n                          }\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      OnUUIDEvent.prototype.toJSON = function () {\r\n          return { uuid: this.uuid, type: this.type };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], OnUUIDEvent.prototype, \"callback\", void 0);\r\n      return OnUUIDEvent;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnPointerUUIDEvent, _super);\r\n      function OnPointerUUIDEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.button = exports.ActionButton.ANY;\r\n          _this.hoverText = 'Interact';\r\n          _this.distance = 10;\r\n          _this.showFeedback = true;\r\n          return _this;\r\n      }\r\n      OnPointerUUIDEvent.prototype.toJSON = function () {\r\n          return {\r\n              uuid: this.uuid,\r\n              type: this.type,\r\n              button: this.button,\r\n              hoverText: this.hoverText,\r\n              distance: this.distance,\r\n              showFeedback: this.showFeedback\r\n          };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], OnPointerUUIDEvent.prototype, \"button\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], OnPointerUUIDEvent.prototype, \"hoverText\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], OnPointerUUIDEvent.prototype, \"distance\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], OnPointerUUIDEvent.prototype, \"showFeedback\", void 0);\r\n      return OnPointerUUIDEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var OnPointerLock = /** @class */ (function (_super) {\r\n      __extends(OnPointerLock, _super);\r\n      function OnPointerLock() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onPointerLock';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnPointerLock.prototype, \"type\", void 0);\r\n      OnPointerLock = __decorate([\r\n          Component('engine.onPointerLock', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerLock);\r\n      return OnPointerLock;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnAnimationEnd = /** @class */ (function (_super) {\r\n      __extends(OnAnimationEnd, _super);\r\n      function OnAnimationEnd() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onAnimationEnd';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnAnimationEnd.prototype, \"type\", void 0);\r\n      OnAnimationEnd = __decorate([\r\n          Component('engine.onAnimationEnd', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnAnimationEnd);\r\n      return OnAnimationEnd;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var SmartItem = /** @class */ (function (_super) {\r\n      __extends(SmartItem, _super);\r\n      function SmartItem() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SmartItem = __decorate([\r\n          Component('engine.smartItem', exports.CLASS_ID.SMART_ITEM)\r\n      ], SmartItem);\r\n      return SmartItem;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoClip = /** @class */ (function (_super) {\r\n      __extends(VideoClip, _super);\r\n      function VideoClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], VideoClip.prototype, \"url\", void 0);\r\n      VideoClip = __decorate([\r\n          DisposableComponent('engine.VideoClip', exports.CLASS_ID.VIDEO_CLIP)\r\n      ], VideoClip);\r\n      return VideoClip;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.VideoStatus = void 0;\r\n  (function (VideoStatus) {\r\n      VideoStatus[VideoStatus[\"NONE\"] = 0] = \"NONE\";\r\n      VideoStatus[VideoStatus[\"ERROR\"] = 1] = \"ERROR\";\r\n      VideoStatus[VideoStatus[\"LOADING\"] = 2] = \"LOADING\";\r\n      VideoStatus[VideoStatus[\"READY\"] = 3] = \"READY\";\r\n      VideoStatus[VideoStatus[\"PLAYING\"] = 4] = \"PLAYING\";\r\n      VideoStatus[VideoStatus[\"BUFFERING\"] = 5] = \"BUFFERING\";\r\n  })(exports.VideoStatus || (exports.VideoStatus = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoTexture = /** @class */ (function (_super) {\r\n      __extends(VideoTexture, _super);\r\n      function VideoTexture(videoClip, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.volume = 1;\r\n          _this.playbackRate = 1;\r\n          _this.loop = false;\r\n          _this.seek = -1;\r\n          _this._position = -1;\r\n          _this._videoLength = -1;\r\n          _this._status = exports.VideoStatus.NONE;\r\n          /**\r\n           * Is this VideoTexture playing?\r\n           */\r\n          _this.playing = false;\r\n          if (!(videoClip instanceof VideoClip)) {\r\n              throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");\r\n          }\r\n          _this.videoClipId = getComponentId(videoClip);\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      VideoTexture.prototype.play = function () {\r\n          this.playing = true;\r\n      };\r\n      VideoTexture.prototype.pause = function () {\r\n          this.playing = false;\r\n      };\r\n      VideoTexture.prototype.reset = function () {\r\n          this.seekTime(0);\r\n          this.pause();\r\n      };\r\n      VideoTexture.prototype.seekTime = function (seconds) {\r\n          this.seek = seconds;\r\n          this.dirty = true;\r\n          this.data.nonce = Math.random();\r\n      };\r\n      VideoTexture.prototype.toJSON = function () {\r\n          if (this.seek >= 0) {\r\n              // the seek value was changed/used\r\n              var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n              this.seek = -1;\r\n              return ret;\r\n          }\r\n          return _super.prototype.toJSON.call(this);\r\n      };\r\n      VideoTexture.prototype.update = function (videoEvent) {\r\n          if (videoEvent.videoClipId == this.videoClipId) {\r\n              this._status = videoEvent.videoStatus || exports.VideoStatus.NONE;\r\n              this._videoLength = videoEvent.totalVideoLength;\r\n              this._position = videoEvent.currentOffset;\r\n          }\r\n      };\r\n      Object.defineProperty(VideoTexture.prototype, \"position\", {\r\n          get: function () {\r\n              return this._position;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"videoLength\", {\r\n          get: function () {\r\n              return this._videoLength;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"status\", {\r\n          get: function () {\r\n              return this._status;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], VideoTexture.prototype, \"videoClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], VideoTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], VideoTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], VideoTexture.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], VideoTexture.prototype, \"playbackRate\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], VideoTexture.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], VideoTexture.prototype, \"seek\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], VideoTexture.prototype, \"playing\", void 0);\r\n      VideoTexture = __decorate([\r\n          DisposableComponent('engine.VideoTexture', exports.CLASS_ID.VIDEO_TEXTURE)\r\n      ], VideoTexture);\r\n      return VideoTexture;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var Camera = /** @class */ (function () {\r\n      function Camera() {\r\n          var _this = this;\r\n          /** Camera position, relative to the parcel. */\r\n          this.position = new Vector3();\r\n          /** Camera rotation */\r\n          this.rotation = new Quaternion();\r\n          /** Feet position, relative to the parcel.  */\r\n          this.feetPosition = new Vector3();\r\n          /** Camera position, absolute. */\r\n          this.worldPosition = new Vector3();\r\n          // @internal\r\n          this.lastEventPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\r\n          // @internal\r\n          this._playerHeight = 1.6;\r\n          // @internal\r\n          this._cameraMode = exports.CameraMode.FirstPerson;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('positionChanged');\r\n              dcl.subscribe('rotationChanged');\r\n              dcl.subscribe('cameraModeChanged');\r\n              dcl.onEvent(function (event) {\r\n                  switch (event.type) {\r\n                      case 'positionChanged':\r\n                          _this.positionChanged(event.data);\r\n                          break;\r\n                      case 'rotationChanged':\r\n                          _this.rotationChanged(event.data);\r\n                          break;\r\n                      case 'cameraModeChanged':\r\n                          _this.cameraModeChanged(event.data);\r\n                          break;\r\n                  }\r\n              });\r\n          }\r\n          Object.defineProperty(this.position, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.position, 'y', {\r\n              get: function () { return _this.lastEventPosition.y; }\r\n          });\r\n          Object.defineProperty(this.position, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'x', {\r\n              get: function () { return _this.lastEventWorldPosition.x; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'y', {\r\n              get: function () { return _this.lastEventWorldPosition.y; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'z', {\r\n              get: function () { return _this.lastEventWorldPosition.z; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'y', {\r\n              get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'x', {\r\n              get: function () { return _this.lastEventRotation.x; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'y', {\r\n              get: function () { return _this.lastEventRotation.y; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'z', {\r\n              get: function () { return _this.lastEventRotation.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'w', {\r\n              get: function () { return _this.lastEventRotation.w; }\r\n          });\r\n      }\r\n      Object.defineProperty(Camera, \"instance\", {\r\n          get: function () {\r\n              if (!Camera._instance) {\r\n                  Camera._instance = new Camera();\r\n              }\r\n              return Camera._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"playerHeight\", {\r\n          /** Player height. */\r\n          get: function () {\r\n              return this._playerHeight;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"cameraMode\", {\r\n          /** Get Camera Mode. */\r\n          get: function () {\r\n              return this._cameraMode;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // @internal\r\n      Camera.prototype.positionChanged = function (e) {\r\n          this.lastEventPosition = e.position;\r\n          this.lastEventWorldPosition = e.cameraPosition;\r\n          this._playerHeight = e.playerHeight;\r\n      };\r\n      // @internal\r\n      Camera.prototype.rotationChanged = function (e) {\r\n          this.lastEventRotation = e.quaternion;\r\n      };\r\n      // @internal\r\n      Camera.prototype.cameraModeChanged = function (e) {\r\n          this._cameraMode = e.cameraMode;\r\n      };\r\n      return Camera;\r\n  }());\n\n  /**\r\n   * @internal\r\n   */\r\n  var QueryPrefix;\r\n  (function (QueryPrefix) {\r\n      QueryPrefix[\"HitFirst\"] = \"rqhf\";\r\n      QueryPrefix[\"HitAll\"] = \"rqha\";\r\n  })(QueryPrefix || (QueryPrefix = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PhysicsCast = /** @class */ (function () {\r\n      function PhysicsCast() {\r\n          this.queries = {};\r\n      }\r\n      Object.defineProperty(PhysicsCast, \"instance\", {\r\n          get: function () {\r\n              PhysicsCast.ensureInstance();\r\n              return PhysicsCast._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      PhysicsCast.ensureInstance = function () {\r\n          if (!PhysicsCast._instance) {\r\n              PhysicsCast._instance = new PhysicsCast();\r\n          }\r\n      };\r\n      PhysicsCast.prototype.getRayFromCamera = function (distance) {\r\n          var rotation = Camera.instance.rotation;\r\n          var rotationMat = Matrix.Identity();\r\n          rotation.toRotationMatrix(rotationMat);\r\n          var direction = Vector3.TransformCoordinates(Vector3.Forward(), rotationMat);\r\n          var ray = {\r\n              origin: Camera.instance.position,\r\n              direction: direction,\r\n              distance: distance\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.getRayFromPositions = function (from, to) {\r\n          var direction = to.subtract(from);\r\n          var length = direction.length();\r\n          var ray = {\r\n              origin: from,\r\n              direction: direction.normalize(),\r\n              distance: length\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.hitFirst = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl != 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitAll = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl != 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitFirstAvatar = function (ray, hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.hitAllAvatars = function (ray, hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      return PhysicsCast;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var RaycastEventSystem = /** @class */ (function () {\r\n      function RaycastEventSystem() {\r\n      }\r\n      RaycastEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(RaycastResponse, this, function (event) {\r\n              if (event.payload.queryType === 'HitFirst') {\r\n                  PhysicsCast.instance.handleRaycastHitFirstResponse(event);\r\n              }\r\n              else if (event.payload.queryType === 'HitAll') {\r\n                  PhysicsCast.instance.handleRaycastHitAllResponse(event);\r\n              }\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('raycastResponse');\r\n          }\r\n      };\r\n      RaycastEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('raycastResponse');\r\n          }\r\n      };\r\n      return RaycastEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventSystem = /** @class */ (function () {\r\n      function PointerEventSystem() {\r\n      }\r\n      PointerEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(PointerEvent, this, function (event) {\r\n              Input.instance.handlePointerEvent(event.payload);\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('pointerUp');\r\n              dcl.subscribe('pointerDown');\r\n              dcl.subscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      PointerEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('pointerUp');\r\n              dcl.unsubscribe('pointerDown');\r\n              dcl.unsubscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      return PointerEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEventSystem = /** @class */ (function () {\r\n      function UUIDEventSystem() {\r\n          this.handlerMap = {};\r\n      }\r\n      UUIDEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onAddEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              if (event.component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[event.component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.handleEvent = function (event) {\r\n          if (event.uuid in this.handlerMap) {\r\n              var handler = this.handlerMap[event.uuid];\r\n              if (handler) {\r\n                  if (handler.callback && 'call' in handler.callback) {\r\n                      handler.callback(event.payload);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      return UUIDEventSystem;\r\n  }());\r\n  /** @internal */\r\n  var raycastEventSystem = new RaycastEventSystem();\r\n  /** @internal */\r\n  var pointerEventSystem = new PointerEventSystem();\r\n  /** @internal */\r\n  var uuidEventSystem = new UUIDEventSystem();\n\n  /**\r\n   * @public\r\n   */\r\n  var AudioClip = /** @class */ (function (_super) {\r\n      __extends(AudioClip, _super);\r\n      function AudioClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], AudioClip.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioClip.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioClip.prototype, \"loadingCompleteEventId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioClip.prototype, \"volume\", void 0);\r\n      AudioClip = __decorate([\r\n          DisposableComponent('engine.AudioClip', exports.CLASS_ID.AUDIO_CLIP)\r\n      ], AudioClip);\r\n      return AudioClip;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioSource = /** @class */ (function (_super) {\r\n      __extends(AudioSource, _super);\r\n      function AudioSource(audioClip) {\r\n          var _this = _super.call(this) || this;\r\n          _this.audioClip = audioClip;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          /**\r\n           * Is this AudioSource playing?\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Pitch, default: 1.0, range from 0.0 to MaxFloat\r\n           */\r\n          _this.pitch = 1.0;\r\n          /**\r\n           * Timestamp of when the playOnce was executed to see if we need to start over the audio\r\n           */\r\n          _this.playedAtTimestamp = Date.now();\r\n          if (!(audioClip instanceof AudioClip)) {\r\n              throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");\r\n          }\r\n          _this.audioClipId = getComponentId(audioClip);\r\n          return _this;\r\n      }\r\n      /**\r\n       * Disables the looping and plays the current source once.\r\n       * If the sound was playing, it stops and starts over.\r\n       */\r\n      AudioSource.prototype.playOnce = function () {\r\n          this.playing = true;\r\n          this.dirty = true;\r\n          this.playedAtTimestamp = Date.now();\r\n          this.data.nonce = Math.random();\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], AudioSource.prototype, \"audioClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioSource.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioSource.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioSource.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioSource.prototype, \"pitch\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioSource.prototype, \"playedAtTimestamp\", void 0);\r\n      AudioSource = __decorate([\r\n          Component('engine.AudioSource', exports.CLASS_ID.AUDIO_SOURCE)\r\n      ], AudioSource);\r\n      return AudioSource;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioStream = /** @class */ (function (_super) {\r\n      __extends(AudioStream, _super);\r\n      function AudioStream(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.playing = false;\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          _this.playing = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], AudioStream.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioStream.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AudioStream.prototype, \"volume\", void 0);\r\n      AudioStream = __decorate([\r\n          Component('engine.AudioStream', exports.CLASS_ID.AUDIO_STREAM)\r\n      ], AudioStream);\r\n      return AudioStream;\r\n  }(ObservableComponent));\n\n  /**\r\n   * Gizmo identifiers\r\n   * @public\r\n   */\r\n  exports.Gizmo = void 0;\r\n  (function (Gizmo) {\r\n      Gizmo[\"MOVE\"] = \"MOVE\";\r\n      Gizmo[\"ROTATE\"] = \"ROTATE\";\r\n      Gizmo[\"SCALE\"] = \"SCALE\";\r\n      Gizmo[\"NONE\"] = \"NONE\";\r\n  })(exports.Gizmo || (exports.Gizmo = {}));\r\n  /**\r\n   * This event is triggered after the user finalizes dragging a gizmo.\r\n   * @public\r\n   */\r\n  var OnGizmoEvent = /** @class */ (function (_super) {\r\n      __extends(OnGizmoEvent, _super);\r\n      function OnGizmoEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'gizmoEvent';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnGizmoEvent.prototype, \"type\", void 0);\r\n      OnGizmoEvent = __decorate([\r\n          Component('engine.gizmoEvent', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnGizmoEvent);\r\n      return OnGizmoEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\r\n   * @public\r\n   */\r\n  var Gizmos = /** @class */ (function (_super) {\r\n      __extends(Gizmos, _super);\r\n      function Gizmos() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Enable position gizmo\r\n           */\r\n          _this.position = true;\r\n          /**\r\n           * Enable rotation gizmo\r\n           */\r\n          _this.rotation = true;\r\n          /**\r\n           * Enable scale gizmo\r\n           */\r\n          _this.scale = true;\r\n          /**\r\n           * Cycle through gizmos using click.\r\n           */\r\n          _this.cycle = true;\r\n          /**\r\n           * Align the gizmos to match the local reference system\r\n           */\r\n          _this.localReference = false;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"scale\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"cycle\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"selectedGizmo\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], Gizmos.prototype, \"localReference\", void 0);\r\n      Gizmos = __decorate([\r\n          Component('engine.gizmos', exports.CLASS_ID.GIZMOS)\r\n      ], Gizmos);\r\n      return Gizmos;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var OnFocus = /** @class */ (function (_super) {\r\n      __extends(OnFocus, _super);\r\n      function OnFocus(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onFocus';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnFocus.prototype, \"type\", void 0);\r\n      OnFocus = __decorate([\r\n          Component('engine.onFocus', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnFocus);\r\n      return OnFocus;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnTextSubmit = /** @class */ (function (_super) {\r\n      __extends(OnTextSubmit, _super);\r\n      function OnTextSubmit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onTextSubmit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnTextSubmit.prototype, \"type\", void 0);\r\n      OnTextSubmit = __decorate([\r\n          Component('engine.onTextSubmit', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnTextSubmit);\r\n      return OnTextSubmit;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnBlur = /** @class */ (function (_super) {\r\n      __extends(OnBlur, _super);\r\n      function OnBlur(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onBlur';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnBlur.prototype, \"type\", void 0);\r\n      OnBlur = __decorate([\r\n          Component('engine.onBlur', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnBlur);\r\n      return OnBlur;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnEnter = /** @class */ (function (_super) {\r\n      __extends(OnEnter, _super);\r\n      function OnEnter(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnEnter.prototype, \"type\", void 0);\r\n      OnEnter = __decorate([\r\n          Component('engine.onEnter', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnEnter);\r\n      return OnEnter;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnChanged = /** @class */ (function (_super) {\r\n      __extends(OnChanged, _super);\r\n      function OnChanged(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onChange';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnChanged.prototype, \"type\", void 0);\r\n      OnChanged = __decorate([\r\n          Component('engine.onChange', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnChanged);\r\n      return OnChanged;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public @deprecated use `OnPointerDown` instead\r\n   */\r\n  var OnClick = /** @class */ (function (_super) {\r\n      __extends(OnClick, _super);\r\n      function OnClick(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onClick';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnClick.prototype, \"type\", void 0);\r\n      OnClick = __decorate([\r\n          Component('engine.onClick', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnClick);\r\n      return OnClick;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerDown = /** @class */ (function (_super) {\r\n      __extends(OnPointerDown, _super);\r\n      function OnPointerDown(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerDown';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnPointerDown.prototype, \"type\", void 0);\r\n      OnPointerDown = __decorate([\r\n          Component('engine.pointerDown', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerDown);\r\n      return OnPointerDown;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUp = /** @class */ (function (_super) {\r\n      __extends(OnPointerUp, _super);\r\n      function OnPointerUp(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerUp';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly\r\n      ], OnPointerUp.prototype, \"type\", void 0);\r\n      OnPointerUp = __decorate([\r\n          Component('engine.pointerUp', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerUp);\r\n      return OnPointerUp;\r\n  }(OnPointerUUIDEvent));\n\n  /**\r\n   * @public\r\n   */\r\n  var UIShape = /** @class */ (function (_super) {\r\n      __extends(UIShape, _super);\r\n      function UIShape(parent) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.name = null;\r\n          _this.visible = true;\r\n          _this.opacity = 1;\r\n          _this.hAlign = 'center';\r\n          _this.vAlign = 'center';\r\n          _this.width = '100px';\r\n          _this.height = '50px';\r\n          _this.positionX = '0px';\r\n          _this.positionY = '0px';\r\n          _this.isPointerBlocker = true;\r\n          if (parent) {\r\n              _this._parent = parent;\r\n              _this.data.parentComponent = getComponentId(parent);\r\n          }\r\n          return _this;\r\n      }\r\n      Object.defineProperty(UIShape.prototype, \"parent\", {\r\n          get: function () {\r\n              return this._parent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(UIShape.prototype, \"parentComponent\", {\r\n          // @internal\r\n          get: function () {\r\n              return this.data.parentComponent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"visible\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"hAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"vAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue\r\n      ], UIShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue\r\n      ], UIShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue\r\n      ], UIShape.prototype, \"positionX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue\r\n      ], UIShape.prototype, \"positionY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIShape.prototype, \"isPointerBlocker\", void 0);\r\n      return UIShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIFullScreen = /** @class */ (function (_super) {\r\n      __extends(UIFullScreen, _super);\r\n      function UIFullScreen() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIFullScreen = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_FULLSCREEN_SHAPE)\r\n      ], UIFullScreen);\r\n      return UIFullScreen;\r\n  }(UIShape));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIWorldSpace = /** @class */ (function (_super) {\r\n      __extends(UIWorldSpace, _super);\r\n      function UIWorldSpace() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIWorldSpace = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_WORLD_SPACE_SHAPE)\r\n      ], UIWorldSpace);\r\n      return UIWorldSpace;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UICanvas = /** @class */ (function (_super) {\r\n      __extends(UICanvas, _super);\r\n      function UICanvas() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UICanvas = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SCREEN_SPACE_SHAPE)\r\n      ], UICanvas);\r\n      return UICanvas;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerRect = /** @class */ (function (_super) {\r\n      __extends(UIContainerRect, _super);\r\n      function UIContainerRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.thickness = 0;\r\n          _this.color = Color4.Clear();\r\n          _this.alignmentUsesSize = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerRect.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerRect.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerRect.prototype, \"alignmentUsesSize\", void 0);\r\n      UIContainerRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_RECT)\r\n      ], UIContainerRect);\r\n      return UIContainerRect;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.UIStackOrientation = void 0;\r\n  (function (UIStackOrientation) {\r\n      UIStackOrientation[UIStackOrientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\r\n      UIStackOrientation[UIStackOrientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\r\n  })(exports.UIStackOrientation || (exports.UIStackOrientation = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerStack = /** @class */ (function (_super) {\r\n      __extends(UIContainerStack, _super);\r\n      function UIContainerStack() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.adaptWidth = true;\r\n          _this.adaptHeight = true;\r\n          _this.color = Color4.Clear();\r\n          _this.stackOrientation = exports.UIStackOrientation.VERTICAL;\r\n          _this.spacing = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerStack.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerStack.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerStack.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerStack.prototype, \"stackOrientation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIContainerStack.prototype, \"spacing\", void 0);\r\n      UIContainerStack = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_STACK)\r\n      ], UIContainerStack);\r\n      return UIContainerStack;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIButton = /** @class */ (function (_super) {\r\n      __extends(UIButton, _super);\r\n      function UIButton() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.fontSize = 10;\r\n          _this.fontWeight = 'normal';\r\n          _this.thickness = 0;\r\n          _this.cornerRadius = 0;\r\n          _this.color = Color4.White();\r\n          _this.background = Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = Color4.Black();\r\n          _this.text = 'button';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"fontWeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"cornerRadius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"background\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIButton.prototype, \"text\", void 0);\r\n      UIButton = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_BUTTON_SHAPE)\r\n      ], UIButton);\r\n      return UIButton;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIText = /** @class */ (function (_super) {\r\n      __extends(UIText, _super);\r\n      function UIText() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = Color4.White();\r\n          _this.color = Color4.White();\r\n          _this.fontSize = 10;\r\n          _this.fontAutoSize = false;\r\n          _this.value = '';\r\n          _this.lineSpacing = 0;\r\n          _this.lineCount = 0;\r\n          _this.adaptWidth = false;\r\n          _this.adaptHeight = false;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = Color4.Black();\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"fontAutoSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], UIText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIText.prototype, \"paddingLeft\", void 0);\r\n      UIText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_TEXT_SHAPE)\r\n      ], UIText);\r\n      return UIText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIInputText = /** @class */ (function (_super) {\r\n      __extends(UIInputText, _super);\r\n      function UIInputText(parent) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = Color4.Black();\r\n          _this.color = Color4.Clear();\r\n          _this.fontSize = 10;\r\n          _this.value = '';\r\n          _this.placeholder = '';\r\n          _this.margin = 10;\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.focusedBackground = Color4.Black();\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onTextSubmit = null;\r\n          _this.onChanged = null;\r\n          _this.onFocus = null;\r\n          _this.onBlur = null;\r\n          _this.onTextChanged = new OnChanged(function (e) {\r\n              var _a = e.value, value = _a.value, isSubmit = _a.isSubmit;\r\n              // NOTE: here we want to keep the same `dirty` state as before changing `this.value`\r\n              // because changing `this.value` will set the component as `dirty` and send a message to the renderer with it value\r\n              // and that message is unnecesary (if the only thing that have changed is `this.value`) since that new value has come from the renderer itself\r\n              var isDirty = _this.dirty;\r\n              _this.value = value;\r\n              _this.dirty = isDirty;\r\n              if (isSubmit && _this.onTextSubmit) {\r\n                  var onSubmitValue = { text: value };\r\n                  _this.onTextSubmit.callback(onSubmitValue);\r\n              }\r\n              else if (!isSubmit && _this.onChanged) {\r\n                  var onChangeValue = { value: value, pointerId: e.pointerId };\r\n                  _this.onChanged.callback(onChangeValue);\r\n              }\r\n          });\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], UIInputText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"placeholder\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"margin\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"focusedBackground\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIInputText.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent\r\n      ], UIInputText.prototype, \"onTextChanged\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent\r\n      ], UIInputText.prototype, \"onFocus\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent\r\n      ], UIInputText.prototype, \"onBlur\", void 0);\r\n      UIInputText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_INPUT_TEXT_SHAPE)\r\n      ], UIInputText);\r\n      return UIInputText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIImage = /** @class */ (function (_super) {\r\n      __extends(UIImage, _super);\r\n      function UIImage(parent, source) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.sourceLeft = 0;\r\n          _this.sourceTop = 0;\r\n          _this.sourceWidth = 1;\r\n          _this.sourceHeight = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.sizeInPixels = true;\r\n          _this.onClick = null;\r\n          _this.source = source;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"sourceLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"sourceTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"sourceWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"sourceHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component\r\n      ], UIImage.prototype, \"source\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIImage.prototype, \"sizeInPixels\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent\r\n      ], UIImage.prototype, \"onClick\", void 0);\r\n      UIImage = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_IMAGE_SHAPE)\r\n      ], UIImage);\r\n      return UIImage;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIScrollRect = /** @class */ (function (_super) {\r\n      __extends(UIScrollRect, _super);\r\n      function UIScrollRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.valueX = 0;\r\n          _this.valueY = 0;\r\n          _this.backgroundColor = Color4.Clear();\r\n          _this.isHorizontal = false;\r\n          _this.isVertical = false;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onChanged = null;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"valueX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"valueY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"backgroundColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"isHorizontal\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"isVertical\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], UIScrollRect.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent\r\n      ], UIScrollRect.prototype, \"onChanged\", void 0);\r\n      UIScrollRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SLIDER_SHAPE)\r\n      ], UIScrollRect);\r\n      return UIScrollRect;\r\n  }(UIShape));\n\n  /**\r\n   * @public\r\n   */\r\n  var AvatarShape = /** @class */ (function (_super) {\r\n      __extends(AvatarShape, _super);\r\n      function AvatarShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.useDummyModel = false;\r\n          _this.talking = false;\r\n          return _this;\r\n      }\r\n      AvatarShape_1 = AvatarShape;\r\n      AvatarShape.Dummy = function () {\r\n          var avatarShape = new AvatarShape_1();\r\n          avatarShape.useDummyModel = true;\r\n          return avatarShape;\r\n      };\r\n      var AvatarShape_1;\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"id\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"expressionTriggerId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"expressionTriggerTimestamp\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"bodyShape\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"wearables\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"skinColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"hairColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"eyeColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"useDummyModel\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field\r\n      ], AvatarShape.prototype, \"talking\", void 0);\r\n      AvatarShape = AvatarShape_1 = __decorate([\r\n          Component('engine.avatarShape', exports.CLASS_ID.AVATAR_SHAPE)\r\n      ], AvatarShape);\r\n      return AvatarShape;\r\n  }(ObservableComponent));\n\n  var communicationsController = null;\r\n  var communicationsControllerPromise = null;\r\n  var _messageObserver = null;\r\n  /**\r\n   * @internal\r\n   */\r\n  function getMessageObserver() {\r\n      if (!_messageObserver) {\r\n          _messageObserver = new Observable();\r\n      }\r\n      return _messageObserver;\r\n  }\r\n  function ensureCommunicationsController() {\r\n      if (!communicationsControllerPromise) {\r\n          communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});\r\n          communicationsControllerPromise.then(function ($) {\r\n              communicationsController = $;\r\n          });\r\n          var observer_1 = getMessageObserver();\r\n          dcl.subscribe('comms');\r\n          dcl.onEvent(function (event) {\r\n              if (event.type === 'comms') {\r\n                  observer_1.notifyObservers(event.data);\r\n              }\r\n          });\r\n      }\r\n      return communicationsControllerPromise;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var MessageBus = /** @class */ (function () {\r\n      function MessageBus() {\r\n          var _this = this;\r\n          this.messageQueue = [];\r\n          this.connected = false;\r\n          this.flushing = false;\r\n          ensureCommunicationsController().then(function ($) {\r\n              _this.connected = true;\r\n              _this.flush();\r\n          });\r\n      }\r\n      MessageBus.prototype.on = function (message, callback) {\r\n          return getMessageObserver().add(function (e) {\r\n              try {\r\n                  var m = JSON.parse(e.message);\r\n                  if (m.message === message) {\r\n                      callback(m.payload, e.sender);\r\n                  }\r\n              }\r\n              catch (e) {\r\n                  dcl.error('Error parsing comms message ' + (e.message || ''), e);\r\n              }\r\n          });\r\n      };\r\n      // @internal\r\n      MessageBus.prototype.sendRaw = function (message) {\r\n          this.messageQueue.push(message);\r\n          if (this.connected) {\r\n              this.flush();\r\n          }\r\n      };\r\n      MessageBus.prototype.emit = function (message, payload) {\r\n          var messageToSend = JSON.stringify({ message: message, payload: payload });\r\n          this.sendRaw(messageToSend);\r\n          getMessageObserver().notifyObservers({ message: messageToSend, sender: 'self' });\r\n      };\r\n      MessageBus.prototype.flush = function () {\r\n          var _this = this;\r\n          if (this.messageQueue.length === 0)\r\n              return;\r\n          if (!this.connected)\r\n              return;\r\n          if (!communicationsController)\r\n              return;\r\n          if (this.flushing)\r\n              return;\r\n          var message = this.messageQueue.shift();\r\n          this.flushing = true;\r\n          dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\r\n              _this.flushing = false;\r\n              _this.flush();\r\n          }, function (e) {\r\n              _this.flushing = false;\r\n              error('Error flushing MessageBus', e);\r\n          });\r\n      };\r\n      return MessageBus;\r\n  }());\n\n  // CORE DEPENDENCIES\r\n  var entity = new Entity('scene');\r\n  entity.uuid = '0';\r\n  // Initialize engine\r\n  /** @public */\r\n  var engine = new Engine(entity);\r\n  DisposableComponent.engine = engine;\r\n  // Initialize Decentraland interface\r\n  if (typeof dcl !== 'undefined') {\r\n      engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);\r\n      _initEventObservables(dcl);\r\n  }\r\n  // Initialize UUID Events system\r\n  engine.addSystem(uuidEventSystem);\r\n  // Initialize Pointer Events System\r\n  engine.addSystem(pointerEventSystem);\r\n  // Initialize Raycast Events System\r\n  engine.addSystem(raycastEventSystem);\n\n  exports.AVATAR_OBSERVABLE = AVATAR_OBSERVABLE;\n  exports.Angle = Angle;\n  exports.AnimationState = AnimationState;\n  exports.Animator = Animator;\n  exports.Arc2 = Arc2;\n  exports.Attachable = Attachable;\n  exports.AudioClip = AudioClip;\n  exports.AudioSource = AudioSource;\n  exports.AudioStream = AudioStream;\n  exports.AvatarModifierArea = AvatarModifierArea;\n  exports.AvatarShape = AvatarShape;\n  exports.Axis = Axis;\n  exports.BasicMaterial = BasicMaterial;\n  exports.BezierCurve = BezierCurve;\n  exports.Billboard = Billboard;\n  exports.BoxShape = BoxShape;\n  exports.Camera = Camera;\n  exports.CircleShape = CircleShape;\n  exports.Color3 = Color3;\n  exports.Color4 = Color4;\n  exports.Component = Component;\n  exports.ComponentAdded = ComponentAdded;\n  exports.ComponentGroup = ComponentGroup;\n  exports.ComponentRemoved = ComponentRemoved;\n  exports.ConeShape = ConeShape;\n  exports.Curve3 = Curve3;\n  exports.CylinderShape = CylinderShape;\n  exports.DEG2RAD = DEG2RAD;\n  exports.DisposableComponent = DisposableComponent;\n  exports.DisposableComponentCreated = DisposableComponentCreated;\n  exports.DisposableComponentRemoved = DisposableComponentRemoved;\n  exports.DisposableComponentUpdated = DisposableComponentUpdated;\n  exports.Engine = Engine;\n  exports.Entity = Entity;\n  exports.Epsilon = Epsilon;\n  exports.EventConstructor = EventConstructor;\n  exports.EventManager = EventManager;\n  exports.Font = Font;\n  exports.Frustum = Frustum;\n  exports.GLTFShape = GLTFShape;\n  exports.Gizmos = Gizmos;\n  exports.GlobalPointerDown = GlobalPointerDown;\n  exports.GlobalPointerUp = GlobalPointerUp;\n  exports.Input = Input;\n  exports.Material = Material;\n  exports.MathTmp = MathTmp;\n  exports.Matrix = Matrix;\n  exports.MessageBus = MessageBus;\n  exports.MultiObserver = MultiObserver;\n  exports.NFTShape = NFTShape;\n  exports.OBJShape = OBJShape;\n  exports.Observable = Observable;\n  exports.ObservableComponent = ObservableComponent;\n  exports.Observer = Observer;\n  exports.ObserverEventState = ObserverEventState;\n  exports.OnAnimationEnd = OnAnimationEnd;\n  exports.OnBlur = OnBlur;\n  exports.OnChanged = OnChanged;\n  exports.OnClick = OnClick;\n  exports.OnEnter = OnEnter;\n  exports.OnFocus = OnFocus;\n  exports.OnGizmoEvent = OnGizmoEvent;\n  exports.OnPointerDown = OnPointerDown;\n  exports.OnPointerLock = OnPointerLock;\n  exports.OnPointerUUIDEvent = OnPointerUUIDEvent;\n  exports.OnPointerUp = OnPointerUp;\n  exports.OnTextSubmit = OnTextSubmit;\n  exports.OnUUIDEvent = OnUUIDEvent;\n  exports.ParentChanged = ParentChanged;\n  exports.Path2 = Path2;\n  exports.Path3D = Path3D;\n  exports.PhysicsCast = PhysicsCast;\n  exports.Plane = Plane;\n  exports.PlaneShape = PlaneShape;\n  exports.PointerEvent = PointerEvent;\n  exports.PointerEventComponent = PointerEventComponent;\n  exports.PointerEventSystem = PointerEventSystem;\n  exports.Quaternion = Quaternion;\n  exports.RAD2DEG = RAD2DEG;\n  exports.RaycastEventSystem = RaycastEventSystem;\n  exports.RaycastResponse = RaycastResponse;\n  exports.Scalar = Scalar;\n  exports.Shape = Shape;\n  exports.Size = Size;\n  exports.SmartItem = SmartItem;\n  exports.SphereShape = SphereShape;\n  exports.Subscription = Subscription;\n  exports.TextShape = TextShape;\n  exports.Texture = Texture;\n  exports.ToGammaSpace = ToGammaSpace;\n  exports.ToLinearSpace = ToLinearSpace;\n  exports.Transform = Transform;\n  exports.UIButton = UIButton;\n  exports.UICanvas = UICanvas;\n  exports.UIContainerRect = UIContainerRect;\n  exports.UIContainerStack = UIContainerStack;\n  exports.UIFullScreen = UIFullScreen;\n  exports.UIImage = UIImage;\n  exports.UIInputText = UIInputText;\n  exports.UIScrollRect = UIScrollRect;\n  exports.UIShape = UIShape;\n  exports.UIText = UIText;\n  exports.UIValue = UIValue;\n  exports.UIWorldSpace = UIWorldSpace;\n  exports.UUIDEvent = UUIDEvent;\n  exports.UUIDEventSystem = UUIDEventSystem;\n  exports.Vector2 = Vector2;\n  exports.Vector3 = Vector3;\n  exports.Vector4 = Vector4;\n  exports.VideoClip = VideoClip;\n  exports.VideoTexture = VideoTexture;\n  exports._initEventObservables = _initEventObservables;\n  exports.buildArray = buildArray;\n  exports.engine = engine;\n  exports.error = error;\n  exports.executeTask = executeTask;\n  exports.getComponentClassId = getComponentClassId;\n  exports.getComponentId = getComponentId;\n  exports.getComponentName = getComponentName;\n  exports.getMessageObserver = getMessageObserver;\n  exports.isDisposableComponent = isDisposableComponent;\n  exports.log = log;\n  exports.newId = newId;\n  exports.onCameraModeChangedObservable = onCameraModeChangedObservable;\n  exports.onEnterScene = onEnterScene;\n  exports.onEnterSceneObservable = onEnterSceneObservable;\n  exports.onIdleStateChangedObservable = onIdleStateChangedObservable;\n  exports.onLeaveScene = onLeaveScene;\n  exports.onLeaveSceneObservable = onLeaveSceneObservable;\n  exports.onPlayerConnectedObservable = onPlayerConnectedObservable;\n  exports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;\n  exports.onPlayerExpressionObservable = onPlayerExpressionObservable;\n  exports.onPointerLockedStateChange = onPointerLockedStateChange;\n  exports.onProfileChanged = onProfileChanged;\n  exports.onRealmChangedObservable = onRealmChangedObservable;\n  exports.onSceneReadyObservable = onSceneReadyObservable;\n  exports.onVideoEvent = onVideoEvent;\n  exports.openExternalURL = openExternalURL;\n  exports.openNFTDialog = openNFTDialog;\n  exports.pointerEventSystem = pointerEventSystem;\n  exports.raycastEventSystem = raycastEventSystem;\n  exports.teleportTo = teleportTo;\n  exports.uuid = uuid;\n  exports.uuidEventSystem = uuidEventSystem;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}(this.self = this.self || {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n\n//# sourceURL=dcl://node_modules/decentraland-ecs/dist/src/index.js")
/*! "src/game.ts" 61bb6c3f08162c5efc11a6e218eede0865342cda126dea08212639c8336f832d */ eval("var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __read = (this && this.__read) || function (o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n};\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\ndefine(\"sync-component\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.SynchronizableObservableComponent = exports.isSyncComponent = exports.textDecode = exports.textEncode = void 0;\r\n    function textEncode(value) {\r\n        var stringValue = typeof value === 'string' ? value : JSON.stringify(value);\r\n        return new Uint8Array(stringValue.split('').map(function (c) { return c.charCodeAt(0); }));\r\n    }\r\n    exports.textEncode = textEncode;\r\n    function textDecode(value) {\r\n        return new Uint8Array(value).reduce(function (acc, char) { return acc + String.fromCharCode(char); }, '');\r\n    }\r\n    exports.textDecode = textDecode;\r\n    var isSyncComponent = function (component) {\r\n        return component instanceof SynchronizableObservableComponent;\r\n    };\r\n    exports.isSyncComponent = isSyncComponent;\r\n    var SynchronizableObservableComponent = /** @class */ (function (_super) {\r\n        __extends(SynchronizableObservableComponent, _super);\r\n        function SynchronizableObservableComponent() {\r\n            return _super !== null && _super.apply(this, arguments) || this;\r\n        }\r\n        SynchronizableObservableComponent.prototype.put = function (serialized) {\r\n            this.data = this.data || {};\r\n            var state = JSON.parse(textDecode(serialized));\r\n            for (var key in state) {\r\n                this.data[key] = state[key];\r\n            }\r\n            this.dirty = false;\r\n        };\r\n        SynchronizableObservableComponent.prototype.getSyncData = function () {\r\n            return textEncode(this.data);\r\n        };\r\n        return SynchronizableObservableComponent;\r\n    }(ObservableComponent));\r\n    exports.SynchronizableObservableComponent = SynchronizableObservableComponent;\r\n});\r\ndefine(\"door-component\", [\"require\", \"exports\", \"sync-component\"], function (require, exports, sync_component_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.DoorOpenComponent = void 0;\r\n    var DoorOpenComponent = /** @class */ (function (_super) {\r\n        __extends(DoorOpenComponent, _super);\r\n        function DoorOpenComponent() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this.open = true;\r\n            return _this;\r\n        }\r\n        DoorOpenComponent_1 = DoorOpenComponent;\r\n        var DoorOpenComponent_1;\r\n        __decorate([\r\n            DoorOpenComponent_1.field\r\n        ], DoorOpenComponent.prototype, \"open\", void 0);\r\n        DoorOpenComponent = DoorOpenComponent_1 = __decorate([\r\n            Component(\"syncstate\")\r\n        ], DoorOpenComponent);\r\n        return DoorOpenComponent;\r\n    }(sync_component_1.SynchronizableObservableComponent));\r\n    exports.DoorOpenComponent = DoorOpenComponent;\r\n});\r\ndefine(\"crdt/types\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n});\r\ndefine(\"crdt/index\", [\"require\", \"exports\", \"crdt/types\"], function (require, exports, types_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.crdtProtocol = void 0;\r\n    __exportStar(types_1, exports);\r\n    /**\r\n     * Compare raw data.\r\n     * @internal\r\n     */\r\n    function sameData(a, b) {\r\n        if (a === b)\r\n            return true;\r\n        if (a instanceof Uint8Array && b instanceof Uint8Array) {\r\n            if (a.byteLength !== b.byteLength) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < a.byteLength; i++) {\r\n                if (a[i] !== b[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return a === b;\r\n    }\r\n    /**\r\n     * @public\r\n     * CRDT protocol.\r\n     * Stores the latest state, and decides whenever we have\r\n     * to process and store the new data in case its an update, or\r\n     * to discard and send our local value cause remote it's outdated.\r\n     */\r\n    function crdtProtocol(sendUpdates, id) {\r\n        /**\r\n         * UUID identifier\r\n         * @internal\r\n         */\r\n        var uuid = id;\r\n        /**\r\n         * Local state where we store the latest lamport timestamp\r\n         * and the raw data value\r\n         * @internal\r\n         */\r\n        var state = {};\r\n        /**\r\n         * We should call this fn in order to update the state\r\n         * @internal\r\n         */\r\n        function updateState(key, data, remoteTimestamp) {\r\n            var _a;\r\n            var timestamp = Math.max(remoteTimestamp, ((_a = state[key]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0);\r\n            return (state[key] = { timestamp: timestamp, data: data });\r\n        }\r\n        /**\r\n         * Create an event for the specified key and store the new data and\r\n         * lamport timestmap incremented by one in the state.\r\n         * @public\r\n         */\r\n        function createEvent(key, data) {\r\n            var _a;\r\n            // Increment the timestamp\r\n            var timestamp = (((_a = state[key]) === null || _a === void 0 ? void 0 : _a.timestamp) || 0) + 1;\r\n            updateState(key, data, timestamp);\r\n            return { key: key, data: data, timestamp: timestamp };\r\n        }\r\n        /**\r\n         * Send generated message\r\n         * @public\r\n         */\r\n        function sendMessage(message) {\r\n            return sendUpdates(message);\r\n        }\r\n        /**\r\n         * Process the received message only if the lamport number is higher than\r\n         * the current one. If not, seems we have a race condition.\r\n         * The bigger raw data wins and spreads it to the network\r\n         * @public\r\n         */\r\n        function processMessage(message) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                // if both timestamps are equal, then we have a race condition.\r\n                // We should compare the raw data and the higher one wins.\r\n                function compareData(current, data) {\r\n                    return current > data;\r\n                }\r\n                var key, data, timestamp, current;\r\n                return __generator(this, function (_a) {\r\n                    key = message.key, data = message.data, timestamp = message.timestamp;\r\n                    current = state[key];\r\n                    // Somehow the message that we sent came back as an echo.\r\n                    if (sameData(current === null || current === void 0 ? void 0 : current.data, data)) {\r\n                        updateState(key, data, timestamp);\r\n                        return [2 /*return*/];\r\n                    }\r\n                    // If the received timestamp is > than our current value, store it\r\n                    if (!current || current.timestamp < timestamp) {\r\n                        return [2 /*return*/, updateState(key, data, timestamp).data];\r\n                    }\r\n                    // If our current timestamp is higher, then send the message\r\n                    // to the network with our state\r\n                    if (current.timestamp > timestamp) {\r\n                        return [2 /*return*/, sendMessage({\r\n                                key: key,\r\n                                data: current.data,\r\n                                timestamp: current.timestamp\r\n                            })];\r\n                    }\r\n                    if (compareData(current.data, data)) {\r\n                        return [2 /*return*/, sendMessage({\r\n                                key: key,\r\n                                data: current.data,\r\n                                timestamp: current.timestamp\r\n                            })];\r\n                    }\r\n                    return [2 /*return*/, updateState(key, data, timestamp).data];\r\n                });\r\n            });\r\n        }\r\n        /**\r\n         * Returns the current state\r\n         * @public\r\n         */\r\n        function getState() {\r\n            return __assign({}, state);\r\n        }\r\n        /**\r\n         * Returns the client uuid\r\n         * @public\r\n         */\r\n        function getUUID() {\r\n            return uuid;\r\n        }\r\n        return {\r\n            createEvent: createEvent,\r\n            sendMessage: sendMessage,\r\n            processMessage: processMessage,\r\n            getState: getState,\r\n            getUUID: getUUID\r\n        };\r\n    }\r\n    exports.crdtProtocol = crdtProtocol;\r\n});\r\ndefine(\"system\", [\"require\", \"exports\", \"crdt/index\", \"sync-component\"], function (require, exports, index_1, sync_component_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CRDTSystem = void 0;\r\n    /**\r\n     * Message helpers\r\n     */\r\n    function parseData(value) {\r\n        try {\r\n            var msg_1 = JSON.parse(value);\r\n            var buff = Object.keys(msg_1.data).map(function (k) { return msg_1.data[k]; });\r\n            var data = new Uint8Array(buff);\r\n            return {\r\n                key: msg_1.key,\r\n                timestamp: msg_1.timestamp,\r\n                data: data\r\n            };\r\n        }\r\n        catch (_e) { }\r\n        return;\r\n    }\r\n    function getKey(entityUUID, componentName) {\r\n        return \"\".concat(entityUUID, \".\").concat(componentName);\r\n    }\r\n    function parseKey(message) {\r\n        return message.key.split(\".\").slice(0, 2);\r\n    }\r\n    /**\r\n     * CRDT System\r\n     */\r\n    var CRDTSystem = /** @class */ (function () {\r\n        function CRDTSystem(wsUrl) {\r\n            var _this = this;\r\n            this.cachedComponents = {};\r\n            this.ws = new WebSocket(wsUrl);\r\n            this.ws.onmessage = function (event) {\r\n                var message = parseData(event.data);\r\n                if (!message)\r\n                    return;\r\n                _this.processMessage(message);\r\n            };\r\n            this.crdt = (0, index_1.crdtProtocol)(function (message) { return __awaiter(_this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    this.ws.send(JSON.stringify(message));\r\n                    return [2 /*return*/];\r\n                });\r\n            }); }, \"UUID:\" + ((Math.random() * 100) | 0).toString());\r\n        }\r\n        CRDTSystem.prototype.activate = function (engine) {\r\n            this.engine = engine;\r\n            engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n            engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n        };\r\n        CRDTSystem.prototype.onAddEntity = function (entity) {\r\n            for (var componentName in entity.components) {\r\n                var component = entity.components[componentName];\r\n                if (!(0, sync_component_2.isSyncComponent)(component)) {\r\n                    continue;\r\n                }\r\n                this.setCacheComponent(entity.uuid, componentName);\r\n            }\r\n        };\r\n        CRDTSystem.prototype.componentAdded = function (event) {\r\n            if (event.entity.isAddedToEngine()) {\r\n                var component = event.entity.components[event.componentName];\r\n                if (!(0, sync_component_2.isSyncComponent)(component)) {\r\n                    return;\r\n                }\r\n                this.setCacheComponent(event.entity.uuid, event.componentName);\r\n            }\r\n        };\r\n        CRDTSystem.prototype.onRemoveEntity = function (entity) {\r\n            delete this.cachedComponents[entity.uuid];\r\n        };\r\n        CRDTSystem.prototype.componentRemoved = function (event) {\r\n            if (this.cachedComponents[event.entity.uuid]) {\r\n                delete this.cachedComponents[event.entity.uuid][event.componentName];\r\n            }\r\n        };\r\n        CRDTSystem.prototype.update = function (dt) {\r\n            this.syncComponents(dt);\r\n        };\r\n        CRDTSystem.prototype.setCacheComponent = function (entityUUID, componentName) {\r\n            if (!this.cachedComponents[entityUUID]) {\r\n                this.cachedComponents[entityUUID] = {};\r\n            }\r\n            this.cachedComponents[entityUUID][componentName] = true;\r\n        };\r\n        CRDTSystem.prototype.processMessage = function (message) {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var data, _a, entityUUID, componentName, component;\r\n                return __generator(this, function (_b) {\r\n                    switch (_b.label) {\r\n                        case 0: return [4 /*yield*/, this.crdt.processMessage(message)];\r\n                        case 1:\r\n                            data = _b.sent();\r\n                            _a = __read(parseKey(message), 2), entityUUID = _a[0], componentName = _a[1];\r\n                            component = this.engine.entities[entityUUID].components[componentName];\r\n                            if (data && (0, sync_component_2.isSyncComponent)(component)) {\r\n                                component.put(data);\r\n                            }\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        CRDTSystem.prototype.syncComponents = function (_dt) {\r\n            for (var entityUUID in this.cachedComponents) {\r\n                var entity = this.cachedComponents[entityUUID];\r\n                for (var componentName in entity) {\r\n                    var component = this.engine.entities[entityUUID].components[componentName];\r\n                    if (!component || !(0, sync_component_2.isSyncComponent)(component) || !component.dirty) {\r\n                        continue;\r\n                    }\r\n                    var newVal = component.getSyncData();\r\n                    var key = getKey(entityUUID, componentName);\r\n                    component.dirty = false;\r\n                    void this.crdt.sendMessage(this.crdt.createEvent(key, newVal));\r\n                }\r\n            }\r\n        };\r\n        return CRDTSystem;\r\n    }());\r\n    exports.CRDTSystem = CRDTSystem;\r\n});\r\ndefine(\"game\", [\"require\", \"exports\", \"door-component\", \"system\"], function (require, exports, door_component_1, system_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    engine.addSystem(new system_1.CRDTSystem(\"wss://sdk-ws.decentraland.io/ws\"));\r\n    var openPos = Quaternion.Euler(0, 90, 0);\r\n    var closedPos = Quaternion.Euler(0, 0, 0);\r\n    // Define fixed walls\r\n    var wall1 = new Entity();\r\n    wall1.addComponent(new Transform({\r\n        position: new Vector3(5.75, 1, 3),\r\n        scale: new Vector3(1.5, 2, 0.05),\r\n    }));\r\n    wall1.addComponent(new BoxShape());\r\n    engine.addEntity(wall1);\r\n    var wall2 = new Entity();\r\n    wall2.addComponent(new Transform({\r\n        position: new Vector3(3.25, 1, 3),\r\n        scale: new Vector3(1.5, 2, 0.05),\r\n    }));\r\n    wall2.addComponent(new BoxShape());\r\n    engine.addEntity(wall2);\r\n    // Add actual door to scene. This entity doesn't rotate, its parent drags it with it.\r\n    var door = new Entity();\r\n    door.addComponent(new Transform({\r\n        position: new Vector3(0.5, 0, 0),\r\n        scale: new Vector3(1, 2, 0.05),\r\n    }));\r\n    door.addComponent(new BoxShape());\r\n    engine.addEntity(door);\r\n    // Define a material to color the door red\r\n    var doorMaterial = new Material();\r\n    doorMaterial.albedoColor = Color3.Red();\r\n    doorMaterial.metallic = 0.9;\r\n    doorMaterial.roughness = 0.1;\r\n    // Assign the material to the door\r\n    door.addComponent(doorMaterial);\r\n    // Define wrapper entity to rotate door. This is the entity that actually rotates.\r\n    var doorPivot = new Entity();\r\n    doorPivot.addComponent(new Transform({\r\n        position: new Vector3(4, 1, 3),\r\n        rotation: closedPos,\r\n    }));\r\n    //doorPivot.addComponent(new DoorState())\r\n    engine.addEntity(doorPivot);\r\n    // Set the door as a child of doorPivot\r\n    door.setParent(doorPivot);\r\n    door.getComponentOrCreate(door_component_1.DoorOpenComponent);\r\n    var OpenerSystem = /** @class */ (function () {\r\n        function OpenerSystem() {\r\n            this.entitites = engine.getComponentGroup(door_component_1.DoorOpenComponent, Transform);\r\n        }\r\n        OpenerSystem.prototype.update = function (dt) {\r\n            var e_1, _a;\r\n            try {\r\n                for (var _b = __values(this.entitites.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var entity = _c.value;\r\n                    var openComponent = entity.getComponent(door_component_1.DoorOpenComponent);\r\n                    var transform = entity.getComponent(Transform);\r\n                    transform.rotation = openComponent.open ? openPos : closedPos;\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n        };\r\n        return OpenerSystem;\r\n    }());\r\n    engine.addSystem(new OpenerSystem());\r\n    // Set the click behavior for the door\r\n    door.addComponent(new OnPointerDown(function (e) {\r\n        var component = door.getComponent(door_component_1.DoorOpenComponent);\r\n        component.open = !component.open;\r\n    }, { button: ActionButton.POINTER, hoverText: \"Open/Close\" }));\r\n});\r\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=dcl://src/game.ts")
